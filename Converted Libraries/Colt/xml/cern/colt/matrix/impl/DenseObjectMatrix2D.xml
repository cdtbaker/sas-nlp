<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.matrix.ObjectMatrix1D"/>
        <import package="cern.colt.matrix.ObjectMatrix2D"/>
        <class name="DenseObjectMatrix2D" line="4">
            <extends class="ObjectMatrix2D"/>
            <javadoc line="4">
                Dense 2-d matrix holding &lt;tt&gt;Object&lt;/tt&gt; elements.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  &lt;p&gt;
                  Internally holds one single contigous one-dimensional array, addressed in row major. 
                  Note that this implementation is not synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Memory requirements:&lt;/b&gt;
                  &lt;p&gt;
                  &lt;tt&gt;memory [bytes] = 8rows()columns()&lt;/tt&gt;.
                  Thus, a 10001000 matrix uses 8 MB.
                  &lt;p&gt;
                  &lt;b&gt;Time complexity:&lt;/b&gt;
                  &lt;p&gt;
                  &lt;tt&gt;O(1)&lt;/tt&gt; (i.e. constant time) for the basic operations
                  &lt;tt&gt;get&lt;/tt&gt;, &lt;tt&gt;getQuick&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;, &lt;tt&gt;setQuick&lt;/tt&gt; and &lt;tt&gt;size&lt;/tt&gt;,
                  &lt;p&gt;
                  Cells are internally addressed in row-major.
                  Applications demanding utmost speed can exploit this fact.
                  Setting/getting values in a loop row-by-row is quicker than column-by-column.
                  Thus
                  &lt;pre&gt;
                  for (int row=0; row &lt; rows; row++) {
                  for (int column=0; column &lt; columns; column++) {
                  matrix.setQuick(row,column,someValue);
                  }
                  }
                  &lt;/pre&gt;
                  is quicker than
                  &lt;pre&gt;
                  for (int column=0; column &lt; columns; column++) {
                  for (int row=0; row &lt; rows; row++) {
                  matrix.setQuick(row,column,someValue);
                  }
                  }
                  &lt;/pre&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="elements" type="Object[]" line="46"/>
            <javadoc line="46">
                The elements of this matrix.
                  elements are stored in row major, i.e.
                  index==rowcolumns + column
                  columnOf(index)==index%columns
                  rowOf(index)==index/columns
                  i.e. {row0 column0..m}, {row1 column0..m}, ..., {rown column0..m}                
            </javadoc>
            <javadoc line="55">
                Constructs a matrix with a copy of the given values.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
                  and have exactly the same number of columns in every row.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values The values to be filled into the new matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values.length: values[row].length != values[row-1].length</tt>.                    
                </throws>
            </javadoc>
            <method name="DenseObjectMatrix2D" type="constructor" line="64">
                <params>
                    <param name="values" type="Object[][]"/>
                </params>
            </method>
            <javadoc line="68">
                Constructs a matrix with a given number of rows and columns.
                  All entries are initially &lt;tt&gt;0&lt;/tt&gt;.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>rows<0 || columns<0 || (Object)columnsrows > Integer.MAX_VALUE</tt>.                    
                </throws>
            </javadoc>
            <method name="DenseObjectMatrix2D" type="constructor" line="75">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="79">
                Constructs a view with the given parameters.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <param>
                    elements the cells.                    
                </param>
                <param>
                    rowZero the position of the first element.                    
                </param>
                <param>
                    columnZero the position of the first element.                    
                </param>
                <param>
                    rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.                    
                </param>
                <param>
                    columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>rows<0 || columns<0 || (Object)columnsrows > Integer.MAX_VALUE</tt> or flip's are illegal.                    
                </throws>
            </javadoc>
            <method name="DenseObjectMatrix2D" type="constructor" line="90">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="elements" type="Object[]"/>
                    <param name="rowZero" type="int"/>
                    <param name="columnZero" type="int"/>
                    <param name="rowStride" type="int"/>
                    <param name="columnStride" type="int"/>
                </params>
            </method>
            <javadoc line="95">
                Sets all cells to the state specified by &lt;tt&gt;values&lt;/tt&gt;.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
                  and have exactly the same number of rows and columns as the receiver.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values the values to be filled into the cells.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>values.length != rows() || for any 0 &lt;= row &lt; rows(): values[row].length != columns()</tt>.                    
                </throws>
            </javadoc>
            <method name="assign" type="ObjectMatrix2D" line="105">
                <params>
                    <param name="values" type="Object[][]"/>
                </params>
                <scope line="106">
                    <declaration name="i" type="int" line="108"/>
                    <scope line="109">
                        <declaration name="currentRow" type="Object[]" line="110"/>
                    </scope>
                </scope>
                <scope line="116"/>
            </method>
            <javadoc line="121">
                Assigns the result of a function to each cell; &lt;tt&gt;x[row,col] = function(x[row,col])&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  matrix = 2 x 2 matrix
                  0.5 1.5      
                  2.5 3.5
                  // change each cell to its sine
                  matrix.assign(cern.jet.math.Functions.sin);
                  --&gt;
                  2 x 2 matrix
                  0.479426  0.997495 
                  0.598472 -0.350783
                  &lt;/pre&gt;
                  For further examples, see the &lt;a href=&quot;package-summary.html#FunctionObjects&quot;&gt;package doc&lt;/a&gt;.                
                <param>
                    function a function object taking as argument the current cell's value.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <see>
                    cern.jet.math.Functions                    
                </see>
            </javadoc>
            <method name="assign" type="ObjectMatrix2D" line="141">
                <params>
                    <param name="function" type="cern.colt.function.ObjectFunction"/>
                </params>
                <declaration name="elems" type="Object[]" line="142"/>
                <declaration name="index" type="int" line="144"/>
                <declaration name="cs" type="int" line="145"/>
                <declaration name="rs" type="int" line="146"/>
                <scope line="147">
                    <scope line="148"/>
                </scope>
            </method>
            <javadoc line="156">
                Replaces all cell values of the receiver with the values of another matrix.
                  Both matrices must have the same number of rows and columns.
                  If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces &lt;i&gt;as if&lt;/i&gt; using an intermediate auxiliary deep copy of &lt;tt&gt;other&lt;/tt&gt;.                
                <param>
                    source   the source matrix to copy from (may be identical to the receiver).                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>columns() != source.columns() || rows() != source.rows()</tt>                    
                </throws>
            </javadoc>
            <method name="assign" type="ObjectMatrix2D" line="164">
                <params>
                    <param name="source" type="ObjectMatrix2D"/>
                </params>
                <scope line="165"/>
                <declaration name="other" type="DenseObjectMatrix2D" line="168"/>
                <scope line="171"/>
                <scope line="175">
                    <declaration name="c" type="ObjectMatrix2D" line="176"/>
                    <scope line="177"/>
                </scope>
                <declaration name="elems" type="Object[]" line="182"/>
                <declaration name="otherElems" type="Object[]" line="183"/>
                <declaration name="cs" type="int" line="185"/>
                <declaration name="ocs" type="int" line="186"/>
                <declaration name="rs" type="int" line="187"/>
                <declaration name="ors" type="int" line="188"/>
                <declaration name="otherIndex" type="int" line="189"/>
                <declaration name="index" type="int" line="190"/>
                <scope line="191">
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="202">
                Assigns the result of a function to each cell; &lt;tt&gt;x[row,col] = function(x[row,col],y[row,col])&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  // assign x[row,col] = x[row,col]&lt;sup&gt;y[row,col]&lt;/sup&gt;
                  m1 = 2 x 2 matrix 
                  0 1 
                  2 3
                  m2 = 2 x 2 matrix 
                  0 2 
                  4 6
                  m1.assign(m2, cern.jet.math.Functions.pow);
                  --&gt;
                  m1 == 2 x 2 matrix
                  1   1 
                  16 729
                  &lt;/pre&gt;
                  For further examples, see the &lt;a href=&quot;package-summary.html#FunctionObjects&quot;&gt;package doc&lt;/a&gt;.                
                <param>
                    y the secondary matrix to operate on.                    
                </param>
                <param>
                    function a function object taking as first argument the current cell's value of <tt>this</tt>,
                      and as second argument the current cell's value of <tt>y</tt>,                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>columns() != other.columns() || rows() != other.rows()</tt>                    
                </throws>
                <see>
                    cern.jet.math.Functions                    
                </see>
            </javadoc>
            <method name="assign" type="ObjectMatrix2D" line="228">
                <params>
                    <param name="y" type="ObjectMatrix2D"/>
                    <param name="function" type="cern.colt.function.ObjectObjectFunction"/>
                </params>
                <scope line="229"/>
                <declaration name="other" type="DenseObjectMatrix2D" line="232"/>
                <declaration name="elems" type="Object[]" line="234"/>
                <declaration name="otherElems" type="Object[]" line="235"/>
                <declaration name="cs" type="int" line="237"/>
                <declaration name="ocs" type="int" line="238"/>
                <declaration name="rs" type="int" line="239"/>
                <declaration name="ors" type="int" line="240"/>
                <declaration name="otherIndex" type="int" line="241"/>
                <declaration name="index" type="int" line="242"/>
                <scope line="243">
                    <scope line="244"/>
                </scope>
            </method>
            <javadoc line="254">
                Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <return>
                    the value at the specified coordinate.                    
                </return>
            </javadoc>
            <method name="getQuick" type="Object" line="263">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="266">
                Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share common cells.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;other != null&lt;/tt&gt; and at least one of the following conditions is met
                  &lt;ul&gt;
                  &lt;li&gt;the receiver is a view of the other matrix
                  &lt;li&gt;the other matrix is a view of the receiver
                  &lt;li&gt;&lt;tt&gt;this == other&lt;/tt&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="haveSharedCellsRaw" type="boolean" line="275">
                <params>
                    <param name="other" type="ObjectMatrix2D"/>
                </params>
                <scope line="276">
                    <declaration name="otherMatrix" type="SelectedDenseObjectMatrix2D" line="277"/>
                </scope>
                <scope line="280">
                    <declaration name="otherMatrix" type="DenseObjectMatrix2D" line="281"/>
                </scope>
            </method>
            <javadoc line="286">
                Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.                
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
            </javadoc>
            <method name="index" type="int" line="291">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="294">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of rows and columns.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt;, etc.
                  In general, the new matrix should have internal parametrization as similar as possible.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <return>
                    a new empty matrix of the same dynamic type.                    
                </return>
            </javadoc>
            <method name="like" type="ObjectMatrix2D" line="303">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="306">
                Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseObjectMatrix1D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseObjectMatrix1D&lt;/tt&gt;, etc.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <method name="like1D" type="ObjectMatrix1D" line="313">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="316">
                Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, sharing the same cells.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseObjectMatrix1D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseObjectMatrix1D&lt;/tt&gt;, etc.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <param>
                    zero the index of the first element.                    
                </param>
                <param>
                    stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <method name="like1D" type="ObjectMatrix1D" line="325">
                <params>
                    <param name="size" type="int"/>
                    <param name="zero" type="int"/>
                    <param name="stride" type="int"/>
                </params>
            </method>
            <javadoc line="328">
                Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.
                  &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    value the value to be filled into the specified cell.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="337">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="340">
                Construct and returns a new selection view.                
                <param>
                    rowOffsets the offsets of the visible elements.                    
                </param>
                <param>
                    columnOffsets the offsets of the visible elements.                    
                </param>
                <return>
                    a new view.                    
                </return>
            </javadoc>
            <method name="viewSelectionLike" type="ObjectMatrix2D" line="346">
                <params>
                    <param name="rowOffsets" type="int[]"/>
                    <param name="columnOffsets" type="int[]"/>
                </params>
            </method>
        </class>
    </source>