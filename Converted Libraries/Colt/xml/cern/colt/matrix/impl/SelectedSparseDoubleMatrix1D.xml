<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.map.AbstractIntDoubleMap"/>
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="SelectedSparseDoubleMatrix1D" line="14">
            <extends class="DoubleMatrix1D"/>
            <comment line="48">
                The elements of the matrix.                
            </comment>
            <javadoc line="14">
                Selection view on sparse 1-d matrices holding &lt;tt&gt;double&lt;/tt&gt; elements.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  &lt;p&gt;
                  Objects of this class are typically constructed via &lt;tt&gt;viewIndexes&lt;/tt&gt; methods on some source matrix.
                  The interface introduced in abstract super classes defines everything a user can do.
                  From a user point of view there is nothing special about this class; it presents the same functionality with the same signatures and semantics as its abstract superclass(es) while introducing no additional functionality.
                  Thus, this class need not be visible to users.
                  By the way, the same principle applies to concrete DenseXXX, SparseXXX classes: they presents the same functionality with the same signatures and semantics as abstract superclass(es) while introducing no additional functionality.
                  Thus, they need not be visible to users, either. 
                  Factory methods could hide all these concrete types.
                  &lt;p&gt;
                  This class uses no delegation. 
                  Its instances point directly to the data. 
                  Cell addressing overhead is 1 additional array index access per get/set.
                  &lt;p&gt;
                  Note that this implementation is not synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Memory requirements:&lt;/b&gt;
                  &lt;p&gt;
                  &lt;tt&gt;memory [bytes] = 4indexes.length&lt;/tt&gt;.
                  Thus, an index view with 1000 indexes additionally uses 4 KB.
                  &lt;p&gt;
                  &lt;b&gt;Time complexity:&lt;/b&gt;
                  &lt;p&gt;
                  Depends on the parent view holding cells.
                  &lt;p&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="elements" type="AbstractIntDoubleMap" line="50"/>
            <declaration name="offsets" type="int[]" line="52"/>
            <javadoc line="52">
                The offsets of visible indexes of this matrix.                
            </javadoc>
            <declaration name="offset" type="int" line="57"/>
            <javadoc line="57">
                The offset.                
            </javadoc>
            <javadoc line="61">
                Constructs a matrix view with the given parameters.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <param>
                    elements the cells.                    
                </param>
                <param>
                    zero the index of the first element.                    
                </param>
                <param>
                    stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.                    
                </param>
                <param>
                    offsets   the offsets of the cells that shall be visible.                    
                </param>
                <param>
                    offset                    
                </param>
            </javadoc>
            <method name="SelectedSparseDoubleMatrix1D" type="constructor" line="70">
                <params>
                    <param name="size" type="int"/>
                    <param name="elements" type="AbstractIntDoubleMap"/>
                    <param name="zero" type="int"/>
                    <param name="stride" type="int"/>
                    <param name="offsets" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="78">
                Constructs a matrix view with the given parameters.                
                <param>
                    elements the cells.                    
                </param>
                <param>
                    indexes   The indexes of the cells that shall be visible.                    
                </param>
            </javadoc>
            <method name="SelectedSparseDoubleMatrix1D" type="constructor" line="83">
                <params>
                    <param name="elements" type="AbstractIntDoubleMap"/>
                    <param name="offsets" type="int[]"/>
                </params>
            </method>
            <javadoc line="86">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <param>
                    rank   the absolute rank of the element.                    
                </param>
                <return>
                    the position.                    
                </return>
            </javadoc>
            <method name="_offset" type="int" line="93">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="96">
                Returns the matrix cell value at coordinate &lt;tt&gt;index&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.                
                <param>
                    index   the index of the cell.                    
                </param>
                <return>
                    the value of the specified cell.                    
                </return>
            </javadoc>
            <method name="getQuick" type="double" line="106">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="108">
                    if (debug) if (index&lt;0 || index&gt;=size) checkIndex(index);
                    return elements.get(index(index));
                    manually inlined:                    
                </comment>
            </method>
            <javadoc line="112">
                Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share at least one identical cell.                
            </javadoc>
            <method name="haveSharedCellsRaw" type="boolean" line="115">
                <params>
                    <param name="other" type="DoubleMatrix1D"/>
                </params>
                <scope line="116">
                    <declaration name="otherMatrix" type="SelectedSparseDoubleMatrix1D" line="117"/>
                </scope>
                <scope line="120">
                    <declaration name="otherMatrix" type="SparseDoubleMatrix1D" line="121"/>
                </scope>
            </method>
            <javadoc line="126">
                Returns the position of the element with the given relative rank within the (virtual or non-virtual) internal 1-dimensional array.
                  You may want to override this method for performance.                
                <param>
                    rank   the rank of the element.                    
                </param>
            </javadoc>
            <method name="index" type="int" line="132">
                <params>
                    <param name="rank" type="int"/>
                </params>
                <comment line="134">
                    return this.offset + super.index(rank);
                     manually inlined:                    
                </comment>
            </method>
            <javadoc line="137">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified size.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.
                  In general, the new matrix should have internal parametrization as similar as possible.                
                <param>
                    size the number of cell the matrix shall have.                    
                </param>
                <return>
                    a new empty matrix of the same dynamic type.                    
                </return>
            </javadoc>
            <method name="like" type="DoubleMatrix1D" line="146">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="149">
                Construct and returns a new 2-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <method name="like2D" type="DoubleMatrix2D" line="158">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="161">
                Sets the matrix cell at coordinate &lt;tt&gt;index&lt;/tt&gt; to the specified value.
                  &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.                
                <param>
                    index   the index of the cell.                    
                </param>
                <param>
                    value the value to be filled into the specified cell.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="171">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <comment line="173">
                    if (debug) if (index&lt;0 || index&gt;=size) checkIndex(index);
                    int i =	index(index);
                    manually inlined:                    
                </comment>
                <declaration name="i" type="int" line="175"/>
            </method>
            <javadoc line="181">
                Sets up a matrix with a given number of cells.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
            </javadoc>
            <method name="setUp" type="void" line="185">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="190">
                Construct and returns a new selection view.                
                <param>
                    offsets the offsets of the visible elements.                    
                </param>
                <return>
                    a new view.                    
                </return>
            </javadoc>
            <method name="viewSelectionLike" type="DoubleMatrix1D" line="196">
                <params>
                    <param name="offsets" type="int[]"/>
                </params>
            </method>
        </class>
    </source>