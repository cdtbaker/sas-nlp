<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.matrix.ObjectMatrix2D"/>
        <import package="cern.colt.matrix.ObjectMatrix3D"/>
        <class name="DenseObjectMatrix3D" line="13">
            <extends class="ObjectMatrix3D"/>
            <javadoc line="13">
                Dense 3-d matrix holding &lt;tt&gt;Object&lt;/tt&gt; elements.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  &lt;p&gt;
                  Internally holds one single contigous one-dimensional array, addressed in (in decreasing order of significance): slice major, row major, column major.
                  Note that this implementation is not synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Memory requirements:&lt;/b&gt;
                  &lt;p&gt;
                  &lt;tt&gt;memory [bytes] = 8slices()rows()columns()&lt;/tt&gt;.
                  Thus, a 100100100 matrix uses 8 MB.
                  &lt;p&gt;
                  &lt;b&gt;Time complexity:&lt;/b&gt;
                  &lt;p&gt;
                  &lt;tt&gt;O(1)&lt;/tt&gt; (i.e. constant time) for the basic operations
                  &lt;tt&gt;get&lt;/tt&gt;, &lt;tt&gt;getQuick&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;, &lt;tt&gt;setQuick&lt;/tt&gt; and &lt;tt&gt;size&lt;/tt&gt;,
                  &lt;p&gt;
                  Applications demanding utmost speed can exploit knowledge about the internal addressing.
                  Setting/getting values in a loop slice-by-slice, row-by-row, column-by-column is quicker than, for example, column-by-column, row-by-row, slice-by-slice.
                  Thus
                  &lt;pre&gt;
                  for (int slice=0; slice &lt; slices; slice++) {
                  for (int row=0; row &lt; rows; row++) {
                  for (int column=0; column &lt; columns; column++) {
                  matrix.setQuick(slice,row,column,someValue);
                  }		    
                  }
                  }
                  &lt;/pre&gt;
                  is quicker than
                  &lt;pre&gt;
                  for (int column=0; column &lt; columns; column++) {
                  for (int row=0; row &lt; rows; row++) {
                  for (int slice=0; slice &lt; slices; slice++) {
                  matrix.setQuick(slice,row,column,someValue);
                  }
                  }
                  }
                  &lt;/pre&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="elements" type="Object[]" line="58"/>
            <javadoc line="58">
                The elements of this matrix.
                  elements are stored in slice major, then row major, then column major, in order of significance, i.e.
                  index==slicesliceStride+ rowrowStride + columncolumnStride
                  i.e. {slice0 row0..m}, {slice1 row0..m}, ..., {sliceN row0..m}
                  with each row storead as 
                  {row0 column0..m}, {row1 column0..m}, ..., {rown column0..m}                
            </javadoc>
            <javadoc line="67">
                Constructs a matrix with a copy of the given values.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[slice][row][column]&lt;/tt&gt;
                  and have exactly the same number of rows in in every slice and exactly the same number of columns in in every row.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values The values to be filled into the new matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>for any 1 &lt;= slice &lt; values.length: values[slice].length != values[slice-1].length</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values[0].length: values[slice][row].length != values[slice][row-1].length</tt>.                    
                </throws>
            </javadoc>
            <method name="DenseObjectMatrix3D" type="constructor" line="78">
                <params>
                    <param name="values" type="Object[][][]"/>
                </params>
            </method>
            <javadoc line="82">
                Constructs a matrix with a given number of slices, rows and columns.
                  All entries are initially &lt;tt&gt;0&lt;/tt&gt;.                
                <param>
                    slices the number of slices the matrix shall have.                    
                </param>
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>(Object)slicescolumnsrows > Integer.MAX_VALUE</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.                    
                </throws>
            </javadoc>
            <method name="DenseObjectMatrix3D" type="constructor" line="91">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="95">
                Constructs a view with the given parameters.                
                <param>
                    slices the number of slices the matrix shall have.                    
                </param>
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <param>
                    elements the cells.                    
                </param>
                <param>
                    sliceZero the position of the first element.                    
                </param>
                <param>
                    rowZero the position of the first element.                    
                </param>
                <param>
                    columnZero the position of the first element.                    
                </param>
                <param>
                    sliceStride the number of elements between two slices, i.e. <tt>index(k+1,i,j)-index(k,i,j)</tt>.                    
                </param>
                <param>
                    rowStride the number of elements between two rows, i.e. <tt>index(k,i+1,j)-index(k,i,j)</tt>.                    
                </param>
                <param>
                    columnnStride the number of elements between two columns, i.e. <tt>index(k,i,j+1)-index(k,i,j)</tt>.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>(Object)slicescolumnsrows > Integer.MAX_VALUE</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.                    
                </throws>
            </javadoc>
            <method name="DenseObjectMatrix3D" type="constructor" line="110">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="elements" type="Object[]"/>
                    <param name="sliceZero" type="int"/>
                    <param name="rowZero" type="int"/>
                    <param name="columnZero" type="int"/>
                    <param name="sliceStride" type="int"/>
                    <param name="rowStride" type="int"/>
                    <param name="columnStride" type="int"/>
                </params>
            </method>
            <javadoc line="115">
                Sets all cells to the state specified by &lt;tt&gt;values&lt;/tt&gt;.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[slice][row][column]&lt;/tt&gt;
                  and have exactly the same number of slices, rows and columns as the receiver.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values the values to be filled into the cells.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>values.length != slices() || for any 0 &lt;= slice &lt; slices(): values[slice].length != rows()</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>for any 0 &lt;= column &lt; columns(): values[slice][row].length != columns()</tt>.                    
                </throws>
            </javadoc>
            <method name="assign" type="ObjectMatrix3D" line="127">
                <params>
                    <param name="values" type="Object[][][]"/>
                </params>
                <scope line="128">
                    <declaration name="i" type="int" line="130"/>
                    <scope line="131">
                        <declaration name="currentSlice" type="Object[][]" line="132"/>
                        <scope line="134">
                            <declaration name="currentRow" type="Object[]" line="135"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="142"/>
            </method>
            <javadoc line="147">
                Replaces all cell values of the receiver with the values of another matrix.
                  Both matrices must have the same number of slices, rows and columns.
                  If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces &lt;i&gt;as if&lt;/i&gt; using an intermediate auxiliary deep copy of &lt;tt&gt;other&lt;/tt&gt;.                
                <param>
                    source   the source matrix to copy from (may be identical to the receiver).                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>slices() != source.slices() || rows() != source.rows() || columns() != source.columns()</tt>                    
                </throws>
            </javadoc>
            <method name="assign" type="ObjectMatrix3D" line="156">
                <params>
                    <param name="source" type="ObjectMatrix3D"/>
                </params>
                <comment line="157">
                    overriden for performance only                    
                </comment>
                <comment line="166">
                    should not happen                    
                </comment>
                <comment line="172">
                    quickest                    
                </comment>
                <scope line="158"/>
                <declaration name="other" type="DenseObjectMatrix3D" line="161"/>
                <scope line="164">
                    <declaration name="c" type="ObjectMatrix3D" line="165"/>
                    <scope line="166"/>
                </scope>
                <scope line="172"/>
            </method>
            <javadoc line="178">
                Returns the matrix cell value at coordinate &lt;tt&gt;[slice,row,column]&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;slice&amp;lt;0 || slice&amp;gt;=slices() || row&amp;lt;0 || row&amp;gt;=rows() || column&amp;lt;0 || column&amp;gt;=column()&lt;/tt&gt;.                
                <param>
                    slice   the index of the slice-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <return>
                    the value at the specified coordinate.                    
                </return>
            </javadoc>
            <method name="getQuick" type="Object" line="190">
                <params>
                    <param name="slice" type="int"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <comment line="191">
                    if (debug) if (slice&lt;0 || slice&gt;=slices || row&lt;0 || row&gt;=rows || column&lt;0 || column&gt;=columns) throw new IndexOutOfBoundsException(&quot;slice:&quot;+slice+&quot;, row:&quot;+row+&quot;, column:&quot;+column);                    
                </comment>
                <comment line="192">
                    return elements[index(slice,row,column)];                    
                </comment>
                <comment line="193">
                    manually inlined:                    
                </comment>
            </method>
            <javadoc line="196">
                Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share common cells.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;other != null&lt;/tt&gt; and at least one of the following conditions is met
                  &lt;ul&gt;
                  &lt;li&gt;the receiver is a view of the other matrix
                  &lt;li&gt;the other matrix is a view of the receiver
                  &lt;li&gt;&lt;tt&gt;this == other&lt;/tt&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="haveSharedCellsRaw" type="boolean" line="205">
                <params>
                    <param name="other" type="ObjectMatrix3D"/>
                </params>
                <scope line="206">
                    <declaration name="otherMatrix" type="SelectedDenseObjectMatrix3D" line="207"/>
                </scope>
                <scope line="210">
                    <declaration name="otherMatrix" type="DenseObjectMatrix3D" line="211"/>
                </scope>
            </method>
            <javadoc line="216">
                Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.                
                <param>
                    slice   the index of the slice-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the third-coordinate.                    
                </param>
            </javadoc>
            <method name="index" type="int" line="223">
                <params>
                    <param name="slice" type="int"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <comment line="224">
                    return _sliceOffset(_sliceRank(slice)) + _rowOffset(_rowRank(row)) + _columnOffset(_columnRank(column));                    
                </comment>
                <comment line="225">
                    manually inlined:                    
                </comment>
            </method>
            <javadoc line="228">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of slices, rows and columns.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseObjectMatrix3D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseObjectMatrix3D&lt;/tt&gt;, etc.
                  In general, the new matrix should have internal parametrization as similar as possible.                
                <param>
                    slices the number of slices the matrix shall have.                    
                </param>
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <return>
                    a new empty matrix of the same dynamic type.                    
                </return>
            </javadoc>
            <method name="like" type="ObjectMatrix3D" line="239">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="242">
                Construct and returns a new 2-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, sharing the same cells.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt;, etc.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <param>
                    rowZero the position of the first element.                    
                </param>
                <param>
                    columnZero the position of the first element.                    
                </param>
                <param>
                    rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.                    
                </param>
                <param>
                    columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <method name="like2D" type="ObjectMatrix2D" line="255">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="rowZero" type="int"/>
                    <param name="columnZero" type="int"/>
                    <param name="rowStride" type="int"/>
                    <param name="columnStride" type="int"/>
                </params>
            </method>
            <javadoc line="258">
                Sets the matrix cell at coordinate &lt;tt&gt;[slice,row,column]&lt;/tt&gt; to the specified value.
                  &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;slice&amp;lt;0 || slice&amp;gt;=slices() || row&amp;lt;0 || row&amp;gt;=rows() || column&amp;lt;0 || column&amp;gt;=column()&lt;/tt&gt;.                
                <param>
                    slice   the index of the slice-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    value the value to be filled into the specified cell.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="270">
                <params>
                    <param name="slice" type="int"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="Object"/>
                </params>
                <comment line="271">
                    if (debug) if (slice&lt;0 || slice&gt;=slices || row&lt;0 || row&gt;=rows || column&lt;0 || column&gt;=columns) throw new IndexOutOfBoundsException(&quot;slice:&quot;+slice+&quot;, row:&quot;+row+&quot;, column:&quot;+column);                    
                </comment>
                <comment line="272">
                    elements[index(slice,row,column)] = value;                    
                </comment>
                <comment line="273">
                    manually inlined:                    
                </comment>
            </method>
            <javadoc line="276">
                Construct and returns a new selection view.                
                <param>
                    sliceOffsets the offsets of the visible elements.                    
                </param>
                <param>
                    rowOffsets the offsets of the visible elements.                    
                </param>
                <param>
                    columnOffsets the offsets of the visible elements.                    
                </param>
                <return>
                    a new view.                    
                </return>
            </javadoc>
            <method name="viewSelectionLike" type="ObjectMatrix3D" line="284">
                <params>
                    <param name="sliceOffsets" type="int[]"/>
                    <param name="rowOffsets" type="int[]"/>
                    <param name="columnOffsets" type="int[]"/>
                </params>
            </method>
        </class>
    </source>