<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix">
        <import package="cern.colt.matrix.impl.DenseObjectMatrix3D"/>
        <import package="cern.colt.matrix.impl.SparseObjectMatrix3D"/>
        <class name="ObjectFactory3D" line="4">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="4">
                Factory for convenient construction of 3-d matrices holding &lt;tt&gt;Object&lt;/tt&gt; cells. 
                  Use idioms like &lt;tt&gt;ObjectFactory3D.dense.make(4,4,4)&lt;/tt&gt; to construct dense matrices, 
                  &lt;tt&gt;ObjectFactory3D.sparse.make(4,4,4)&lt;/tt&gt; to construct sparse matrices.
                  If the factory is used frequently it might be useful to streamline the notation. 
                  For example by aliasing:
                  &lt;table&gt;
                  &lt;td class=&quot;PRE&quot;&gt; 
                  &lt;pre&gt;
                  ObjectFactory3D F = ObjectFactory3D.dense;
                  F.make(4,4,4);
                  ...
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;/table&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="dense" type="ObjectFactory3D" line="23"/>
            <javadoc line="23">
                A factory producing dense matrices.                
            </javadoc>
            <declaration name="sparse" type="ObjectFactory3D" line="27"/>
            <javadoc line="27">
                A factory producing sparse matrices.                
            </javadoc>
            <javadoc line="31">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="ObjectFactory3D" type="constructor" line="34"/>
            <javadoc line="36">
                Constructs a matrix with the given cell values.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[slice][row][column]&lt;/tt&gt;
                  and have exactly the same number of slices, rows and columns as the receiver.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values the values to be filled into the cells.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>values.length != slices() || for any 0 &lt;= slice &lt; slices(): values[slice].length != rows()</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>for any 0 &lt;= column &lt; columns(): values[slice][row].length != columns()</tt>.                    
                </throws>
            </javadoc>
            <method name="make" type="ObjectMatrix3D" line="47">
                <params>
                    <param name="values" type="Object[][][]"/>
                </params>
            </method>
            <javadoc line="51">
                Constructs a matrix with the given shape, each cell initialized with zero.                
            </javadoc>
            <method name="make" type="ObjectMatrix3D" line="54">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="58">
                Constructs a matrix with the given shape, each cell initialized with the given value.                
            </javadoc>
            <method name="make" type="ObjectMatrix3D" line="61">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="initialValue" type="Object"/>
                </params>
            </method>
        </class>
    </source>