<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.map">
        <class name="QuickOpenIntIntHashMap" line="11">
            <extends class="OpenIntIntHashMap"/>
            <comment line="26">
                benchmark only                
            </comment>
            <javadoc line="11">
                Status: Experimental; Do not use for production yet. Hash map holding (key,value) associations of type &lt;tt&gt;(int--&gt;int)&lt;/tt&gt;; Automatically grows and shrinks as needed; Implemented using open addressing with double hashing.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  Implements open addressing with double hashing, using &quot;Brent&apos;s variation&quot;.
                  Brent&apos;s variation slows insertions a bit down (not much) but reduces probes (collisions) for successful searches, in particular for large load factors.
                  (It does not improve unsuccessful searches.)
                  See D. Knuth, Searching and Sorting, 3rd ed., p.533-545                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    java.util.HashMap                    
                </see>
            </javadoc>
            <declaration name="totalProbesSaved" type="int" line="25"/>
            <javadoc line="26">
                Constructs an empty map with default capacity and default load factors.                
            </javadoc>
            <method name="QuickOpenIntIntHashMap" type="constructor" line="29"/>
            <javadoc line="32">
                Constructs an empty map with the specified initial capacity and default load factors.                
                <param>
                    initialCapacity   the initial capacity of the map.                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is less
                      than zero.                    
                </throws>
            </javadoc>
            <method name="QuickOpenIntIntHashMap" type="constructor" line="39">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="42">
                Constructs an empty map with
                  the specified initial capacity and the specified minimum and maximum load factor.                
                <param>
                    initialCapacity   the initial capacity.                    
                </param>
                <param>
                    minLoadFactor        the minimum load factor.                    
                </param>
                <param>
                    maxLoadFactor        the maximum load factor.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>initialCapacity < 0 || (minLoadFactor < 0.0 || minLoadFactor >= 1.0) || (maxLoadFactor <= 0.0 || maxLoadFactor >= 1.0) || (minLoadFactor >= maxLoadFactor)</tt>.                    
                </throws>
            </javadoc>
            <method name="QuickOpenIntIntHashMap" type="constructor" line="51">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="minLoadFactor" type="double"/>
                    <param name="maxLoadFactor" type="double"/>
                </params>
            </method>
            <javadoc line="54">
                Associates the given key with the given value.
                  Replaces any old &lt;tt&gt;(key,someOtherValue)&lt;/tt&gt; association, if existing.                
                <param>
                    key the key the value shall be associated with.                    
                </param>
                <param>
                    value the value to be associated.                    
                </param>
                <return>
                    <tt>true</tt> if the receiver did not already contain such a key;
                      <tt>false</tt> if the receiver did already contain such a key - the new value has now replaced the formerly associated value.                    
                </return>
            </javadoc>
            <method name="put" type="boolean" line="63">
                <params>
                    <param name="key" type="int"/>
                    <param name="value" type="int"/>
                </params>
                <comment line="64">
                    This is open addressing with double hashing, using &quot;Brent&apos;s variation&quot;.
                    Brent&apos;s variation slows insertions a bit down (not much) but reduces probes (collisions) for successful searches, in particular for large load factors.
                    (It does not improve unsuccessful searches.)
                    See D. Knuth, Searching and Sorting, 3rd ed., p.533-545
                    
                    h1(key) = hash % M
                    h2(key) = decrement = Max(1, hashM % M)
                    M is prime = capacity = table.length
                    probing positions are table[(h1-jh2) % M] for j=0,1,...
                    (M and h2 could also be chosen differently, but h2 is required to be relative prime to M.)                    
                </comment>
                <comment line="86">
                    System.out.println(&quot;insert search for (key,value)=(&quot;+key+&quot;,&quot;+value+&quot;) at i=&quot;+i+&quot;, dec=&quot;+decrement);                    
                </comment>
                <comment line="88">
                    stop if we find a removed or free slot, or if we find the key itself                    
                </comment>
                <comment line="89">
                    do NOT skip over removed slots (yes, open addressing is like that...)                    
                </comment>
                <comment line="90">
                    int comp = comparisons;                    
                </comment>
                <comment line="91">
                    the number of probes                    
                </comment>
                <comment line="92">
                    the first position to probe                    
                </comment>
                <comment line="96">
                    hashCollisions++;                    
                </comment>
                <comment line="99">
                    if (comparisons-comp&gt;0) System.out.println(&quot;probed &quot;+(comparisons-comp)+&quot; slots.&quot;);                    
                </comment>
                <comment line="101">
                    key already contained at slot i.                    
                </comment>
                <comment line="105">
                    not already contained, should be inserted at slot i.                    
                </comment>
                <comment line="110">
                    System.out.print(&quot;grow rehashing &quot;);                    
                </comment>
                <comment line="111">
                    System.out.println(&quot;at distinct=&quot;+distinct+&quot;, capacity=&quot;+table.length+&quot; to newCapacity=&quot;+newCapacity+&quot; ...&quot;);                    
                </comment>
                <comment line="117">
                    Brent&apos;s variation does a local reorganization to reduce probes. It essentially means:
                    We test whether it is possible to move the association we probed first (table[p0]) out of the way.
                    If this is possible, it will reduce probes for the key to be inserted, since it takes its place; it gets hit earlier.
                    However, future probes for the key that we move out of the way will increase.
                    Thus we only move it out of the way, if we have a net gain, that is, if we save more probes than we loose.
                    For the first probe we safe more than we loose if the number of probes we needed was &gt;=2 (t&gt;=2).
                    If the first probe cannot be moved out of the way, we try the next probe (p1).
                    Now we safe more than we loose if t&gt;=3.
                    We repeat this until we find that we cannot gain or that we can indeed move p(x) out of the way.
                    
                    Note: Under the great majority of insertions t&lt;=1, so the loop is entered very infrequently.                    
                </comment>
                <comment line="131">
                    System.out.println(&quot;t=&quot;+t);                    
                </comment>
                <comment line="136">
                    pc = (p0-j*decrement) % M, j=1,2,..                    
                </comment>
                <comment line="139">
                    not a free slot, continue searching for free slot to move to, or break.                    
                </comment>
                <comment line="143">
                    free or removed slot found, now move...                    
                </comment>
                <comment line="144">
                    System.out.println(&quot;copying p0=&quot;+p0+&quot; to pc=&quot;+pc+&quot;, (key,val)=(&quot;+tab[p0]+&quot;,&quot;+values[p0]+&quot;), saving &quot;+(t-1)+&quot; probes.&quot;);                    
                </comment>
                <comment line="149">
                    prepare to insert: table[p0]=key                    
                </comment>
                <comment line="150">
                    break loop                    
                </comment>
                <comment line="154">
                    System.out.println(&quot;inserting at i=&quot;+i);                    
                </comment>
                <comment line="161">
                    delta                    
                </comment>
                <declaration name="key0" type="int" line="77"/>
                <declaration name="tab" type="int" line="78"/>
                <declaration name="stat" type="byte" line="79"/>
                <declaration name="length" type="int" line="80"/>
                <declaration name="hash" type="int" line="82"/>
                <declaration name="i" type="int" line="83"/>
                <declaration name="decrement" type="int" line="84"/>
                <declaration name="t" type="int" line="91"/>
                <declaration name="p0" type="int" line="92"/>
                <scope line="93"/>
                <scope line="100"/>
                <scope line="107">
                    <declaration name="newCapacity" type="int" line="108"/>
                </scope>
                <scope line="130">
                    <declaration name="pc" type="int" line="136"/>
                    <scope line="139"/>
                    <scope line="143"/>
                </scope>
                <scope line="161">
                    <declaration name="newCapacity" type="int" line="162"/>
                </scope>
            </method>
            <javadoc line="168">
                Rehashes the contents of the receiver into a new table
                  with a smaller or larger capacity.
                  This method is called automatically when the
                  number of keys in the receiver exceeds the high water mark or falls below the low water mark.                
            </javadoc>
            <method name="rehash" type="void" line="174">
                <params>
                    <param name="newCapacity" type="int"/>
                </params>
                <comment line="176">
                    if (oldCapacity == newCapacity) return;                    
                </comment>
                <comment line="192">
                    delta                    
                </comment>
                <comment line="195">
                    switch of watermarks                    
                </comment>
                <comment line="199">
                    int element = oldTable[i];
                    int index = indexOfInsertion(element);
                    newTable[index]=element;
                    newValues[index]=oldValues[i];
                    newState[index]=FULL;                    
                </comment>
                <declaration name="oldCapacity" type="int" line="175"/>
                <declaration name="oldTable" type="int" line="178"/>
                <declaration name="oldValues" type="int" line="179"/>
                <declaration name="oldState" type="byte" line="180"/>
                <declaration name="newTable" type="int" line="182"/>
                <declaration name="newValues" type="int" line="183"/>
                <declaration name="newState" type="byte" line="184"/>
                <declaration name="tmp" type="int" line="194"/>
                <scope line="196">
                    <scope line="197"/>
                </scope>
            </method>
        </class>
    </source>