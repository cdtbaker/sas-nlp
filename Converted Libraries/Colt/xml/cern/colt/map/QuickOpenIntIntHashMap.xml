<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.map">
        <class name="QuickOpenIntIntHashMap" line="2">
            <extends class="OpenIntIntHashMap"/>
            <javadoc line="2">
                Status: Experimental; Do not use for production yet. Hash map holding (key,value) associations of type &lt;tt&gt;(int--&gt;int)&lt;/tt&gt;; Automatically grows and shrinks as needed; Implemented using open addressing with double hashing.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  Implements open addressing with double hashing, using &quot;Brent&apos;s variation&quot;.
                  Brent&apos;s variation slows insertions a bit down (not much) but reduces probes (collisions) for successful searches, in particular for large load factors.
                  (It does not improve unsuccessful searches.)
                  See D. Knuth, Searching and Sorting, 3rd ed., p.533-545                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    java.util.HashMap                    
                </see>
            </javadoc>
            <declaration name="totalProbesSaved" type="int" line="14"/>
            <javadoc line="15">
                Constructs an empty map with default capacity and default load factors.                
            </javadoc>
            <method name="QuickOpenIntIntHashMap" type="constructor" line="18"/>
            <javadoc line="21">
                Constructs an empty map with the specified initial capacity and default load factors.                
                <param>
                    initialCapacity   the initial capacity of the map.                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is less
                      than zero.                    
                </throws>
            </javadoc>
            <method name="QuickOpenIntIntHashMap" type="constructor" line="27">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="30">
                Constructs an empty map with
                  the specified initial capacity and the specified minimum and maximum load factor.                
                <param>
                    initialCapacity   the initial capacity.                    
                </param>
                <param>
                    minLoadFactor        the minimum load factor.                    
                </param>
                <param>
                    maxLoadFactor        the maximum load factor.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>initialCapacity < 0 || (minLoadFactor < 0.0 || minLoadFactor >= 1.0) || (maxLoadFactor <= 0.0 || maxLoadFactor >= 1.0) || (minLoadFactor >= maxLoadFactor)</tt>.                    
                </throws>
            </javadoc>
            <method name="QuickOpenIntIntHashMap" type="constructor" line="38">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="minLoadFactor" type="double"/>
                    <param name="maxLoadFactor" type="double"/>
                </params>
            </method>
            <javadoc line="41">
                Associates the given key with the given value.
                  Replaces any old &lt;tt&gt;(key,someOtherValue)&lt;/tt&gt; association, if existing.                
                <param>
                    key the key the value shall be associated with.                    
                </param>
                <param>
                    value the value to be associated.                    
                </param>
                <return>
                    <tt>true</tt> if the receiver did not already contain such a key;
                      <tt>false</tt> if the receiver did already contain such a key - the new value has now replaced the formerly associated value.                    
                </return>
            </javadoc>
            <method name="put" type="boolean" line="49">
                <params>
                    <param name="key" type="int"/>
                    <param name="value" type="int"/>
                </params>
                <declaration name="key0" type="int" line="50"/>
                <declaration name="tab" type="int" line="51"/>
                <declaration name="stat" type="byte" line="52"/>
                <declaration name="length" type="int" line="53"/>
                <declaration name="hash" type="int" line="54"/>
                <declaration name="i" type="int" line="55"/>
                <declaration name="decrement" type="int" line="56"/>
                <declaration name="t" type="int" line="58"/>
                <declaration name="p0" type="int" line="59"/>
                <scope line="60"/>
                <scope line="65"/>
                <scope line="69">
                    <declaration name="newCapacity" type="int" line="70"/>
                </scope>
                <scope line="74">
                    <declaration name="pc" type="int" line="79"/>
                    <scope line="81"/>
                    <scope line="85"/>
                </scope>
                <scope line="99">
                    <declaration name="newCapacity" type="int" line="100"/>
                </scope>
            </method>
            <javadoc line="105">
                Rehashes the contents of the receiver into a new table
                  with a smaller or larger capacity.
                  This method is called automatically when the
                  number of keys in the receiver exceeds the high water mark or falls below the low water mark.                
            </javadoc>
            <method name="rehash" type="void" line="111">
                <params>
                    <param name="newCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="112"/>
                <declaration name="oldTable" type="int" line="113"/>
                <declaration name="oldValues" type="int" line="114"/>
                <declaration name="oldState" type="byte" line="115"/>
                <declaration name="newTable" type="int" line="116"/>
                <declaration name="newValues" type="int" line="117"/>
                <declaration name="newState" type="byte" line="118"/>
                <declaration name="tmp" type="int" line="125"/>
                <scope line="127">
                    <scope line="128"/>
                </scope>
            </method>
        </class>
    </source>