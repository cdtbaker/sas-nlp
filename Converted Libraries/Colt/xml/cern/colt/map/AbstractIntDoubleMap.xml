<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.map">
        <import package="cern.colt.function.IntDoubleProcedure"/>
        <import package="cern.colt.function.IntProcedure"/>
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.colt.list.IntArrayList"/>
        <class name="AbstractIntDoubleMap" line="15">
            <extends class="AbstractMap"/>
            <comment line="30">
                public static int hashCollisions = 0; // for debug only                
            </comment>
            <javadoc line="15">
                Abstract base class for hash maps holding (key,value) associations of type &lt;tt&gt;(int--&gt;double)&lt;/tt&gt;.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Implementation&lt;/b&gt;:
                  &lt;p&gt;
                  Almost all methods are expressed in terms of {@link #forEachKey(IntProcedure)}. 
                  As such they are fully functional, but inefficient. Override them in subclasses if necessary.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    java.util.HashMap                    
                </see>
            </javadoc>
            <javadoc line="30">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractIntDoubleMap" type="constructor" line="33"/>
            <javadoc line="34">
                Assigns the result of a function to each value; &lt;tt&gt;v[i] = function(v[i])&lt;/tt&gt;.                
                <param>
                    function a function object taking as argument the current association's value.                    
                </param>
            </javadoc>
            <method name="assign" type="void" line="39">
                <params>
                    <param name="function" type="cern.colt.function.DoubleFunction"/>
                </params>
                <anonymous_class line="41">
                    <method name="apply" type="boolean" line="42">
                        <params>
                            <param name="key" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="49">
                Clears the receiver, then adds all (key,value) pairs of &lt;tt&gt;other&lt;/tt&gt;values to it.                
                <param>
                    other the other map to be copied into the receiver.                    
                </param>
            </javadoc>
            <method name="assign" type="void" line="54">
                <params>
                    <param name="other" type="AbstractIntDoubleMap"/>
                </params>
                <anonymous_class line="57">
                    <method name="apply" type="boolean" line="58">
                        <params>
                            <param name="key" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="65">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the receiver contains the specified key.                
                <return>
                    <tt>true</tt> if the receiver contains the specified key.                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="70">
                <params>
                    <param name="key" type="int"/>
                </params>
                <anonymous_class line="72">
                    <method name="apply" type="boolean" line="73">
                        <params>
                            <param name="iterKey" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="79">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the receiver contains the specified value.                
                <return>
                    <tt>true</tt> if the receiver contains the specified value.                    
                </return>
            </javadoc>
            <method name="containsValue" type="boolean" line="84">
                <params>
                    <param name="value" type="double"/>
                </params>
                <anonymous_class line="86">
                    <method name="apply" type="boolean" line="87">
                        <params>
                            <param name="iterKey" type="int"/>
                            <param name="iterValue" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="93">
                Returns a deep copy of the receiver; uses &lt;code&gt;clone()&lt;/code&gt; and casts the result.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="copy" type="AbstractIntDoubleMap" line="98"/>
            <javadoc line="101">
                Compares the specified object with this map for equality.  Returns
                  &lt;tt&gt;true&lt;/tt&gt; if the given object is also a map and the two maps
                  represent the same mappings.  More formally, two maps &lt;tt&gt;m1&lt;/tt&gt; and
                  &lt;tt&gt;m2&lt;/tt&gt; represent the same mappings iff
                  &lt;pre&gt;
                  m1.forEachPair(
                  new IntDoubleProcedure() {
                  public boolean apply(int key, double value) {
                  return m2.containsKey(key) &amp;&amp; m2.get(key) == value;
                  }
                  }
                  )
                  &amp;&amp;
                  m2.forEachPair(
                  new IntDoubleProcedure() {
                  public boolean apply(int key, double value) {
                  return m1.containsKey(key) &amp;&amp; m1.get(key) == value;
                  }
                  }
                  );
                  &lt;/pre&gt;
                  This implementation first checks if the specified object is this map;
                  if so it returns &lt;tt&gt;true&lt;/tt&gt;.  Then, it checks if the specified
                  object is a map whose size is identical to the size of this set; if
                  not, it it returns &lt;tt&gt;false&lt;/tt&gt;.  If so, it applies the iteration as described above.                
                <param>
                    obj object to be compared for equality with this map.                    
                </param>
                <return>
                    <tt>true</tt> if the specified object is equal to this map.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="132">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="other" type="AbstractIntDoubleMap" line="136"/>
                <anonymous_class line="141">
                    <method name="apply" type="boolean" line="142">
                        <params>
                            <param name="key" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="149">
                    <method name="apply" type="boolean" line="150">
                        <params>
                            <param name="key" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="forEachKey" type="boolean" line="156"/>
            <javadoc line="156">
                Applies a procedure to each key of the receiver, if any.
                  Note: Iterates over the keys in no particular order.
                  Subclasses can define a particular order, for example, &quot;sorted by key&quot;.
                  All methods which &lt;i&gt;can&lt;/i&gt; be expressed in terms of this method (most methods can) &lt;i&gt;must guarantee&lt;/i&gt; to use the &lt;i&gt;same&lt;/i&gt; order defined by this method, even if it is no particular order.
                  This is necessary so that, for example, methods &lt;tt&gt;keys&lt;/tt&gt; and &lt;tt&gt;values&lt;/tt&gt; will yield association pairs, not two uncorrelated lists.                
                <param>
                    procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
                <return>
                    <tt>false</tt> if the procedure stopped before all keys where iterated over, <tt>true</tt> otherwise.                    
                </return>
            </javadoc>
            <javadoc line="167">
                Applies a procedure to each (key,value) pair of the receiver, if any.
                  Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.                
                <param>
                    procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
                <return>
                    <tt>false</tt> if the procedure stopped before all keys where iterated over, <tt>true</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="forEachPair" type="boolean" line="174">
                <params>
                    <param name="procedure" type="IntDoubleProcedure"/>
                </params>
                <anonymous_class line="176">
                    <method name="apply" type="boolean" line="177">
                        <params>
                            <param name="key" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="get" type="double" line="183"/>
            <javadoc line="183">
                Returns the value associated with the specified key.
                  It is often a good idea to first check with {@link #containsKey(int)} whether the given key has a value associated or not, i.e. whether there exists an association for the given key or not.                
                <param>
                    key the key to be searched for.                    
                </param>
                <return>
                    the value associated with the specified key; <tt>0</tt> if no such key is present.                    
                </return>
            </javadoc>
            <javadoc line="191">
                Returns the first key the given value is associated with.
                  It is often a good idea to first check with {@link #containsValue(double)} whether there exists an association from a key to this value.
                  Search order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.                
                <param>
                    value the value to search for.                    
                </param>
                <return>
                    the first key for which holds <tt>get(key) == value</tt>; 
                      returns <tt>Integer.MIN_VALUE</tt> if no such key exists.                    
                </return>
            </javadoc>
            <method name="keyOf" type="int" line="200">
                <params>
                    <param name="value" type="double"/>
                </params>
                <declaration name="foundKey" type="int[]" line="201"/>
                <anonymous_class line="203">
                    <method name="apply" type="boolean" line="204">
                        <params>
                            <param name="iterKey" type="int"/>
                            <param name="iterValue" type="double"/>
                        </params>
                        <declaration name="found" type="boolean" line="205"/>
                    </method>
                </anonymous_class>
                <declaration name="notFound" type="boolean" line="202"/>
            </method>
            <javadoc line="214">
                Returns a list filled with all keys contained in the receiver.
                  The returned list has a size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
                  Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.
                  &lt;p&gt;
                  This method can be used to iterate over the keys of the receiver.                
                <return>
                    the keys.                    
                </return>
            </javadoc>
            <method name="keys" type="IntArrayList" line="223">
                <declaration name="list" type="IntArrayList" line="224"/>
            </method>
            <javadoc line="228">
                Fills all keys contained in the receiver into the specified list.
                  Fills the list, starting at index 0.
                  After this call returns the specified list has a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
                  Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.
                  &lt;p&gt;
                  This method can be used to iterate over the keys of the receiver.                
                <param>
                    list the list to be filled, can have any size.                    
                </param>
            </javadoc>
            <method name="keys" type="void" line="238">
                <params>
                    <param name="list" type="IntArrayList"/>
                </params>
                <anonymous_class line="241">
                    <method name="apply" type="boolean" line="242">
                        <params>
                            <param name="key" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="249">
                Fills all keys &lt;i&gt;sorted ascending by their associated value&lt;/i&gt; into the specified list.
                  Fills into the list, starting at index 0.
                  After this call returns the specified list has a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
                  Primary sort criterium is &quot;value&quot;, secondary sort criterium is &quot;key&quot;. 
                  This means that if any two values are equal, the smaller key comes first.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;br&gt;
                  &lt;tt&gt;keys = (8,7,6), values = (1,2,2) --&gt; keyList = (8,6,7)&lt;/tt&gt;                
                <param>
                    keyList the list to be filled, can have any size.                    
                </param>
            </javadoc>
            <method name="keysSortedByValue" type="void" line="262">
                <params>
                    <param name="keyList" type="IntArrayList"/>
                </params>
            </method>
            <javadoc line="265">
                Fills all pairs satisfying a given condition into the specified lists.
                  Fills into the lists, starting at index 0.
                  After this call returns the specified lists both have a new size, the number of pairs satisfying the condition.
                  Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;br&gt;
                  &lt;pre&gt;
                  IntDoubleProcedure condition = new IntDoubleProcedure() { // match even keys only
                  public boolean apply(int key, double value) { return key%2==0; }
                  }
                  keys = (8,7,6), values = (1,2,2) --&gt; keyList = (6,8), valueList = (2,1)&lt;/tt&gt;
                  &lt;/pre&gt;                
                <param>
                    condition    the condition to be matched. Takes the current key as first and the current value as second argument.                    
                </param>
                <param>
                    keyList the list to be filled with keys, can have any size.                    
                </param>
                <param>
                    valueList the list to be filled with values, can have any size.                    
                </param>
            </javadoc>
            <method name="pairsMatching" type="void" line="284">
                <params>
                    <param name="condition" type="IntDoubleProcedure"/>
                    <param name="keyList" type="IntArrayList"/>
                    <param name="valueList" type="DoubleArrayList"/>
                </params>
                <anonymous_class line="289">
                    <method name="apply" type="boolean" line="290">
                        <params>
                            <param name="key" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                        <scope line="291"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="300">
                Fills all keys and values &lt;i&gt;sorted ascending by key&lt;/i&gt; into the specified lists.
                  Fills into the lists, starting at index 0.
                  After this call returns the specified lists both have a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;br&gt;
                  &lt;tt&gt;keys = (8,7,6), values = (1,2,2) --&gt; keyList = (6,7,8), valueList = (2,2,1)&lt;/tt&gt;                
                <param>
                    keyList the list to be filled with keys, can have any size.                    
                </param>
                <param>
                    valueList the list to be filled with values, can have any size.                    
                </param>
            </javadoc>
            <method name="pairsSortedByKey" type="void" line="312">
                <params>
                    <param name="keyList" type="IntArrayList"/>
                    <param name="valueList" type="DoubleArrayList"/>
                </params>
                <scope line="316"/>
            </method>
            <javadoc line="320">
                Fills all keys and values &lt;i&gt;sorted ascending by value&lt;/i&gt; into the specified lists.
                  Fills into the lists, starting at index 0.
                  After this call returns the specified lists both have a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
                  Primary sort criterium is &quot;value&quot;, secondary sort criterium is &quot;key&quot;. 
                  This means that if any two values are equal, the smaller key comes first.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;br&gt;
                  &lt;tt&gt;keys = (8,7,6), values = (1,2,2) --&gt; keyList = (8,6,7), valueList = (1,2,2)&lt;/tt&gt;                
                <param>
                    keyList the list to be filled with keys, can have any size.                    
                </param>
                <param>
                    valueList the list to be filled with values, can have any size.                    
                </param>
            </javadoc>
            <method name="pairsSortedByValue" type="void" line="334">
                <params>
                    <param name="keyList" type="IntArrayList"/>
                    <param name="valueList" type="DoubleArrayList"/>
                </params>
                <declaration name="k" type="int[]" line="338"/>
                <declaration name="v" type="double[]" line="339"/>
                <anonymous_class line="340">
                    <method name="swap" type="void" line="341">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                        <declaration name="t2" type="int" line="342"/>
                        <declaration name="t1" type="double" line="342"/>
                    </method>
                </anonymous_class>
                <declaration name="swapper" type="cern.colt.Swapper" line="340"/>
                <anonymous_class line="348">
                    <method name="compare" type="int" line="349">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="comp" type="cern.colt.function.IntComparator" line="348"/>
            </method>
            <method name="put" type="boolean" line="356"/>
            <javadoc line="356">
                Associates the given key with the given value.
                  Replaces any old &lt;tt&gt;(key,someOtherValue)&lt;/tt&gt; association, if existing.                
                <param>
                    key the key the value shall be associated with.                    
                </param>
                <param>
                    value the value to be associated.                    
                </param>
                <return>
                    <tt>true</tt> if the receiver did not already contain such a key;
                      <tt>false</tt> if the receiver did already contain such a key - the new value has now replaced the formerly associated value.                    
                </return>
            </javadoc>
            <method name="removeKey" type="boolean" line="366"/>
            <javadoc line="366">
                Removes the given key with its associated element from the receiver, if present.                
                <param>
                    key the key to be removed from the receiver.                    
                </param>
                <return>
                    <tt>true</tt> if the receiver contained the specified key, <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <javadoc line="373">
                Returns a string representation of the receiver, containing
                  the String representation of each key-value pair, sorted ascending by key.                
            </javadoc>
            <method name="toString" type="String" line="377">
                <comment line="384">
                    StringBuffer buf = new StringBuffer();                    
                </comment>
                <declaration name="theKeys" type="IntArrayList" line="378"/>
                <declaration name="tmp" type="String" line="379"/>
                <declaration name="buf" type="StringBuffer" line="382"/>
                <declaration name="maxIndex" type="int" line="385"/>
                <scope line="386">
                    <declaration name="key" type="int" line="387"/>
                </scope>
            </method>
            <javadoc line="396">
                Returns a string representation of the receiver, containing
                  the String representation of each key-value pair, sorted ascending by value.                
            </javadoc>
            <method name="toStringByValue" type="String" line="400">
                <declaration name="theKeys" type="IntArrayList" line="401"/>
                <declaration name="buf" type="StringBuffer" line="404"/>
                <declaration name="maxIndex" type="int" line="406"/>
                <scope line="407">
                    <declaration name="key" type="int" line="408"/>
                </scope>
            </method>
            <javadoc line="417">
                Returns a list filled with all values contained in the receiver.
                  The returned list has a size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
                  Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.
                  &lt;p&gt;
                  This method can be used to iterate over the values of the receiver.                
                <return>
                    the values.                    
                </return>
            </javadoc>
            <method name="values" type="DoubleArrayList" line="426">
                <declaration name="list" type="DoubleArrayList" line="427"/>
            </method>
            <javadoc line="431">
                Fills all values contained in the receiver into the specified list.
                  Fills the list, starting at index 0.
                  After this call returns the specified list has a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
                  Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.
                  &lt;p&gt;
                  This method can be used to iterate over the values of the receiver.                
                <param>
                    list the list to be filled, can have any size.                    
                </param>
            </javadoc>
            <method name="values" type="void" line="441">
                <params>
                    <param name="list" type="DoubleArrayList"/>
                </params>
                <anonymous_class line="444">
                    <method name="apply" type="boolean" line="445">
                        <params>
                            <param name="key" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>