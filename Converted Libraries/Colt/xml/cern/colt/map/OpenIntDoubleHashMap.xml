<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.map">
        <import package="cern.colt.function.IntDoubleProcedure"/>
        <import package="cern.colt.function.IntProcedure"/>
        <import package="cern.colt.list.ByteArrayList"/>
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.colt.list.IntArrayList"/>
        <class name="OpenIntDoubleHashMap" line="7">
            <extends class="AbstractIntDoubleMap"/>
            <javadoc line="7">
                Hash map holding (key,value) associations of type &lt;tt&gt;(int--&gt;double)&lt;/tt&gt;; Automatically grows and shrinks as needed; Implemented using open addressing with double hashing.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  Overrides many methods for performance reasons only.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    java.util.HashMap                    
                </see>
            </javadoc>
            <declaration name="table" type="int" line="16"/>
            <javadoc line="16">
                The hash table keys.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="values" type="double" line="21"/>
            <javadoc line="21">
                The hash table values.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="state" type="byte" line="26"/>
            <javadoc line="26">
                The state of each hash table entry (FREE, FULL, REMOVED).                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="freeEntries" type="int" line="31"/>
            <javadoc line="31">
                The number of table entries in state==FREE.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="FREE" type="byte" line="36"/>
            <declaration name="FULL" type="byte" line="37"/>
            <declaration name="REMOVED" type="byte" line="38"/>
            <javadoc line="39">
                Constructs an empty map with default capacity and default load factors.                
            </javadoc>
            <method name="OpenIntDoubleHashMap" type="constructor" line="42"/>
            <javadoc line="45">
                Constructs an empty map with the specified initial capacity and default load factors.                
                <param>
                    initialCapacity   the initial capacity of the map.                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is less
                      than zero.                    
                </throws>
            </javadoc>
            <method name="OpenIntDoubleHashMap" type="constructor" line="51">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="54">
                Constructs an empty map with
                  the specified initial capacity and the specified minimum and maximum load factor.                
                <param>
                    initialCapacity   the initial capacity.                    
                </param>
                <param>
                    minLoadFactor        the minimum load factor.                    
                </param>
                <param>
                    maxLoadFactor        the maximum load factor.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>initialCapacity < 0 || (minLoadFactor < 0.0 || minLoadFactor >= 1.0) || (maxLoadFactor <= 0.0 || maxLoadFactor >= 1.0) || (minLoadFactor >= maxLoadFactor)</tt>.                    
                </throws>
            </javadoc>
            <method name="OpenIntDoubleHashMap" type="constructor" line="62">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="minLoadFactor" type="double"/>
                    <param name="maxLoadFactor" type="double"/>
                </params>
            </method>
            <javadoc line="65">
                Assigns the result of a function to each value; &lt;tt&gt;v[i] = function(v[i])&lt;/tt&gt;.                
                <param>
                    function a function object taking as argument the current association's value.                    
                </param>
            </javadoc>
            <method name="assign" type="void" line="69">
                <params>
                    <param name="function" type="cern.colt.function.DoubleFunction"/>
                </params>
                <scope line="70">
                    <declaration name="multiplicator" type="double" line="71"/>
                    <scope line="73"/>
                    <scope line="77"/>
                </scope>
                <scope line="81">
                    <scope line="82"/>
                </scope>
            </method>
            <javadoc line="87">
                Clears the receiver, then adds all (key,value) pairs of &lt;tt&gt;other&lt;/tt&gt;values to it.                
                <param>
                    other the other map to be copied into the receiver.                    
                </param>
            </javadoc>
            <method name="assign" type="void" line="91">
                <params>
                    <param name="other" type="AbstractIntDoubleMap"/>
                </params>
                <scope line="92"/>
                <declaration name="source" type="OpenIntDoubleHashMap" line="96"/>
                <declaration name="copy" type="OpenIntDoubleHashMap" line="97"/>
            </method>
            <javadoc line="108">
                Removes all (key,value) associations from the receiver.
                  Implicitly calls &lt;tt&gt;trimToSize()&lt;/tt&gt;.                
            </javadoc>
            <method name="clear" type="void" line="112"/>
            <javadoc line="118">
                Returns a deep copy of the receiver.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="122">
                <declaration name="copy" type="OpenIntDoubleHashMap" line="123"/>
            </method>
            <javadoc line="129">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the receiver contains the specified key.                
                <return>
                    <tt>true</tt> if the receiver contains the specified key.                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="133">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="136">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the receiver contains the specified value.                
                <return>
                    <tt>true</tt> if the receiver contains the specified value.                    
                </return>
            </javadoc>
            <method name="containsValue" type="boolean" line="140">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="143">
                Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.
                  If necessary, allocates new internal memory and increases the capacity of the receiver.
                  &lt;p&gt;
                  This method never need be called; it is for performance tuning only.
                  Calling this method before &lt;tt&gt;put()&lt;/tt&gt;ing a large number of associations boosts performance,
                  because the receiver will grow only once instead of potentially many times and hash collisions get less probable.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="152">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <scope line="153">
                    <declaration name="newCapacity" type="int" line="154"/>
                </scope>
            </method>
            <javadoc line="158">
                Applies a procedure to each key of the receiver, if any.
                  Note: Iterates over the keys in no particular order.
                  Subclasses can define a particular order, for example, &quot;sorted by key&quot;.
                  All methods which &lt;i&gt;can&lt;/i&gt; be expressed in terms of this method (most methods can) &lt;i&gt;must guarantee&lt;/i&gt; to use the &lt;i&gt;same&lt;/i&gt; order defined by this method, even if it is no particular order.
                  This is necessary so that, for example, methods &lt;tt&gt;keys&lt;/tt&gt; and &lt;tt&gt;values&lt;/tt&gt; will yield association pairs, not two uncorrelated lists.                
                <param>
                    procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
                <return>
                    <tt>false</tt> if the procedure stopped before all keys where iterated over, <tt>true</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="forEachKey" type="boolean" line="167">
                <params>
                    <param name="procedure" type="IntProcedure"/>
                </params>
                <scope line="168"/>
            </method>
            <javadoc line="173">
                Applies a procedure to each (key,value) pair of the receiver, if any.
                  Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.                
                <param>
                    procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
                <return>
                    <tt>false</tt> if the procedure stopped before all keys where iterated over, <tt>true</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="forEachPair" type="boolean" line="179">
                <params>
                    <param name="procedure" type="IntDoubleProcedure"/>
                </params>
                <scope line="180"/>
            </method>
            <javadoc line="185">
                Returns the value associated with the specified key.
                  It is often a good idea to first check with {@link #containsKey(int)} whether the given key has a value associated or not, i.e. whether there exists an association for the given key or not.                
                <param>
                    key the key to be searched for.                    
                </param>
                <return>
                    the value associated with the specified key; <tt>0</tt> if no such key is present.                    
                </return>
            </javadoc>
            <method name="get" type="double" line="191">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="i" type="int" line="192"/>
            </method>
            <javadoc line="196">
                @param key the key to be added to the receiver.                
                <return>
                    the index where the key would need to be inserted, if it is not already contained.
                      Returns -index-1 if the key is already contained at slot index.
                      Therefore, if the returned index < 0, then it is already contained at slot -index-1.
                      If the returned index >= 0, then it is NOT already contained and should be inserted at slot index.                    
                </return>
            </javadoc>
            <method name="indexOfInsertion" type="int" line="203">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="tab" type="int" line="204"/>
                <declaration name="stat" type="byte" line="205"/>
                <declaration name="length" type="int" line="206"/>
                <declaration name="hash" type="int" line="207"/>
                <declaration name="i" type="int" line="208"/>
                <declaration name="decrement" type="int" line="209"/>
                <scope line="211"/>
                <scope line="215">
                    <declaration name="j" type="int" line="216"/>
                    <scope line="217"/>
                </scope>
                <scope line="223"/>
            </method>
            <javadoc line="228">
                @param key the key to be searched in the receiver.                
                <return>
                    the index where the key is contained in the receiver, else returns -1.                    
                </return>
            </javadoc>
            <method name="indexOfKey" type="int" line="232">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="tab" type="int" line="233"/>
                <declaration name="stat" type="byte" line="234"/>
                <declaration name="length" type="int" line="235"/>
                <declaration name="hash" type="int" line="236"/>
                <declaration name="i" type="int" line="237"/>
                <declaration name="decrement" type="int" line="238"/>
                <scope line="240"/>
            </method>
            <javadoc line="247">
                @param value the value to be searched in the receiver.                
                <return>
                    the index where the value is contained in the receiver, returns -1 if the value was not found.                    
                </return>
            </javadoc>
            <method name="indexOfValue" type="int" line="251">
                <params>
                    <param name="value" type="double"/>
                </params>
                <declaration name="val" type="double" line="252"/>
                <declaration name="stat" type="byte" line="253"/>
                <scope line="254"/>
            </method>
            <javadoc line="259">
                Returns the first key the given value is associated with.
                  It is often a good idea to first check with {@link #containsValue(double)} whether there exists an association from a key to this value.
                  Search order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.                
                <param>
                    value the value to search for.                    
                </param>
                <return>
                    the first key for which holds <tt>get(key) == value</tt>; 
                      returns <tt>Integer.MIN_VALUE</tt> if no such key exists.                    
                </return>
            </javadoc>
            <method name="keyOf" type="int" line="267">
                <params>
                    <param name="value" type="double"/>
                </params>
                <declaration name="i" type="int" line="268"/>
            </method>
            <javadoc line="272">
                Fills all keys contained in the receiver into the specified list.
                  Fills the list, starting at index 0.
                  After this call returns the specified list has a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
                  Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.
                  &lt;p&gt;
                  This method can be used to iterate over the keys of the receiver.                
                <param>
                    list the list to be filled, can have any size.                    
                </param>
            </javadoc>
            <method name="keys" type="void" line="281">
                <params>
                    <param name="list" type="IntArrayList"/>
                </params>
                <declaration name="elements" type="int[]" line="283"/>
                <declaration name="tab" type="int[]" line="284"/>
                <declaration name="stat" type="byte[]" line="285"/>
                <declaration name="j" type="int" line="286"/>
                <scope line="287"/>
            </method>
            <javadoc line="291">
                Fills all pairs satisfying a given condition into the specified lists.
                  Fills into the lists, starting at index 0.
                  After this call returns the specified lists both have a new size, the number of pairs satisfying the condition.
                  Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;br&gt;
                  &lt;pre&gt;
                  IntDoubleProcedure condition = new IntDoubleProcedure() { // match even keys only
                  public boolean apply(int key, double value) { return key%2==0; }
                  }
                  keys = (8,7,6), values = (1,2,2) --&gt; keyList = (6,8), valueList = (2,1)&lt;/tt&gt;
                  &lt;/pre&gt;                
                <param>
                    condition    the condition to be matched. Takes the current key as first and the current value as second argument.                    
                </param>
                <param>
                    keyList the list to be filled with keys, can have any size.                    
                </param>
                <param>
                    valueList the list to be filled with values, can have any size.                    
                </param>
            </javadoc>
            <method name="pairsMatching" type="void" line="309">
                <params>
                    <param name="condition" type="IntDoubleProcedure"/>
                    <param name="keyList" type="IntArrayList"/>
                    <param name="valueList" type="DoubleArrayList"/>
                </params>
                <scope line="312">
                    <scope line="313"/>
                </scope>
            </method>
            <javadoc line="319">
                Associates the given key with the given value.
                  Replaces any old &lt;tt&gt;(key,someOtherValue)&lt;/tt&gt; association, if existing.                
                <param>
                    key the key the value shall be associated with.                    
                </param>
                <param>
                    value the value to be associated.                    
                </param>
                <return>
                    <tt>true</tt> if the receiver did not already contain such a key;
                      <tt>false</tt> if the receiver did already contain such a key - the new value has now replaced the formerly associated value.                    
                </return>
            </javadoc>
            <method name="put" type="boolean" line="327">
                <params>
                    <param name="key" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="i" type="int" line="328"/>
                <scope line="329"/>
                <scope line="334">
                    <declaration name="newCapacity" type="int" line="335"/>
                </scope>
                <scope line="344">
                    <declaration name="newCapacity" type="int" line="345"/>
                </scope>
            </method>
            <javadoc line="350">
                Rehashes the contents of the receiver into a new table
                  with a smaller or larger capacity.
                  This method is called automatically when the
                  number of keys in the receiver exceeds the high water mark or falls below the low water mark.                
            </javadoc>
            <method name="rehash" type="void" line="356">
                <params>
                    <param name="newCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="357"/>
                <declaration name="oldTable" type="int" line="359"/>
                <declaration name="oldValues" type="double" line="360"/>
                <declaration name="oldState" type="byte" line="361"/>
                <declaration name="newTable" type="int" line="362"/>
                <declaration name="newValues" type="double" line="363"/>
                <declaration name="newState" type="byte" line="364"/>
                <scope line="371">
                    <scope line="372">
                        <declaration name="element" type="int" line="373"/>
                        <declaration name="index" type="int" line="374"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="381">
                Removes the given key with its associated element from the receiver, if present.                
                <param>
                    key the key to be removed from the receiver.                    
                </param>
                <return>
                    <tt>true</tt> if the receiver contained the specified key, <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="removeKey" type="boolean" line="386">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="i" type="int" line="387"/>
                <scope line="391">
                    <declaration name="newCapacity" type="int" line="392"/>
                </scope>
            </method>
            <javadoc line="397">
                Initializes the receiver.                
                <param>
                    initialCapacity   the initial capacity of the receiver.                    
                </param>
                <param>
                    minLoadFactor        the minLoadFactor of the receiver.                    
                </param>
                <param>
                    maxLoadFactor        the maxLoadFactor of the receiver.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>initialCapacity < 0 || (minLoadFactor < 0.0 || minLoadFactor >= 1.0) || (maxLoadFactor <= 0.0 || maxLoadFactor >= 1.0) || (minLoadFactor >= maxLoadFactor)</tt>.                    
                </throws>
            </javadoc>
            <method name="setUp" type="void" line="404">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="minLoadFactor" type="double"/>
                    <param name="maxLoadFactor" type="double"/>
                </params>
                <declaration name="capacity" type="int" line="405"/>
            </method>
            <javadoc line="420">
                Trims the capacity of the receiver to be the receiver&apos;s current 
                  size. Releases any superfluous internal memory. An application can use this operation to minimize the 
                  storage of the receiver.                
            </javadoc>
            <method name="trimToSize" type="void" line="425">
                <declaration name="newCapacity" type="int" line="426"/>
                <scope line="427"/>
            </method>
            <javadoc line="431">
                Fills all values contained in the receiver into the specified list.
                  Fills the list, starting at index 0.
                  After this call returns the specified list has a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
                  Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(IntProcedure)}.
                  &lt;p&gt;
                  This method can be used to iterate over the values of the receiver.                
                <param>
                    list the list to be filled, can have any size.                    
                </param>
            </javadoc>
            <method name="values" type="void" line="440">
                <params>
                    <param name="list" type="DoubleArrayList"/>
                </params>
                <declaration name="elements" type="double[]" line="442"/>
                <declaration name="val" type="double[]" line="443"/>
                <declaration name="stat" type="byte[]" line="444"/>
                <declaration name="j" type="int" line="445"/>
                <scope line="446"/>
            </method>
        </class>
    </source>