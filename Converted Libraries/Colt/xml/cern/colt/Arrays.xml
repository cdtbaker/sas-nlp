<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt">
        <class name="Arrays" line="11">
            <extends class="Object"/>
            <javadoc line="11">
                Array manipulations; complements &lt;tt&gt;java.util.Arrays&lt;/tt&gt;.                
                <see>
                    java.util.Arrays                    
                </see>
                <see>
                    cern.colt.Sorting                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 03-Jul-99                    
                </version>
            </javadoc>
            <javadoc line="21">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Arrays" type="constructor" line="24"/>
            <javadoc line="25">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="byte[]" line="35">
                <params>
                    <param name="array" type="byte[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="36"/>
                <declaration name="newArray" type="byte[]" line="37"/>
                <scope line="38">
                    <declaration name="newCapacity" type="int" line="39"/>
                    <scope line="40"/>
                </scope>
                <scope line="47"/>
            </method>
            <javadoc line="52">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="char[]" line="62">
                <params>
                    <param name="array" type="char[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="63"/>
                <declaration name="newArray" type="char[]" line="64"/>
                <scope line="65">
                    <declaration name="newCapacity" type="int" line="66"/>
                    <scope line="67"/>
                </scope>
                <scope line="74"/>
            </method>
            <javadoc line="79">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="double[]" line="89">
                <params>
                    <param name="array" type="double[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <comment line="100">
                    for (int i = oldCapacity; --i &gt;= 0; ) newArray[i] = array[i];                    
                </comment>
                <declaration name="oldCapacity" type="int" line="90"/>
                <declaration name="newArray" type="double[]" line="91"/>
                <scope line="92">
                    <declaration name="newCapacity" type="int" line="93"/>
                    <scope line="94"/>
                </scope>
                <scope line="102"/>
            </method>
            <javadoc line="107">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="float[]" line="117">
                <params>
                    <param name="array" type="float[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="118"/>
                <declaration name="newArray" type="float[]" line="119"/>
                <scope line="120">
                    <declaration name="newCapacity" type="int" line="121"/>
                    <scope line="122"/>
                </scope>
                <scope line="129"/>
            </method>
            <javadoc line="134">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="int[]" line="144">
                <params>
                    <param name="array" type="int[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="145"/>
                <declaration name="newArray" type="int[]" line="146"/>
                <scope line="147">
                    <declaration name="newCapacity" type="int" line="148"/>
                    <scope line="149"/>
                </scope>
                <scope line="156"/>
            </method>
            <javadoc line="161">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="long[]" line="171">
                <params>
                    <param name="array" type="long[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="172"/>
                <declaration name="newArray" type="long[]" line="173"/>
                <scope line="174">
                    <declaration name="newCapacity" type="int" line="175"/>
                    <scope line="176"/>
                </scope>
                <scope line="183"/>
            </method>
            <javadoc line="188">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="Object[]" line="198">
                <params>
                    <param name="array" type="Object[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="199"/>
                <declaration name="newArray" type="Object[]" line="200"/>
                <scope line="201">
                    <declaration name="newCapacity" type="int" line="202"/>
                    <scope line="203"/>
                </scope>
                <scope line="210"/>
            </method>
            <javadoc line="215">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="short[]" line="225">
                <params>
                    <param name="array" type="short[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="226"/>
                <declaration name="newArray" type="short[]" line="227"/>
                <scope line="228">
                    <declaration name="newCapacity" type="int" line="229"/>
                    <scope line="230"/>
                </scope>
                <scope line="237"/>
            </method>
            <javadoc line="242">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="boolean[]" line="252">
                <params>
                    <param name="array" type="boolean[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="253"/>
                <declaration name="newArray" type="boolean[]" line="254"/>
                <scope line="255">
                    <declaration name="newCapacity" type="int" line="256"/>
                    <scope line="257"/>
                </scope>
                <scope line="264"/>
            </method>
            <javadoc line="269">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="276">
                <params>
                    <param name="array" type="byte[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="277"/>
                <declaration name="maxIndex" type="int" line="279"/>
                <scope line="280"/>
            </method>
            <javadoc line="288">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="295">
                <params>
                    <param name="array" type="char[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="296"/>
                <declaration name="maxIndex" type="int" line="298"/>
                <scope line="299"/>
            </method>
            <javadoc line="307">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="314">
                <params>
                    <param name="array" type="double[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="315"/>
                <declaration name="maxIndex" type="int" line="317"/>
                <scope line="318"/>
            </method>
            <javadoc line="326">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="333">
                <params>
                    <param name="array" type="float[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="334"/>
                <declaration name="maxIndex" type="int" line="336"/>
                <scope line="337"/>
            </method>
            <javadoc line="345">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="352">
                <params>
                    <param name="array" type="int[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="353"/>
                <declaration name="maxIndex" type="int" line="355"/>
                <scope line="356"/>
            </method>
            <javadoc line="364">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="371">
                <params>
                    <param name="array" type="long[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="372"/>
                <declaration name="maxIndex" type="int" line="374"/>
                <scope line="375"/>
            </method>
            <javadoc line="383">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="390">
                <params>
                    <param name="array" type="Object[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="391"/>
                <declaration name="maxIndex" type="int" line="393"/>
                <scope line="394"/>
            </method>
            <javadoc line="402">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="409">
                <params>
                    <param name="array" type="short[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="410"/>
                <declaration name="maxIndex" type="int" line="412"/>
                <scope line="413"/>
            </method>
            <javadoc line="421">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="428">
                <params>
                    <param name="array" type="boolean[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="429"/>
                <declaration name="maxIndex" type="int" line="431"/>
                <scope line="432"/>
            </method>
            <javadoc line="440">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="byte[]" line="450">
                <params>
                    <param name="array" type="byte[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="451">
                    <declaration name="oldArray" type="byte" line="452"/>
                </scope>
            </method>
            <javadoc line="458">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="char[]" line="468">
                <params>
                    <param name="array" type="char[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="469">
                    <declaration name="oldArray" type="char" line="470"/>
                </scope>
            </method>
            <javadoc line="476">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="double[]" line="486">
                <params>
                    <param name="array" type="double[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="487">
                    <declaration name="oldArray" type="double" line="488"/>
                </scope>
            </method>
            <javadoc line="494">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="float[]" line="504">
                <params>
                    <param name="array" type="float[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="505">
                    <declaration name="oldArray" type="float" line="506"/>
                </scope>
            </method>
            <javadoc line="512">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="int[]" line="522">
                <params>
                    <param name="array" type="int[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="523">
                    <declaration name="oldArray" type="int" line="524"/>
                </scope>
            </method>
            <javadoc line="530">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="long[]" line="540">
                <params>
                    <param name="array" type="long[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="541">
                    <declaration name="oldArray" type="long" line="542"/>
                </scope>
            </method>
            <javadoc line="548">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="Object[]" line="558">
                <params>
                    <param name="array" type="Object[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="559">
                    <declaration name="oldArray" type="Object" line="560"/>
                </scope>
            </method>
            <javadoc line="566">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="short[]" line="576">
                <params>
                    <param name="array" type="short[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="577">
                    <declaration name="oldArray" type="short" line="578"/>
                </scope>
            </method>
            <javadoc line="584">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="boolean[]" line="594">
                <params>
                    <param name="array" type="boolean[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="595">
                    <declaration name="oldArray" type="boolean" line="596"/>
                </scope>
            </method>
        </class>
    </source>