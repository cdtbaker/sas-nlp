<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt">
        <class name="Arrays" line="2">
            <extends class="Object"/>
            <javadoc line="2">
                Array manipulations; complements &lt;tt&gt;java.util.Arrays&lt;/tt&gt;.                
                <see>
                    java.util.Arrays                    
                </see>
                <see>
                    cern.colt.Sorting                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 03-Jul-99                    
                </version>
            </javadoc>
            <javadoc line="10">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Arrays" type="constructor" line="13"/>
            <javadoc line="15">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="byte[]" line="23">
                <params>
                    <param name="array" type="byte[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="24"/>
                <declaration name="newArray" type="byte[]" line="25"/>
                <scope line="26">
                    <declaration name="newCapacity" type="int" line="27"/>
                    <scope line="28"/>
                </scope>
                <scope line="34"/>
            </method>
            <javadoc line="39">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="char[]" line="47">
                <params>
                    <param name="array" type="char[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="48"/>
                <declaration name="newArray" type="char[]" line="49"/>
                <scope line="50">
                    <declaration name="newCapacity" type="int" line="51"/>
                    <scope line="52"/>
                </scope>
                <scope line="58"/>
            </method>
            <javadoc line="63">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="double[]" line="71">
                <params>
                    <param name="array" type="double[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="72"/>
                <declaration name="newArray" type="double[]" line="73"/>
                <scope line="74">
                    <declaration name="newCapacity" type="int" line="75"/>
                    <scope line="76"/>
                </scope>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="float[]" line="95">
                <params>
                    <param name="array" type="float[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="96"/>
                <declaration name="newArray" type="float[]" line="97"/>
                <scope line="98">
                    <declaration name="newCapacity" type="int" line="99"/>
                    <scope line="100"/>
                </scope>
                <scope line="106"/>
            </method>
            <javadoc line="111">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="int[]" line="119">
                <params>
                    <param name="array" type="int[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="120"/>
                <declaration name="newArray" type="int[]" line="121"/>
                <scope line="122">
                    <declaration name="newCapacity" type="int" line="123"/>
                    <scope line="124"/>
                </scope>
                <scope line="130"/>
            </method>
            <javadoc line="135">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="long[]" line="143">
                <params>
                    <param name="array" type="long[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="144"/>
                <declaration name="newArray" type="long[]" line="145"/>
                <scope line="146">
                    <declaration name="newCapacity" type="int" line="147"/>
                    <scope line="148"/>
                </scope>
                <scope line="154"/>
            </method>
            <javadoc line="159">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="Object[]" line="167">
                <params>
                    <param name="array" type="Object[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="168"/>
                <declaration name="newArray" type="Object[]" line="169"/>
                <scope line="170">
                    <declaration name="newCapacity" type="int" line="171"/>
                    <scope line="172"/>
                </scope>
                <scope line="178"/>
            </method>
            <javadoc line="183">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="short[]" line="191">
                <params>
                    <param name="array" type="short[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="192"/>
                <declaration name="newArray" type="short[]" line="193"/>
                <scope line="194">
                    <declaration name="newCapacity" type="int" line="195"/>
                    <scope line="196"/>
                </scope>
                <scope line="202"/>
            </method>
            <javadoc line="207">
                Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
                  Returns the identical array if it can hold at least the number of elements specified.
                  Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
                  that it can hold at least the number of elements specified by 
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="boolean[]" line="215">
                <params>
                    <param name="array" type="boolean[]"/>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="216"/>
                <declaration name="newArray" type="boolean[]" line="217"/>
                <scope line="218">
                    <declaration name="newCapacity" type="int" line="219"/>
                    <scope line="220"/>
                </scope>
                <scope line="226"/>
            </method>
            <javadoc line="231">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="238">
                <params>
                    <param name="array" type="byte[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="239"/>
                <declaration name="maxIndex" type="int" line="241"/>
                <scope line="242"/>
            </method>
            <javadoc line="249">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="256">
                <params>
                    <param name="array" type="char[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="257"/>
                <declaration name="maxIndex" type="int" line="259"/>
                <scope line="260"/>
            </method>
            <javadoc line="267">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="274">
                <params>
                    <param name="array" type="double[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="275"/>
                <declaration name="maxIndex" type="int" line="277"/>
                <scope line="278"/>
            </method>
            <javadoc line="285">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="292">
                <params>
                    <param name="array" type="float[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="293"/>
                <declaration name="maxIndex" type="int" line="295"/>
                <scope line="296"/>
            </method>
            <javadoc line="303">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="310">
                <params>
                    <param name="array" type="int[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="311"/>
                <declaration name="maxIndex" type="int" line="313"/>
                <scope line="314"/>
            </method>
            <javadoc line="321">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="328">
                <params>
                    <param name="array" type="long[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="329"/>
                <declaration name="maxIndex" type="int" line="331"/>
                <scope line="332"/>
            </method>
            <javadoc line="339">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="346">
                <params>
                    <param name="array" type="Object[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="347"/>
                <declaration name="maxIndex" type="int" line="349"/>
                <scope line="350"/>
            </method>
            <javadoc line="357">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="364">
                <params>
                    <param name="array" type="short[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="365"/>
                <declaration name="maxIndex" type="int" line="367"/>
                <scope line="368"/>
            </method>
            <javadoc line="375">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="382">
                <params>
                    <param name="array" type="boolean[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="383"/>
                <declaration name="maxIndex" type="int" line="385"/>
                <scope line="386"/>
            </method>
            <javadoc line="393">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="byte[]" line="402">
                <params>
                    <param name="array" type="byte[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="403">
                    <declaration name="oldArray" type="byte" line="404"/>
                </scope>
            </method>
            <javadoc line="410">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="char[]" line="419">
                <params>
                    <param name="array" type="char[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="420">
                    <declaration name="oldArray" type="char" line="421"/>
                </scope>
            </method>
            <javadoc line="427">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="double[]" line="436">
                <params>
                    <param name="array" type="double[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="437">
                    <declaration name="oldArray" type="double" line="438"/>
                </scope>
            </method>
            <javadoc line="444">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="float[]" line="453">
                <params>
                    <param name="array" type="float[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="454">
                    <declaration name="oldArray" type="float" line="455"/>
                </scope>
            </method>
            <javadoc line="461">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="int[]" line="470">
                <params>
                    <param name="array" type="int[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="471">
                    <declaration name="oldArray" type="int" line="472"/>
                </scope>
            </method>
            <javadoc line="478">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="long[]" line="487">
                <params>
                    <param name="array" type="long[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="488">
                    <declaration name="oldArray" type="long" line="489"/>
                </scope>
            </method>
            <javadoc line="495">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="Object[]" line="504">
                <params>
                    <param name="array" type="Object[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="505">
                    <declaration name="oldArray" type="Object" line="506"/>
                </scope>
            </method>
            <javadoc line="512">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="short[]" line="521">
                <params>
                    <param name="array" type="short[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="522">
                    <declaration name="oldArray" type="short" line="523"/>
                </scope>
            </method>
            <javadoc line="529">
                Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
                  An application can use this operation to minimize array storage.
                  &lt;p&gt;
                  Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
                  Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
                  containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.                
                <param>
                    maxCapacity   the desired maximum capacity.                    
                </param>
            </javadoc>
            <method name="trimToCapacity" type="boolean[]" line="538">
                <params>
                    <param name="array" type="boolean[]"/>
                    <param name="maxCapacity" type="int"/>
                </params>
                <scope line="539">
                    <declaration name="oldArray" type="boolean" line="540"/>
                </scope>
            </method>
        </class>
    </source>