<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.buffer">
        <import package="cern.colt.list.IntArrayList"/>
        <class name="IntBuffer2D" line="12">
            <extends class="cern.colt.PersistentObject"/>
            <comment line="24">
                vars cached for speed                
            </comment>
            <implements interface="IntBuffer2DConsumer"/>
            <javadoc line="12">
                Fixed sized (non resizable) streaming buffer connected to a target &lt;tt&gt;IntBuffer2DConsumer&lt;/tt&gt; to which data is automatically flushed upon buffer overflow.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="target" type="IntBuffer2DConsumer" line="19"/>
            <declaration name="xElements" type="int[]" line="20"/>
            <declaration name="yElements" type="int[]" line="21"/>
            <declaration name="xList" type="IntArrayList" line="24"/>
            <declaration name="yList" type="IntArrayList" line="25"/>
            <declaration name="capacity" type="int" line="26"/>
            <declaration name="size" type="int" line="27"/>
            <javadoc line="28">
                Constructs and returns a new buffer with the given target.                
                <param>
                    target the target to flush to.                    
                </param>
                <param>
                    capacity the number of points the buffer shall be capable of holding before overflowing and flushing to the target.                    
                </param>
            </javadoc>
            <method name="IntBuffer2D" type="constructor" line="33">
                <params>
                    <param name="target" type="IntBuffer2DConsumer"/>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="42">
                Adds the specified point (x,y) to the receiver.                
                <param>
                    x the x-coordinate of the point to add.                    
                </param>
                <param>
                    y the y-coordinate of the point to add.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="48">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="53">
                Adds all specified points (x,y) to the receiver.                
                <param>
                    x the x-coordinates of the points to add.                    
                </param>
                <param>
                    y the y-coordinates of the points to add.                    
                </param>
            </javadoc>
            <method name="addAllOf" type="void" line="58">
                <params>
                    <param name="x" type="IntArrayList"/>
                    <param name="y" type="IntArrayList"/>
                </params>
                <declaration name="listSize" type="int" line="59"/>
            </method>
            <javadoc line="63">
                Sets the receiver&apos;s size to zero.
                  In other words, forgets about any internally buffered elements.                
            </javadoc>
            <method name="clear" type="void" line="67"/>
            <javadoc line="70">
                Adds all internally buffered points to the receiver&apos;s target, then resets the current buffer size to zero.                
            </javadoc>
            <method name="flush" type="void" line="73">
                <scope line="74"/>
            </method>
        </class>
    </source>