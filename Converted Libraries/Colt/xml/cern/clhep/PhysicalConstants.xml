<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.clhep">
        <class name="PhysicalConstants" line="2">
            <extends class="Object"/>
            <javadoc line="2">
                High Energy Physics coherent Physical Constants.
                  This class is a Java port of the &lt;a href=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Units/PhysicalConstants_h.html&quot;&gt;C++ version&lt;/a&gt; found in &lt;a href=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep&quot;&gt;CLHEP 1.4.0&lt;/a&gt;, which in turn has been provided by Geant4 (a simulation toolkit for HEP).
                  &lt;p&gt;
                  For aliasing see {@link #physicalConstants}.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="physicalConstants" type="PhysicalConstants" line="11"/>
            <javadoc line="11">
                Little trick to allow for &quot;aliasing&quot;, that is, renaming this class.
                  Normally you would write
                  &lt;pre&gt;
                  PhysicalConstants.twopi;
                  PhysicalConstants.c_light;
                  PhysicalConstants.h_Planck;
                  &lt;/pre&gt;
                  Since this class has only static methods, but no instance methods
                  you can also shorten the name &quot;PhysicalConstants&quot; to a name that better suits you, for example &quot;P&quot;.
                  &lt;pre&gt;
                  PhysicalConstants P = PhysicalConstants.physicalConstants; // kind of &quot;alias&quot;
                  P.twopi;
                  P.c_light;
                  P.h_Planck;
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="pi" type="double" line="29"/>
            <declaration name="twopi" type="double" line="30"/>
            <declaration name="halfpi" type="double" line="31"/>
            <declaration name="pi2" type="double" line="32"/>
            <declaration name="Avogadro" type="double" line="33"/>
            <declaration name="c_light" type="double" line="34"/>
            <declaration name="c_squared" type="double" line="35"/>
            <declaration name="h_Planck" type="double" line="36"/>
            <declaration name="hbar_Planck" type="double" line="37"/>
            <declaration name="hbarc" type="double" line="38"/>
            <declaration name="hbarc_squared" type="double" line="39"/>
            <declaration name="electron_charge" type="double" line="40"/>
            <declaration name="e_squared" type="double" line="41"/>
            <declaration name="electron_mass_c2" type="double" line="42"/>
            <declaration name="proton_mass_c2" type="double" line="43"/>
            <declaration name="neutron_mass_c2" type="double" line="44"/>
            <declaration name="amu_c2" type="double" line="45"/>
            <declaration name="amu" type="double" line="46"/>
            <declaration name="mu0" type="double" line="47"/>
            <declaration name="epsilon0" type="double" line="48"/>
            <declaration name="elm_coupling" type="double" line="49"/>
            <declaration name="fine_structure_const" type="double" line="50"/>
            <declaration name="classic_electr_radius" type="double" line="51"/>
            <declaration name="electron_Compton_length" type="double" line="52"/>
            <declaration name="Bohr_radius" type="double" line="53"/>
            <declaration name="alpha_rcl2" type="double" line="54"/>
            <declaration name="twopi_mc2_rcl2" type="double" line="55"/>
            <declaration name="k_Boltzmann" type="double" line="56"/>
            <declaration name="STP_Temperature" type="double" line="57"/>
            <declaration name="STP_Pressure" type="double" line="58"/>
            <declaration name="kGasThreshold" type="double" line="59"/>
            <declaration name="universe_mean_density" type="double" line="60"/>
            <javadoc line="61">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="PhysicalConstants" type="constructor" line="64"/>
        </class>
    </source>