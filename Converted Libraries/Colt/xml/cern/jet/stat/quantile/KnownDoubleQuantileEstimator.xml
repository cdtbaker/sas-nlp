<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.jet.math.Arithmetic"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.random.sampling.RandomSamplingAssistant"/>
        <class name="KnownDoubleQuantileEstimator" line="6">
            <extends class="DoubleQuantileEstimator"/>
            <javadoc line="6">
                Approximate quantile finding algorithm for known &lt;tt&gt;N&lt;/tt&gt; requiring only one pass and little main memory; computes quantiles over a sequence of &lt;tt&gt;double&lt;/tt&gt; elements.
                  &lt;p&gt;Needs as input the following parameters:&lt;p&gt;
                  &lt;dt&gt;1. &lt;tt&gt;N&lt;/tt&gt; - the number of values of the data sequence over which quantiles are to be determined.
                  &lt;dt&gt;2. &lt;tt&gt;quantiles&lt;/tt&gt; - the number of quantiles to be computed.
                  &lt;dt&gt;3. &lt;tt&gt;epsilon&lt;/tt&gt; - the allowed approximation error on quantiles. The approximation guarantee of this algorithm is explicit.
                  &lt;p&gt;It is also possible to couple the approximation algorithm with random sampling to further reduce memory requirements. 
                  With sampling, the approximation guarantees are explicit but probabilistic, i.e. they apply with respect to a (user controlled) confidence parameter &quot;delta&quot;.
                  &lt;dt&gt;4. &lt;tt&gt;delta&lt;/tt&gt; - the probability allowed that the approximation error fails to be smaller than epsilon. Set &lt;tt&gt;delta&lt;/tt&gt; to zero for explicit non probabilistic guarantees.
                  You usually don&apos;t instantiate quantile finders by using the constructor. Instead use the factory &lt;tt&gt;QuantileFinderFactor&lt;/tt&gt; to do so. It will set up the right parametrization for you.
                  &lt;p&gt;After Gurmeet Singh Manku, Sridhar Rajagopalan and Bruce G. Lindsay, 
                  Approximate Medians and other Quantiles in One Pass and with Limited Memory,
                  Proc. of the 1998 ACM SIGMOD Int. Conf. on Management of Data,
                  Paper available &lt;A HREF=&quot;http://www-cad.eecs.berkeley.edu/~manku&quot;&gt; here&lt;/A&gt;.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    QuantileFinderFactory                    
                </see>
                <see>
                    UnknownApproximateDoubleQuantileFinder                    
                </see>
            </javadoc>
            <declaration name="beta" type="double" line="26"/>
            <declaration name="weHadMoreThanOneEmptyBuffer" type="boolean" line="27"/>
            <declaration name="samplingAssistant" type="RandomSamplingAssistant" line="28"/>
            <declaration name="samplingRate" type="double" line="29"/>
            <declaration name="N" type="long" line="30"/>
            <javadoc line="31">
                Constructs an approximate quantile finder with b buffers, each having k elements.                
                <param>
                    b the number of buffers                    
                </param>
                <param>
                    k the number of elements per buffer                    
                </param>
                <param>
                    N the total number of elements over which quantiles are to be computed.                    
                </param>
                <param>
                    samplingRate 1.0 --> all elements are consumed. 10.0 --> Consumes one random element from successive blocks of 10 elements each. Etc.                    
                </param>
                <param>
                    generator a uniform random number generator.                    
                </param>
            </javadoc>
            <method name="KnownDoubleQuantileEstimator" type="constructor" line="39">
                <params>
                    <param name="b" type="int"/>
                    <param name="k" type="int"/>
                    <param name="N" type="long"/>
                    <param name="samplingRate" type="double"/>
                    <param name="generator" type="RandomEngine"/>
                </params>
                <scope line="42"/>
                <scope line="45"/>
            </method>
            <javadoc line="51">
                @param infinities the number of infinities to fill.                
                <param>
                    buffer the buffer into which the infinities shall be filled.                    
                </param>
            </javadoc>
            <method name="addInfinities" type="void" line="55">
                <params>
                    <param name="missingInfinities" type="int"/>
                    <param name="buffer" type="DoubleBuffer"/>
                </params>
                <declaration name="oldAssistant" type="RandomSamplingAssistant" line="56"/>
                <declaration name="even" type="boolean" line="58"/>
                <scope line="59"/>
            </method>
            <javadoc line="66">
                Not yet commented.                
            </javadoc>
            <method name="buffersToCollapse" type="DoubleBuffer[]" line="69">
                <declaration name="minLevel" type="int" line="70"/>
            </method>
            <javadoc line="73">
                Removes all elements from the receiver.  The receiver will
                  be empty after this call returns, and its memory requirements will be close to zero.                
            </javadoc>
            <method name="clear" type="void" line="77">
                <declaration name="assist" type="RandomSamplingAssistant" line="81"/>
                <scope line="82"/>
            </method>
            <javadoc line="86">
                Returns a deep copy of the receiver.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="90">
                <declaration name="copy" type="KnownDoubleQuantileEstimator" line="91"/>
            </method>
            <javadoc line="95">
                Not yet commented.                
            </javadoc>
            <method name="newBuffer" type="void" line="98">
                <declaration name="numberOfEmptyBuffers" type="int" line="99"/>
                <scope line="102"/>
                <scope line="105"/>
            </method>
            <javadoc line="111">
                Not yet commented.                
            </javadoc>
            <method name="postCollapse" type="void" line="114">
                <params>
                    <param name="toCollapse" type="DoubleBuffer[]"/>
                </params>
            </method>
            <javadoc line="117">
                                
            </javadoc>
            <method name="preProcessPhis" type="DoubleArrayList" line="119">
                <params>
                    <param name="phis" type="DoubleArrayList"/>
                </params>
                <scope line="120">
                    <scope line="122"/>
                </scope>
            </method>
            <javadoc line="128">
                Computes the specified quantile elements over the values previously added.                
                <param>
                    phis the quantiles for which elements are to be computed. Each phi must be in the interval [0.0,1.0]. <tt>phis</tt> must be sorted ascending.                    
                </param>
                <return>
                    the approximate quantile elements.                    
                </return>
            </javadoc>
            <method name="quantileElements" type="DoubleArrayList" line="133">
                <params>
                    <param name="phis" type="DoubleArrayList"/>
                </params>
                <declaration name="partial" type="DoubleBuffer" line="134"/>
                <declaration name="missingValues" type="int" line="135"/>
                <scope line="136"/>
                <scope line="142"/>
                <declaration name="quantileElements" type="DoubleArrayList" line="145"/>
            </method>
            <javadoc line="149">
                Reading off quantiles requires to fill some +infinity, -infinity values to make a partial buffer become full.
                  This method removes the infinities which were previously temporarily added to a partial buffer.
                  Removing them is necessary if we want to continue filling more elements.
                  Precondition: the buffer is sorted ascending.                
                <param>
                    infinities the number of infinities previously filled.                    
                </param>
                <param>
                    buffer the buffer into which the infinities were filled.                    
                </param>
            </javadoc>
            <method name="removeInfinitiesFrom" type="void" line="157">
                <params>
                    <param name="infinities" type="int"/>
                    <param name="buffer" type="DoubleBuffer"/>
                </params>
                <declaration name="plusInf" type="int" line="158"/>
                <declaration name="minusInf" type="int" line="159"/>
                <declaration name="even" type="boolean" line="160"/>
                <scope line="161"/>
            </method>
            <javadoc line="169">
                Not yet commented.                
            </javadoc>
            <method name="sampleNextElement" type="boolean" line="172"/>
        </class>
    </source>