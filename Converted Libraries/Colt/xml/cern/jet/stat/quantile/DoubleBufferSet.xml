<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <class name="DoubleBufferSet" line="2">
            <extends class="BufferSet"/>
            <javadoc line="2">
                A set of buffers holding &lt;tt&gt;double&lt;/tt&gt; elements; internally used for computing approximate quantiles.                
            </javadoc>
            <declaration name="buffers" type="DoubleBuffer[]" line="6"/>
            <declaration name="nextTriggerCalculationState" type="boolean" line="7"/>
            <javadoc line="8">
                Constructs a buffer set with b buffers, each having k elements                
                <param>
                    b the number of buffers                    
                </param>
                <param>
                    k the number of elements per buffer                    
                </param>
            </javadoc>
            <method name="DoubleBufferSet" type="constructor" line="13">
                <params>
                    <param name="b" type="int"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="17">
                Returns an empty buffer if at least one exists.
                  Preferably returns a buffer which has already been used,
                  i.e. a buffer which has already been allocated.                
            </javadoc>
            <method name="_getFirstEmptyBuffer" type="DoubleBuffer" line="22">
                <declaration name="emptyBuffer" type="DoubleBuffer" line="23"/>
                <scope line="24">
                    <scope line="25"/>
                </scope>
            </method>
            <javadoc line="32">
                Returns all full or partial buffers.                
            </javadoc>
            <method name="_getFullOrPartialBuffers" type="DoubleBuffer[]" line="35">
                <declaration name="count" type="int" line="36"/>
                <scope line="37"/>
                <declaration name="collectedBuffers" type="DoubleBuffer[]" line="40"/>
                <declaration name="j" type="int" line="41"/>
                <scope line="42">
                    <scope line="43"/>
                </scope>
            </method>
            <javadoc line="49">
                Determines all full buffers having the specified level.                
                <return>
                    all full buffers having the specified level                    
                </return>
            </javadoc>
            <method name="_getFullOrPartialBuffersWithLevel" type="DoubleBuffer[]" line="53">
                <params>
                    <param name="level" type="int"/>
                </params>
                <declaration name="count" type="int" line="54"/>
                <scope line="55"/>
                <declaration name="collectedBuffers" type="DoubleBuffer[]" line="58"/>
                <declaration name="j" type="int" line="59"/>
                <scope line="60">
                    <scope line="61"/>
                </scope>
            </method>
            <javadoc line="67">
                @return The minimum level of all buffers which are full.                
            </javadoc>
            <method name="_getMinLevelOfFullOrPartialBuffers" type="int" line="70">
                <declaration name="b" type="int" line="71"/>
                <declaration name="minLevel" type="int" line="72"/>
                <declaration name="buffer" type="DoubleBuffer" line="73"/>
                <scope line="74">
                    <scope line="76"/>
                </scope>
            </method>
            <javadoc line="82">
                Returns the number of empty buffers.                
            </javadoc>
            <method name="_getNumberOfEmptyBuffers" type="int" line="85">
                <declaration name="count" type="int" line="86"/>
                <scope line="87"/>
            </method>
            <javadoc line="92">
                Returns all empty buffers.                
            </javadoc>
            <method name="_getPartialBuffer" type="DoubleBuffer" line="95">
                <scope line="96"/>
            </method>
            <javadoc line="101">
                @return the number of buffers                
            </javadoc>
            <method name="b" type="int" line="104"/>
            <javadoc line="107">
                Removes all elements from the receiver.  The receiver will
                  be empty after this call returns, and its memory requirements will be close to zero.                
            </javadoc>
            <method name="clear" type="void" line="111"/>
            <javadoc line="114">
                Removes all elements from the receiver.  The receiver will
                  be empty after this call returns, and its memory requirements will be close to zero.                
            </javadoc>
            <method name="clear" type="void" line="118">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="122">
                Returns a deep copy of the receiver.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="126">
                <declaration name="copy" type="DoubleBufferSet" line="127"/>
                <scope line="129"/>
            </method>
            <javadoc line="134">
                Collapses the specified full buffers (must not include partial buffer).                
                <return>
                    a full buffer containing the collapsed values. The buffer has accumulated weight.                    
                </return>
                <param>
                    buffers the buffers to be collapsed (all of them must be full or partially full)                    
                </param>
            </javadoc>
            <method name="collapse" type="DoubleBuffer" line="139">
                <params>
                    <param name="buffers" type="DoubleBuffer[]"/>
                </params>
                <declaration name="W" type="int" line="140"/>
                <scope line="141"/>
                <declaration name="k" type="int" line="144"/>
                <declaration name="triggerPositions" type="long[]" line="145"/>
                <scope line="146"/>
                <declaration name="outputValues" type="double[]" line="149"/>
                <declaration name="outputBuffer" type="DoubleBuffer" line="151"/>
            </method>
            <javadoc line="156">
                Returns whether the specified element is contained in the receiver.                
            </javadoc>
            <method name="contains" type="boolean" line="159">
                <params>
                    <param name="element" type="double"/>
                </params>
                <scope line="160">
                    <scope line="161"/>
                </scope>
            </method>
            <javadoc line="167">
                Applies a procedure to each element of the receiver, if any.
                  Iterates over the receiver in no particular order.                
                <param>
                    procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
            </javadoc>
            <method name="forEach" type="boolean" line="172">
                <params>
                    <param name="procedure" type="cern.colt.function.DoubleProcedure"/>
                </params>
                <scope line="173">
                    <scope line="174"/>
                </scope>
            </method>
            <javadoc line="180">
                Determines all values of the specified buffers positioned at the specified triggerPositions within the sorted sequence and fills them into outputValues.                
                <param>
                    buffers the buffers to be searched (all must be full or partial)                    
                </param>
                <param>
                    triggerPositions the positions of elements within the sorted sequence to be retrieved                    
                </param>
                <return>
                    outputValues a list filled with the values at triggerPositions                    
                </return>
            </javadoc>
            <method name="getValuesAtPositions" type="double[]" line="186">
                <params>
                    <param name="buffers" type="DoubleBuffer[]"/>
                    <param name="triggerPositions" type="long[]"/>
                </params>
                <scope line="187"/>
                <declaration name="bufferSizes" type="int[]" line="190"/>
                <declaration name="bufferValues" type="double[][]" line="191"/>
                <declaration name="totalBuffersSize" type="int" line="192"/>
                <scope line="193"/>
                <declaration name="buffersSize" type="int" line="198"/>
                <declaration name="triggerPositionsLength" type="int" line="199"/>
                <declaration name="j" type="int" line="200"/>
                <declaration name="cursors" type="int[]" line="201"/>
                <declaration name="counter" type="long" line="202"/>
                <declaration name="nextHit" type="long" line="203"/>
                <declaration name="outputValues" type="double[]" line="204"/>
                <scope line="205">
                    <scope line="206"/>
                </scope>
                <scope line="211">
                    <declaration name="minValue" type="double" line="212"/>
                    <declaration name="minBufferIndex" type="int" line="213"/>
                    <scope line="214">
                        <scope line="215">
                            <declaration name="value" type="double" line="216"/>
                            <scope line="217"/>
                        </scope>
                    </scope>
                    <declaration name="minBuffer" type="DoubleBuffer" line="223"/>
                    <scope line="225"/>
                </scope>
            </method>
            <javadoc line="233">
                @return the number of elements within a buffer.                
            </javadoc>
            <method name="k" type="int" line="236"/>
            <javadoc line="239">
                Returns the number of elements currently needed to store all contained elements.                
            </javadoc>
            <method name="memory" type="long" line="242">
                <declaration name="memory" type="long" line="243"/>
                <scope line="244"/>
            </method>
            <javadoc line="249">
                Computes the next triggerPosition for collapse                
                <return>
                    the next triggerPosition for collapse                    
                </return>
                <param>
                    j specifies that the j-th trigger position is to be computed                    
                </param>
                <param>
                    W the accumulated weights                    
                </param>
            </javadoc>
            <method name="nextTriggerPosition" type="long" line="255">
                <params>
                    <param name="j" type="int"/>
                    <param name="W" type="long"/>
                </params>
                <declaration name="nextTriggerPosition" type="long" line="256"/>
                <scope line="257"/>
                <scope line="260">
                    <scope line="261"/>
                    <scope line="264"/>
                </scope>
            </method>
            <javadoc line="270">
                Returns how many percent of the elements contained in the receiver are &lt;tt&gt;&amp;lt;= element&lt;/tt&gt;.
                  Does linear interpolation if the element is not contained but lies in between two contained elements.                
                <param>
                    the element to search for.                    
                </param>
                <return>
                    the percentage <tt>p</tt> of elements <tt>&lt;= element</tt> (<tt>0.0 &lt;= p &lt;=1.0)</tt>.                    
                </return>
            </javadoc>
            <method name="phi" type="double" line="276">
                <params>
                    <param name="element" type="double"/>
                </params>
                <declaration name="elementsLessThanOrEqualToElement" type="double" line="277"/>
                <scope line="278">
                    <scope line="279"/>
                </scope>
            </method>
            <javadoc line="285">
                @return a String representation of the receiver                
            </javadoc>
            <method name="toString" type="String" line="288">
                <declaration name="buf" type="StringBuffer" line="289"/>
                <scope line="290">
                    <scope line="291"/>
                </scope>
            </method>
            <javadoc line="298">
                Returns the number of elements in all buffers.                
            </javadoc>
            <method name="totalSize" type="long" line="301">
                <declaration name="fullBuffers" type="DoubleBuffer[]" line="302"/>
                <declaration name="totalSize" type="long" line="303"/>
                <scope line="304"/>
            </method>
        </class>
    </source>