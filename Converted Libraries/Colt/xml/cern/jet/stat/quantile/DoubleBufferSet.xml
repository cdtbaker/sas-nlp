<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <class name="DoubleBufferSet" line="11">
            <extends class="BufferSet"/>
            <comment line="17">
                tmp var only                
            </comment>
            <javadoc line="11">
                A set of buffers holding &lt;tt&gt;double&lt;/tt&gt; elements; internally used for computing approximate quantiles.                
            </javadoc>
            <declaration name="buffers" type="DoubleBuffer[]" line="15"/>
            <declaration name="nextTriggerCalculationState" type="boolean" line="16"/>
            <javadoc line="17">
                Constructs a buffer set with b buffers, each having k elements                
                <param>
                    b the number of buffers                    
                </param>
                <param>
                    k the number of elements per buffer                    
                </param>
            </javadoc>
            <method name="DoubleBufferSet" type="constructor" line="22">
                <params>
                    <param name="b" type="int"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="26">
                Returns an empty buffer if at least one exists.
                  Preferably returns a buffer which has already been used,
                  i.e. a buffer which has already been allocated.                
            </javadoc>
            <method name="_getFirstEmptyBuffer" type="DoubleBuffer" line="31">
                <declaration name="emptyBuffer" type="DoubleBuffer" line="32"/>
                <scope line="33">
                    <scope line="34"/>
                </scope>
            </method>
            <javadoc line="42">
                Returns all full or partial buffers.                
            </javadoc>
            <method name="_getFullOrPartialBuffers" type="DoubleBuffer[]" line="45">
                <comment line="47">
                    count buffers                    
                </comment>
                <comment line="53">
                    collect buffers                    
                </comment>
                <declaration name="count" type="int" line="47"/>
                <scope line="48"/>
                <declaration name="collectedBuffers" type="DoubleBuffer[]" line="53"/>
                <declaration name="j" type="int" line="54"/>
                <scope line="55">
                    <scope line="56"/>
                </scope>
            </method>
            <javadoc line="63">
                Determines all full buffers having the specified level.                
                <return>
                    all full buffers having the specified level                    
                </return>
            </javadoc>
            <method name="_getFullOrPartialBuffersWithLevel" type="DoubleBuffer[]" line="67">
                <params>
                    <param name="level" type="int"/>
                </params>
                <comment line="69">
                    count buffers                    
                </comment>
                <comment line="75">
                    collect buffers                    
                </comment>
                <declaration name="count" type="int" line="69"/>
                <scope line="70"/>
                <declaration name="collectedBuffers" type="DoubleBuffer[]" line="75"/>
                <declaration name="j" type="int" line="76"/>
                <scope line="77">
                    <scope line="78"/>
                </scope>
            </method>
            <javadoc line="85">
                @return The minimum level of all buffers which are full.                
            </javadoc>
            <method name="_getMinLevelOfFullOrPartialBuffers" type="int" line="88">
                <declaration name="b" type="int" line="89"/>
                <declaration name="minLevel" type="int" line="90"/>
                <declaration name="buffer" type="DoubleBuffer" line="91"/>
                <scope line="93">
                    <scope line="95"/>
                </scope>
            </method>
            <javadoc line="101">
                Returns the number of empty buffers.                
            </javadoc>
            <method name="_getNumberOfEmptyBuffers" type="int" line="104">
                <declaration name="count" type="int" line="105"/>
                <scope line="106"/>
            </method>
            <javadoc line="112">
                Returns all empty buffers.                
            </javadoc>
            <method name="_getPartialBuffer" type="DoubleBuffer" line="115">
                <scope line="116"/>
            </method>
            <javadoc line="121">
                @return the number of buffers                
            </javadoc>
            <method name="b" type="int" line="124"/>
            <javadoc line="127">
                Removes all elements from the receiver.  The receiver will
                  be empty after this call returns, and its memory requirements will be close to zero.                
            </javadoc>
            <method name="clear" type="void" line="131"/>
            <javadoc line="134">
                Removes all elements from the receiver.  The receiver will
                  be empty after this call returns, and its memory requirements will be close to zero.                
            </javadoc>
            <method name="clear" type="void" line="138">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="142">
                Returns a deep copy of the receiver.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="147">
                <declaration name="copy" type="DoubleBufferSet" line="148"/>
                <scope line="151"/>
            </method>
            <javadoc line="156">
                Collapses the specified full buffers (must not include partial buffer).                
                <return>
                    a full buffer containing the collapsed values. The buffer has accumulated weight.                    
                </return>
                <param>
                    buffers the buffers to be collapsed (all of them must be full or partially full)                    
                </param>
            </javadoc>
            <method name="collapse" type="DoubleBuffer" line="161">
                <params>
                    <param name="buffers" type="DoubleBuffer[]"/>
                </params>
                <comment line="163">
                    determine W                    
                </comment>
                <comment line="164">
                    sum of all weights                    
                </comment>
                <comment line="167">
                    determine outputTriggerPositions                    
                </comment>
                <comment line="172">
                    do the main work: determine values at given positions in sorted sequence                    
                </comment>
                <comment line="175">
                    mark all full buffers as empty, except the first, which will contain the output                    
                </comment>
                <declaration name="W" type="int" line="163"/>
                <scope line="164"/>
                <declaration name="k" type="int" line="167"/>
                <declaration name="triggerPositions" type="long[]" line="168"/>
                <scope line="169"/>
                <declaration name="outputValues" type="double[]" line="172"/>
                <declaration name="outputBuffer" type="DoubleBuffer" line="177"/>
            </method>
            <javadoc line="183">
                Returns whether the specified element is contained in the receiver.                
            </javadoc>
            <method name="contains" type="boolean" line="186">
                <params>
                    <param name="element" type="double"/>
                </params>
                <scope line="187">
                    <scope line="188"/>
                </scope>
            </method>
            <javadoc line="195">
                Applies a procedure to each element of the receiver, if any.
                  Iterates over the receiver in no particular order.                
                <param>
                    procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
            </javadoc>
            <method name="forEach" type="boolean" line="200">
                <params>
                    <param name="procedure" type="cern.colt.function.DoubleProcedure"/>
                </params>
                <scope line="201">
                    <scope line="202"/>
                </scope>
            </method>
            <javadoc line="208">
                Determines all values of the specified buffers positioned at the specified triggerPositions within the sorted sequence and fills them into outputValues.                
                <param>
                    buffers the buffers to be searched (all must be full or partial)                    
                </param>
                <param>
                    triggerPositions the positions of elements within the sorted sequence to be retrieved                    
                </param>
                <return>
                    outputValues a list filled with the values at triggerPositions                    
                </return>
            </javadoc>
            <method name="getValuesAtPositions" type="double[]" line="214">
                <params>
                    <param name="buffers" type="DoubleBuffer[]"/>
                    <param name="triggerPositions" type="long[]"/>
                </params>
                <comment line="216">
                    if (buffers.length==0)
                    {
                    	throw new IllegalArgumentException(&quot;Oops! buffer.length==0.&quot;);
                    }                    
                </comment>
                <comment line="221">
                    System.out.println(&quot;triggers=&quot;+cern.it.util.Arrays.toString(positions));                    
                </comment>
                <comment line="223">
                    new DoubleArrayList(outputValues).fillFromToWith(0, outputValues.length-1, 0.0f);
                    delte the above line, it is only for testing                    
                </comment>
                <comment line="226">
                    cern.it.util.Log.println(&quot;\nEntering getValuesAtPositions...&quot;);
                    cern.it.util.Log.println(&quot;hitPositions=&quot;+cern.it.util.Arrays.toString(positions));                    
                </comment>
                <comment line="229">
                    sort buffers.                    
                </comment>
                <comment line="234">
                    collect some infos into fast cache; for tuning purposes only.                    
                </comment>
                <comment line="242">
                    cern.it.util.Log.println(&quot;buffer[&quot;+i+&quot;]=&quot;+buffers[i].values);                    
                </comment>
                <comment line="245">
                    prepare merge of equi-distant elements within buffers into output values                    
                </comment>
                <comment line="247">
                    first collect some infos into fast cache; for tuning purposes only.                    
                </comment>
                <comment line="251">
                    now prepare the important things.                    
                </comment>
                <comment line="252">
                    current position in collapsed values                    
                </comment>
                <comment line="253">
                    current position in each buffer; init with zeroes                    
                </comment>
                <comment line="254">
                    current position in sorted sequence                    
                </comment>
                <comment line="255">
                    next position in sorted sequence to trigger output population                    
                </comment>
                <comment line="259">
                    nothing to output, because no elements have been filled (we are empty).
                     return meaningless values                    
                </comment>
                <comment line="267">
                    fill all output values with equi-distant elements.                    
                </comment>
                <comment line="269">
                    System.out.println(&quot;\nj=&quot;+j);
                    System.out.println(&quot;counter=&quot;+counter);
                    System.out.println(&quot;nextHit=&quot;+nextHit);                    
                </comment>
                <comment line="273">
                    determine buffer with smallest value at cursor position.                    
                </comment>
                <comment line="278">
                    DoubleBuffer buffer = buffers[b];
                    if (cursors[b] &lt; buffer.length) {                    
                </comment>
                <comment line="281">
                    /double value = buffer.values[cursors[b]];                    
                </comment>
                <comment line="292">
                    trigger copies into output sequence, if necessary.                    
                </comment>
                <comment line="296">
                    System.out.println(&quot;adding to output=&quot;+minValue);                    
                </comment>
                <comment line="301">
                    that element has now been treated, move further.                    
                </comment>
                <comment line="303">
                    System.out.println(&quot;cursors=&quot;+cern.it.util.Arrays.toString(cursors));                    
                </comment>
                <comment line="305">
                    end while (j&lt;k)                    
                </comment>
                <comment line="307">
                    cern.it.util.Log.println(&quot;returning output=&quot;+cern.it.util.Arrays.toString(outputValues));                    
                </comment>
                <scope line="229"/>
                <declaration name="bufferSizes" type="int[]" line="234"/>
                <declaration name="bufferValues" type="double[][]" line="235"/>
                <declaration name="totalBuffersSize" type="int" line="236"/>
                <scope line="237"/>
                <declaration name="buffersSize" type="int" line="247"/>
                <declaration name="triggerPositionsLength" type="int" line="248"/>
                <declaration name="j" type="int" line="251"/>
                <declaration name="cursors" type="int[]" line="252"/>
                <declaration name="counter" type="long" line="253"/>
                <declaration name="nextHit" type="long" line="254"/>
                <declaration name="outputValues" type="double[]" line="255"/>
                <scope line="257">
                    <scope line="260"/>
                </scope>
                <scope line="267">
                    <declaration name="minValue" type="double" line="273"/>
                    <declaration name="minBufferIndex" type="int" line="274"/>
                    <scope line="276">
                        <scope line="279">
                            <declaration name="value" type="double" line="281"/>
                            <scope line="282"/>
                        </scope>
                    </scope>
                    <declaration name="minBuffer" type="DoubleBuffer" line="289"/>
                    <scope line="293"/>
                </scope>
            </method>
            <javadoc line="309">
                @return the number of elements within a buffer.                
            </javadoc>
            <method name="k" type="int" line="312"/>
            <javadoc line="315">
                Returns the number of elements currently needed to store all contained elements.                
            </javadoc>
            <method name="memory" type="long" line="318">
                <declaration name="memory" type="long" line="319"/>
                <scope line="320"/>
            </method>
            <javadoc line="325">
                Computes the next triggerPosition for collapse                
                <return>
                    the next triggerPosition for collapse                    
                </return>
                <param>
                    j specifies that the j-th trigger position is to be computed                    
                </param>
                <param>
                    W the accumulated weights                    
                </param>
            </javadoc>
            <method name="nextTriggerPosition" type="long" line="331">
                <params>
                    <param name="j" type="int"/>
                    <param name="W" type="long"/>
                </params>
                <comment line="335">
                    is W odd?                    
                </comment>
                <comment line="339">
                    W is even                    
                </comment>
                <comment line="340">
                    alternate between both possible next hit positions upon successive invocations                    
                </comment>
                <declaration name="nextTriggerPosition" type="long" line="332"/>
                <scope line="334"/>
                <scope line="338">
                    <scope line="340"/>
                    <scope line="343"/>
                </scope>
            </method>
            <javadoc line="350">
                Returns how many percent of the elements contained in the receiver are &lt;tt&gt;&amp;lt;= element&lt;/tt&gt;.
                  Does linear interpolation if the element is not contained but lies in between two contained elements.                
                <param>
                    the element to search for.                    
                </param>
                <return>
                    the percentage <tt>p</tt> of elements <tt>&lt;= element</tt> (<tt>0.0 &lt;= p &lt;=1.0)</tt>.                    
                </return>
            </javadoc>
            <method name="phi" type="double" line="357">
                <params>
                    <param name="element" type="double"/>
                </params>
                <declaration name="elementsLessThanOrEqualToElement" type="double" line="358"/>
                <scope line="359">
                    <scope line="360"/>
                </scope>
            </method>
            <javadoc line="367">
                @return a String representation of the receiver                
            </javadoc>
            <method name="toString" type="String" line="370">
                <declaration name="buf" type="StringBuffer" line="371"/>
                <scope line="372">
                    <scope line="373"/>
                </scope>
            </method>
            <javadoc line="380">
                Returns the number of elements in all buffers.                
            </javadoc>
            <method name="totalSize" type="long" line="383">
                <declaration name="fullBuffers" type="DoubleBuffer[]" line="384"/>
                <declaration name="totalSize" type="long" line="385"/>
                <scope line="386"/>
            </method>
        </class>
    </source>