<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <class name="QuantileCalc" line="2">
            <extends class="Object"/>
            <javadoc line="2">
                Computes b and k vor various parameters.                
            </javadoc>
            <javadoc line="6">
                Efficiently computes the binomial coefficient, often also referred to as &quot;n over k&quot; or &quot;n choose k&quot;.
                  The binomial coefficient is defined as n!/((n-k)!k!).
                  Tries to avoid numeric overflows.                
                <return>
                    the binomial coefficient.                    
                </return>
            </javadoc>
            <method name="binomial" type="double" line="12">
                <params>
                    <param name="n" type="long"/>
                    <param name="k" type="long"/>
                </params>
                <scope line="13"/>
                <declaration name="binomial" type="double" line="17"/>
                <declaration name="N" type="long" line="18"/>
                <scope line="19"/>
            </method>
            <javadoc line="24">
                Returns the smallest &lt;code&gt;long &amp;gt;= value&lt;/code&gt;.
                  &lt;dt&gt;Examples: &lt;code&gt;1.0 -&gt; 1, 1.2 -&gt; 2, 1.9 -&gt; 2&lt;/code&gt;.
                  This method is safer than using (long) Math.ceil(value), because of possible rounding error.                
            </javadoc>
            <method name="ceiling" type="long" line="29">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="32">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with an approximation error no more than epsilon with a certain probability.
                  Assumes that quantiles are to be computed over N values.
                  The required sampling rate is computed and stored in the first element of the provided &lt;tt&gt;returnSamplingRate&lt;/tt&gt; array, which, therefore must be at least of length 1.                
                <param>
                    N the number of values over which quantiles shall be computed (e.g <tt>10^6</tt>).                    
                </param>
                <param>
                    epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact result, set <tt>epsilon=0.0</tt>;                    
                </param>
                <param>
                    delta the probability that the approximation error is more than than epsilon (e.g. <tt>0.0001</tt>) (<tt>0 &lt;= delta &lt;= 1</tt>). To avoid probabilistic answers, set <tt>delta=0.0</tt>.                    
                </param>
                <param>
                    quantiles the number of quantiles to be computed (e.g. <tt>100</tt>) (<tt>quantiles &gt;= 1</tt>). If unknown in advance, set this number large, e.g. <tt>quantiles &gt;= 10000</tt>.                    
                </param>
                <param>
                    samplingRate a <tt>double[1]</tt> where the sampling rate is to be filled in.                    
                </param>
                <return>
                    <tt>long[2]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer, <tt>returnSamplingRate[0]</tt>=the required sampling rate.                    
                </return>
            </javadoc>
            <method name="known_N_compute_B_and_K" type="long[]" line="44">
                <params>
                    <param name="N" type="long"/>
                    <param name="epsilon" type="double"/>
                    <param name="delta" type="double"/>
                    <param name="quantiles" type="int"/>
                    <param name="returnSamplingRate" type="double[]"/>
                </params>
                <scope line="45"/>
            </method>
            <javadoc line="51">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with a &lt;b&gt;guaranteed&lt;/b&gt; approximation error no more than epsilon.
                  Assumes that quantiles are to be computed over N values.                
                <return>
                    <tt>long[2]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer.                    
                </return>
                <param>
                    N the anticipated number of values over which quantiles shall be determined.                    
                </param>
                <param>
                    epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact result, set <tt>epsilon=0.0</tt>;                    
                </param>
            </javadoc>
            <method name="known_N_compute_B_and_K_quick" type="long[]" line="59">
                <params>
                    <param name="N" type="long"/>
                    <param name="epsilon" type="double"/>
                </params>
                <scope line="60">
                    <declaration name="result" type="long[]" line="61"/>
                </scope>
                <declaration name="maxBuffers" type="int" line="66"/>
                <declaration name="maxHeight" type="int" line="67"/>
                <declaration name="N_double" type="double" line="68"/>
                <declaration name="c" type="double" line="69"/>
                <declaration name="heightMaximums" type="int[]" line="70"/>
                <scope line="71">
                    <declaration name="h" type="int" line="72"/>
                    <scope line="73"/>
                    <scope line="76"/>
                    <declaration name="hMax" type="int" line="80"/>
                    <scope line="81"/>
                    <scope line="84"/>
                </scope>
                <declaration name="kMinimums" type="long[]" line="89"/>
                <scope line="90">
                    <declaration name="h" type="int" line="91"/>
                    <declaration name="kMin" type="long" line="92"/>
                    <scope line="93">
                        <declaration name="value" type="double" line="94"/>
                        <declaration name="tmpK" type="long" line="95"/>
                        <scope line="96"/>
                    </scope>
                </scope>
                <declaration name="multMin" type="long" line="102"/>
                <declaration name="minB" type="int" line="103"/>
                <scope line="104">
                    <scope line="105">
                        <declaration name="mult" type="long" line="106"/>
                        <scope line="107"/>
                    </scope>
                </scope>
                <declaration name="b" type="long" line="113"/>
                <scope line="114"/>
                <scope line="118"/>
                <declaration name="result" type="long[]" line="122"/>
            </method>
            <javadoc line="127">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with an approximation error no more than epsilon with a certain probability.
                  Assumes that quantiles are to be computed over N values.
                  The required sampling rate is computed and stored in the first element of the provided &lt;tt&gt;returnSamplingRate&lt;/tt&gt; array, which, therefore must be at least of length 1.                
                <param>
                    N the anticipated number of values over which quantiles shall be computed (e.g 10^6).                    
                </param>
                <param>
                    epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact result, set <tt>epsilon=0.0</tt>;                    
                </param>
                <param>
                    delta the probability that the approximation error is more than than epsilon (e.g. <tt>0.0001</tt>) (<tt>0 &lt;= delta &lt;= 1</tt>). To avoid probabilistic answers, set <tt>delta=0.0</tt>.                    
                </param>
                <param>
                    quantiles the number of quantiles to be computed (e.g. <tt>100</tt>) (<tt>quantiles &gt;= 1</tt>). If unknown in advance, set this number large, e.g. <tt>quantiles &gt;= 10000</tt>.                    
                </param>
                <param>
                    samplingRate a <tt>double[1]</tt> where the sampling rate is to be filled in.                    
                </param>
                <return>
                    <tt>long[2]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer, <tt>returnSamplingRate[0]</tt>=the required sampling rate.                    
                </return>
            </javadoc>
            <method name="known_N_compute_B_and_K_slow" type="long[]" line="139">
                <params>
                    <param name="N" type="long"/>
                    <param name="epsilon" type="double"/>
                    <param name="delta" type="double"/>
                    <param name="quantiles" type="int"/>
                    <param name="returnSamplingRate" type="double[]"/>
                </params>
                <scope line="140">
                    <declaration name="result" type="long[]" line="141"/>
                </scope>
                <declaration name="maxBuffers" type="int" line="147"/>
                <declaration name="maxHeight" type="int" line="148"/>
                <declaration name="N_double" type="double" line="149"/>
                <declaration name="ret_b" type="long" line="150"/>
                <declaration name="ret_k" type="long" line="151"/>
                <declaration name="sampling_rate" type="double" line="152"/>
                <declaration name="memory" type="long" line="153"/>
                <declaration name="logarithm" type="double" line="154"/>
                <declaration name="c" type="double" line="155"/>
                <scope line="156">
                    <declaration name="binomial" type="double" line="157"/>
                    <declaration name="tmp" type="long" line="158"/>
                    <scope line="159"/>
                    <scope line="165">
                        <declaration name="t" type="double" line="166"/>
                        <declaration name="u" type="double" line="167"/>
                        <declaration name="v" type="double" line="168"/>
                        <declaration name="w" type="double" line="169"/>
                        <declaration name="x" type="double" line="170"/>
                        <declaration name="k" type="long" line="171"/>
                        <scope line="172"/>
                    </scope>
                </scope>
                <declaration name="result" type="long[]" line="180"/>
            </method>
            <method name="main" type="void" line="186">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
            <javadoc line="189">
                Computes b and k for different parameters.                
            </javadoc>
            <method name="test_B_and_K_Calculation" type="void" line="192">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="known_N" type="boolean" line="193"/>
                <declaration name="quantiles" type="int[]" line="196"/>
                <declaration name="sizes" type="long[]" line="197"/>
                <declaration name="deltas" type="double[]" line="198"/>
                <declaration name="epsilons" type="double[]" line="199"/>
                <scope line="206">
                    <declaration name="p" type="int" line="207"/>
                    <scope line="210">
                        <declaration name="N" type="long" line="211"/>
                        <scope line="214">
                            <declaration name="delta" type="double" line="215"/>
                            <scope line="218">
                                <declaration name="epsilon" type="double" line="219"/>
                                <declaration name="returnSamplingRate" type="double[]" line="220"/>
                                <declaration name="result" type="long[]" line="221"/>
                                <scope line="222"/>
                                <scope line="225"/>
                                <declaration name="b" type="long" line="228"/>
                                <declaration name="k" type="long" line="229"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="241">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with an approximation error no more than epsilon with a certain probability.                
                <param>
                    epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact results, set <tt>epsilon=0.0</tt>;                    
                </param>
                <param>
                    delta the probability that the approximation error is more than than epsilon (e.g. <tt>0.0001</tt>) (<tt>0 &lt;= delta &lt;= 1</tt>). To get exact results, set <tt>delta=0.0</tt>.                    
                </param>
                <param>
                    quantiles the number of quantiles to be computed (e.g. <tt>100</tt>) (<tt>quantiles &gt;= 1</tt>). If unknown in advance, set this number large, e.g. <tt>quantiles &gt;= 10000</tt>.                    
                </param>
                <return>
                    <tt>long[3]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer, <tt>long[2]</tt>=the tree height where sampling shall start.                    
                </return>
            </javadoc>
            <method name="unknown_N_compute_B_and_K" type="long[]" line="249">
                <params>
                    <param name="epsilon" type="double"/>
                    <param name="delta" type="double"/>
                    <param name="quantiles" type="int"/>
                </params>
                <scope line="250">
                    <declaration name="result" type="long[]" line="251"/>
                </scope>
                <declaration name="max_b" type="int" line="257"/>
                <declaration name="max_h" type="int" line="258"/>
                <declaration name="max_H" type="int" line="259"/>
                <declaration name="max_Iterations" type="int" line="260"/>
                <declaration name="best_b" type="long" line="261"/>
                <declaration name="best_k" type="long" line="262"/>
                <declaration name="best_h" type="long" line="263"/>
                <declaration name="best_memory" type="long" line="264"/>
                <declaration name="pow" type="double" line="265"/>
                <declaration name="logDelta" type="double" line="266"/>
                <scope line="267">
                    <scope line="268">
                        <scope line="269">
                            <declaration name="Ld" type="double" line="270"/>
                            <declaration name="Ls" type="double" line="271"/>
                            <declaration name="c" type="double" line="272"/>
                            <declaration name="beta" type="double" line="273"/>
                            <declaration name="cc" type="double" line="274"/>
                            <declaration name="d" type="double" line="275"/>
                            <declaration name="f" type="double" line="276"/>
                            <declaration name="root" type="double" line="278"/>
                            <declaration name="alpha_one" type="double" line="279"/>
                            <declaration name="alpha_two" type="double" line="280"/>
                            <declaration name="alpha_one_OK" type="boolean" line="281"/>
                            <declaration name="alpha_two_OK" type="boolean" line="282"/>
                            <scope line="285">
                                <declaration name="alpha" type="double" line="286"/>
                                <scope line="287"/>
                                <scope line="290"/>
                                <declaration name="k" type="long" line="293"/>
                                <scope line="294">
                                    <declaration name="memory" type="long" line="295"/>
                                    <scope line="296"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="306"/>
                </scope>
                <declaration name="result" type="long[]" line="313"/>
                <scope line="314"/>
                <scope line="319"/>
            </method>
        </class>
    </source>