<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <class name="QuantileCalc" line="11">
            <extends class="Object"/>
            <javadoc line="11">
                Computes b and k vor various parameters.                
            </javadoc>
            <javadoc line="15">
                Efficiently computes the binomial coefficient, often also referred to as &quot;n over k&quot; or &quot;n choose k&quot;.
                  The binomial coefficient is defined as n!/((n-k)!k!).
                  Tries to avoid numeric overflows.                
                <return>
                    the binomial coefficient.                    
                </return>
            </javadoc>
            <method name="binomial" type="double" line="21">
                <params>
                    <param name="n" type="long"/>
                    <param name="k" type="long"/>
                </params>
                <comment line="25">
                    since binomial(n,k)==binomial(n,n-k), we can enforce the faster variant,
                     which is also the variant minimizing number overflows.                    
                </comment>
                <scope line="22"/>
                <declaration name="binomial" type="double" line="28"/>
                <declaration name="N" type="long" line="29"/>
                <scope line="30"/>
            </method>
            <javadoc line="35">
                Returns the smallest &lt;code&gt;long &amp;gt;= value&lt;/code&gt;.
                  &lt;dt&gt;Examples: &lt;code&gt;1.0 -&gt; 1, 1.2 -&gt; 2, 1.9 -&gt; 2&lt;/code&gt;.
                  This method is safer than using (long) Math.ceil(value), because of possible rounding error.                
            </javadoc>
            <method name="ceiling" type="long" line="40">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="43">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with an approximation error no more than epsilon with a certain probability.
                  Assumes that quantiles are to be computed over N values.
                  The required sampling rate is computed and stored in the first element of the provided &lt;tt&gt;returnSamplingRate&lt;/tt&gt; array, which, therefore must be at least of length 1.                
                <param>
                    N the number of values over which quantiles shall be computed (e.g <tt>10^6</tt>).                    
                </param>
                <param>
                    epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact result, set <tt>epsilon=0.0</tt>;                    
                </param>
                <param>
                    delta the probability that the approximation error is more than than epsilon (e.g. <tt>0.0001</tt>) (<tt>0 &lt;= delta &lt;= 1</tt>). To avoid probabilistic answers, set <tt>delta=0.0</tt>.                    
                </param>
                <param>
                    quantiles the number of quantiles to be computed (e.g. <tt>100</tt>) (<tt>quantiles &gt;= 1</tt>). If unknown in advance, set this number large, e.g. <tt>quantiles &gt;= 10000</tt>.                    
                </param>
                <param>
                    samplingRate a <tt>double[1]</tt> where the sampling rate is to be filled in.                    
                </param>
                <return>
                    <tt>long[2]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer, <tt>returnSamplingRate[0]</tt>=the required sampling rate.                    
                </return>
            </javadoc>
            <method name="known_N_compute_B_and_K" type="long[]" line="57">
                <params>
                    <param name="N" type="long"/>
                    <param name="epsilon" type="double"/>
                    <param name="delta" type="double"/>
                    <param name="quantiles" type="int"/>
                    <param name="returnSamplingRate" type="double[]"/>
                </params>
                <scope line="58"/>
            </method>
            <javadoc line="64">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with a &lt;b&gt;guaranteed&lt;/b&gt; approximation error no more than epsilon.
                  Assumes that quantiles are to be computed over N values.                
                <return>
                    <tt>long[2]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer.                    
                </return>
                <param>
                    N the anticipated number of values over which quantiles shall be determined.                    
                </param>
                <param>
                    epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact result, set <tt>epsilon=0.0</tt>;                    
                </param>
            </javadoc>
            <method name="known_N_compute_B_and_K_quick" type="long[]" line="72">
                <params>
                    <param name="N" type="long"/>
                    <param name="epsilon" type="double"/>
                </params>
                <comment line="75">
                    no way around exact quantile search                    
                </comment>
                <comment line="88">
                    for each b, determine maximum height, i.e. the height for which x&lt;=0 and x is a maximum
                     with x = binomial(b+h-2, h-1) - binomial(b+h-3, h-3) + binomial(b+h-3, h-2) - N * epsilon * 2.0                    
                </comment>
                <comment line="93">
                    skip heights until x&lt;=0                    
                </comment>
                <comment line="99">
                    from now on x is monotonically growing...                    
                </comment>
                <comment line="100">
                    skip heights until x&gt;0                    
                </comment>
                <comment line="106">
                    go back to last height                    
                </comment>
                <comment line="108">
                    was x&gt;0 or did we loop without finding anything?                    
                </comment>
                <comment line="121">
                    safe some space                    
                </comment>
                <comment line="122">
                    end for                    
                </comment>
                <comment line="125">
                    for each b, determine the smallest k satisfying the constraints, i.e.
                     for each b, determine kMin, with kMin = N/binomial(b+hMax-2,hMax-1)                    
                </comment>
                <comment line="141">
                    from all b&apos;s, determine b that minimizes b*kMin                    
                </comment>
                <comment line="155">
                    epsilon large enough?                    
                </comment>
                <comment line="159">
                    epsilon is very small or zero.                    
                </comment>
                <comment line="160">
                    the only possible solution without violating the                    
                </comment>
                <comment line="161">
                    approximation guarantees is exact quantile search.                    
                </comment>
                <scope line="73">
                    <declaration name="result" type="long[]" line="75"/>
                </scope>
                <declaration name="maxBuffers" type="int" line="81"/>
                <declaration name="maxHeight" type="int" line="82"/>
                <declaration name="N_double" type="double" line="83"/>
                <declaration name="c" type="double" line="84"/>
                <declaration name="heightMaximums" type="int[]" line="85"/>
                <scope line="89">
                    <declaration name="h" type="int" line="90"/>
                    <scope line="97"/>
                    <scope line="104"/>
                    <declaration name="hMax" type="int" line="108"/>
                    <scope line="113"/>
                    <scope line="116"/>
                </scope>
                <declaration name="kMinimums" type="long[]" line="126"/>
                <scope line="127">
                    <declaration name="h" type="int" line="128"/>
                    <declaration name="kMin" type="long" line="129"/>
                    <scope line="130">
                        <declaration name="value" type="double" line="131"/>
                        <declaration name="tmpK" type="long" line="132"/>
                        <scope line="133"/>
                    </scope>
                </scope>
                <declaration name="multMin" type="long" line="141"/>
                <declaration name="minB" type="int" line="142"/>
                <scope line="143">
                    <scope line="144">
                        <declaration name="mult" type="long" line="145"/>
                        <scope line="146"/>
                    </scope>
                </scope>
                <declaration name="b" type="long" line="153"/>
                <scope line="154"/>
                <scope line="158"/>
                <declaration name="result" type="long[]" line="163"/>
            </method>
            <javadoc line="168">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with an approximation error no more than epsilon with a certain probability.
                  Assumes that quantiles are to be computed over N values.
                  The required sampling rate is computed and stored in the first element of the provided &lt;tt&gt;returnSamplingRate&lt;/tt&gt; array, which, therefore must be at least of length 1.                
                <param>
                    N the anticipated number of values over which quantiles shall be computed (e.g 10^6).                    
                </param>
                <param>
                    epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact result, set <tt>epsilon=0.0</tt>;                    
                </param>
                <param>
                    delta the probability that the approximation error is more than than epsilon (e.g. <tt>0.0001</tt>) (<tt>0 &lt;= delta &lt;= 1</tt>). To avoid probabilistic answers, set <tt>delta=0.0</tt>.                    
                </param>
                <param>
                    quantiles the number of quantiles to be computed (e.g. <tt>100</tt>) (<tt>quantiles &gt;= 1</tt>). If unknown in advance, set this number large, e.g. <tt>quantiles &gt;= 10000</tt>.                    
                </param>
                <param>
                    samplingRate a <tt>double[1]</tt> where the sampling rate is to be filled in.                    
                </param>
                <return>
                    <tt>long[2]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer, <tt>returnSamplingRate[0]</tt>=the required sampling rate.                    
                </return>
            </javadoc>
            <method name="known_N_compute_B_and_K_slow" type="long[]" line="180">
                <params>
                    <param name="N" type="long"/>
                    <param name="epsilon" type="double"/>
                    <param name="delta" type="double"/>
                    <param name="quantiles" type="int"/>
                    <param name="returnSamplingRate" type="double[]"/>
                </params>
                <comment line="182">
                    delta can be set to zero, i.e., all quantiles should be approximate with probability 1                    
                </comment>
                <comment line="184">
                    no way around exact quantile search                    
                </comment>
                <comment line="197">
                    One possibility is to use one buffer of size N                    
                </comment>
                <comment line="205">
                    Otherwise, there are at least two buffers (b &gt;= 2)
                     and the height of the tree is at least three (h &gt;= 3)
                    
                     We restrict the search for b and h to MAX_BINOM, a large enough value for
                     practical values of    epsilon &gt;= 0.001   and    delta &gt;= 0.00001                    
                </comment>
                <comment line="231">
                    From our SIGMOD 98 paper, we have two equantions to satisfy:
                     t  &lt;= u * alpha/(1-alpha)^2
                     kv &gt;= w/(1-alpha)^2
                    
                     Denoting 1/(1-alpha)    by x,
                     we see that the first inequality is equivalent to
                     t/u &lt;= x^2 - x
                     which is satisfied by x &gt;= 0.5 + 0.5 * sqrt (1 + 4t/u)
                     Plugging in this value into second equation yields
                     k &gt;= wx^2/v                    
                </comment>
                <scope line="182">
                    <declaration name="result" type="long[]" line="184"/>
                </scope>
                <declaration name="maxBuffers" type="int" line="192"/>
                <declaration name="maxHeight" type="int" line="193"/>
                <declaration name="N_double" type="double" line="194"/>
                <declaration name="ret_b" type="long" line="198"/>
                <declaration name="ret_k" type="long" line="199"/>
                <declaration name="sampling_rate" type="double" line="200"/>
                <declaration name="memory" type="long" line="201"/>
                <declaration name="logarithm" type="double" line="210"/>
                <declaration name="c" type="double" line="211"/>
                <scope line="213">
                    <declaration name="binomial" type="double" line="214"/>
                    <declaration name="tmp" type="long" line="215"/>
                    <scope line="218"/>
                    <scope line="224">
                        <declaration name="t" type="double" line="225"/>
                        <declaration name="u" type="double" line="226"/>
                        <declaration name="v" type="double" line="227"/>
                        <declaration name="w" type="double" line="228"/>
                        <declaration name="x" type="double" line="241"/>
                        <declaration name="k" type="long" line="242"/>
                        <scope line="243"/>
                    </scope>
                </scope>
                <declaration name="result" type="long[]" line="252"/>
            </method>
            <method name="main" type="void" line="258">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
            <javadoc line="261">
                Computes b and k for different parameters.                
            </javadoc>
            <method name="test_B_and_K_Calculation" type="void" line="264">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="known_N" type="boolean" line="265"/>
                <declaration name="quantiles" type="int[]" line="269"/>
                <declaration name="sizes" type="long[]" line="271"/>
                <declaration name="deltas" type="double[]" line="273"/>
                <declaration name="epsilons" type="double[]" line="275"/>
                <scope line="288">
                    <declaration name="p" type="int" line="289"/>
                    <scope line="292">
                        <declaration name="N" type="long" line="293"/>
                        <scope line="296">
                            <declaration name="delta" type="double" line="297"/>
                            <scope line="300">
                                <declaration name="epsilon" type="double" line="301"/>
                                <declaration name="returnSamplingRate" type="double[]" line="303"/>
                                <declaration name="result" type="long[]" line="304"/>
                                <scope line="305"/>
                                <scope line="308"/>
                                <declaration name="b" type="long" line="312"/>
                                <declaration name="k" type="long" line="313"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="326">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with an approximation error no more than epsilon with a certain probability.                
                <param>
                    epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact results, set <tt>epsilon=0.0</tt>;                    
                </param>
                <param>
                    delta the probability that the approximation error is more than than epsilon (e.g. <tt>0.0001</tt>) (<tt>0 &lt;= delta &lt;= 1</tt>). To get exact results, set <tt>delta=0.0</tt>.                    
                </param>
                <param>
                    quantiles the number of quantiles to be computed (e.g. <tt>100</tt>) (<tt>quantiles &gt;= 1</tt>). If unknown in advance, set this number large, e.g. <tt>quantiles &gt;= 10000</tt>.                    
                </param>
                <return>
                    <tt>long[3]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer, <tt>long[2]</tt>=the tree height where sampling shall start.                    
                </return>
            </javadoc>
            <method name="unknown_N_compute_B_and_K" type="long[]" line="335">
                <params>
                    <param name="epsilon" type="double"/>
                    <param name="delta" type="double"/>
                    <param name="quantiles" type="int"/>
                </params>
                <comment line="337">
                    delta can be set to zero, i.e., all quantiles should be approximate with probability 1                    
                </comment>
                <comment line="339">
                    no way around exact quantile search                    
                </comment>
                <comment line="359">
                    double logDelta =  Math.log(2.0/(quantiles*delta)) / (2.0*epsilon*epsilon);                    
                </comment>
                <comment line="361">
                    until we find a solution                    
                </comment>
                <comment line="362">
                    identify that combination of b and h that minimizes b*k.
                     exhaustive search.                    
                </comment>
                <comment line="369">
                    now we have k&gt;=c*(1-alpha)^-2.
                     let&apos;s compute c.
                    double c = Math.log(2.0/(delta/quantiles)) / (2.0*epsilon*epsilon*Math.min(Ld, 8.0*Ls/3.0));                    
                </comment>
                <comment line="374">
                    now we have k&gt;=d/alpha.
                     let&apos;s compute d.                    
                </comment>
                <comment line="380">
                    double d = (Ld(h+max_H-1.0)  +  Ls((h+1)pow - 2.0(h+max_H)))      (Ld + Ls(pow-2.0));
                    d = (d + 2.0)  (2.0epsilon);                    
                </comment>
                <comment line="385">
                    now we have c*(1-alpha)^-2 == d/alpha.
                     we solve this equation for alpha yielding two solutions
                     alpha_1,2 = (c + 2*d  +-  Sqrt(c*c + 4*c*d))/(2*d)                    
                </comment>
                <comment line="389">
                    non real solution to equation                    
                </comment>
                <comment line="394">
                    any alpha must satisfy 0&lt;alpha&lt;1 to yield valid solutions                    
                </comment>
                <comment line="402">
                    take the alpha that minimizes d/alpha                    
                </comment>
                <comment line="409">
                    now we have k=Ceiling(Max(d/alpha, (h+1)/(2*epsilon)))                    
                </comment>
                <comment line="411">
                    valid solution?                    
                </comment>
                <comment line="414">
                    found a solution requiring less memory                    
                </comment>
                <comment line="422">
                    end for h                    
                </comment>
                <comment line="423">
                    end for b                    
                </comment>
                <comment line="427">
                    no solution found so far. very unlikely. Anyway, try again.                    
                </comment>
                <comment line="432">
                    end while                    
                </comment>
                <comment line="436">
                    no solution found.
                     no way around exact quantile search.                    
                </comment>
                <scope line="337">
                    <declaration name="result" type="long[]" line="339"/>
                </scope>
                <declaration name="max_b" type="int" line="346"/>
                <declaration name="max_h" type="int" line="347"/>
                <declaration name="max_H" type="int" line="348"/>
                <declaration name="max_Iterations" type="int" line="349"/>
                <declaration name="best_b" type="long" line="351"/>
                <declaration name="best_k" type="long" line="352"/>
                <declaration name="best_h" type="long" line="353"/>
                <declaration name="best_memory" type="long" line="354"/>
                <declaration name="pow" type="double" line="356"/>
                <declaration name="logDelta" type="double" line="357"/>
                <scope line="360">
                    <scope line="363">
                        <scope line="364">
                            <declaration name="Ld" type="double" line="365"/>
                            <declaration name="Ls" type="double" line="366"/>
                            <declaration name="c" type="double" line="371"/>
                            <declaration name="beta" type="double" line="375"/>
                            <declaration name="cc" type="double" line="376"/>
                            <declaration name="d" type="double" line="377"/>
                            <declaration name="f" type="double" line="387"/>
                            <declaration name="root" type="double" line="389"/>
                            <declaration name="alpha_one" type="double" line="390"/>
                            <declaration name="alpha_two" type="double" line="391"/>
                            <declaration name="alpha_one_OK" type="boolean" line="394"/>
                            <declaration name="alpha_two_OK" type="boolean" line="395"/>
                            <scope line="398">
                                <declaration name="alpha" type="double" line="399"/>
                                <scope line="400"/>
                                <scope line="404"/>
                                <declaration name="k" type="long" line="409"/>
                                <scope line="410">
                                    <declaration name="memory" type="long" line="411"/>
                                    <scope line="412"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="424"/>
                </scope>
                <declaration name="result" type="long[]" line="433"/>
                <scope line="434"/>
                <scope line="441"/>
            </method>
        </class>
    </source>