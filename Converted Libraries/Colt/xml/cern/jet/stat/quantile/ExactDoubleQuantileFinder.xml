<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <import package="cern.colt.list.DoubleArrayList"/>
        <class name="ExactDoubleQuantileFinder" line="3">
            <extends class="cern.colt.PersistentObject"/>
            <implements interface="DoubleQuantileFinder"/>
            <javadoc line="3">
                Exact quantile finding algorithm for known and unknown &lt;tt&gt;N&lt;/tt&gt; requiring large main memory; computes quantiles over a sequence of &lt;tt&gt;double&lt;/tt&gt; elements.
                  The folkore algorithm: Keeps all elements in main memory, sorts the list, then picks the quantiles.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="buffer" type="DoubleArrayList" line="10"/>
            <declaration name="isSorted" type="boolean" line="11"/>
            <javadoc line="12">
                Constructs an empty exact quantile finder.                
            </javadoc>
            <method name="ExactDoubleQuantileFinder" type="constructor" line="15"/>
            <javadoc line="19">
                Adds a value to the receiver.                
                <param>
                    value the value to add.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="23">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="27">
                Adds all values of the specified list to the receiver.                
                <param>
                    values the list of which all values shall be added.                    
                </param>
            </javadoc>
            <method name="addAllOf" type="void" line="31">
                <params>
                    <param name="values" type="DoubleArrayList"/>
                </params>
            </method>
            <javadoc line="34">
                Adds the part of the specified list between indexes &lt;tt&gt;from&lt;/tt&gt; (inclusive) and &lt;tt&gt;to&lt;/tt&gt; (inclusive) to the receiver.                
                <param>
                    values the list of which elements shall be added.                    
                </param>
                <param>
                    from the index of the first element to be added (inclusive).                    
                </param>
                <param>
                    to the index of the last element to be added (inclusive).                    
                </param>
            </javadoc>
            <method name="addAllOfFromTo" type="void" line="40">
                <params>
                    <param name="values" type="DoubleArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
            </method>
            <javadoc line="44">
                Removes all elements from the receiver.  The receiver will
                  be empty after this call returns, and its memory requirements will be close to zero.                
            </javadoc>
            <method name="clear" type="void" line="48"/>
            <javadoc line="53">
                Returns a deep copy of the receiver.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="57">
                <declaration name="copy" type="ExactDoubleQuantileFinder" line="58"/>
            </method>
            <javadoc line="62">
                Returns whether the specified element is contained in the receiver.                
            </javadoc>
            <method name="contains" type="boolean" line="65">
                <params>
                    <param name="element" type="double"/>
                </params>
            </method>
            <javadoc line="69">
                Applies a procedure to each element of the receiver, if any.
                  Iterates over the receiver in no particular order.                
                <param>
                    procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
                <return>
                    <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="forEach" type="boolean" line="75">
                <params>
                    <param name="procedure" type="cern.colt.function.DoubleProcedure"/>
                </params>
                <declaration name="theElements" type="double[]" line="76"/>
                <declaration name="theSize" type="int" line="77"/>
            </method>
            <javadoc line="81">
                Returns the number of elements currently needed to store all contained elements.
                  This number usually differs from the results of method &lt;tt&gt;size()&lt;/tt&gt;, according to the underlying datastructure.                
            </javadoc>
            <method name="memory" type="long" line="85"/>
            <javadoc line="88">
                Returns how many percent of the elements contained in the receiver are &lt;tt&gt;&amp;lt;= element&lt;/tt&gt;.
                  Does linear interpolation if the element is not contained but lies in between two contained elements.                
                <param>
                    the element to search for.                    
                </param>
                <return>
                    the percentage <tt>p</tt> of elements <tt>&lt;= element</tt> (<tt>0.0 &lt;= p &lt;=1.0)</tt>.                    
                </return>
            </javadoc>
            <method name="phi" type="double" line="94">
                <params>
                    <param name="element" type="double"/>
                </params>
            </method>
            <javadoc line="98">
                Computes the specified quantile elements over the values previously added.                
                <param>
                    phis the quantiles for which elements are to be computed. Each phi must be in the interval [0.0,1.0]. <tt>phis</tt> must be sorted ascending.                    
                </param>
                <return>
                    the exact quantile elements.                    
                </return>
            </javadoc>
            <method name="quantileElements" type="DoubleArrayList" line="103">
                <params>
                    <param name="phis" type="DoubleArrayList"/>
                </params>
            </method>
            <javadoc line="107">
                Returns the number of elements currently contained in the receiver (identical to the number of values added so far).                
            </javadoc>
            <method name="size" type="long" line="110"/>
            <javadoc line="113">
                Sorts the receiver.                
            </javadoc>
            <method name="sort" type="void" line="116">
                <scope line="117"/>
            </method>
            <javadoc line="122">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="125">
                <declaration name="s" type="String" line="126"/>
            </method>
            <javadoc line="130">
                Returns the number of elements currently needed to store all contained elements.
                  This number usually differs from the results of method &lt;tt&gt;size()&lt;/tt&gt;, according to the underlying datastructure.                
            </javadoc>
            <method name="totalMemory" type="long" line="134"/>
        </class>
    </source>