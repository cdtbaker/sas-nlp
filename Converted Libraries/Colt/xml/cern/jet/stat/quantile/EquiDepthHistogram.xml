<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <class name="EquiDepthHistogram" line="11">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="11">
                Read-only equi-depth histogram for selectivity estimation.
                  Assume you have collected statistics over a data set, among them a one-dimensional equi-depth histogram (quantiles).
                  Then an applications or DBMS might want to estimate the &lt;i&gt;selectivity&lt;/i&gt; of some range query &lt;tt&gt;[from,to]&lt;/tt&gt;, i.e. the percentage of data set elements contained in the query range.
                  This class does not collect equi-depth histograms but only space efficiently stores already produced histograms and provides operations for selectivity estimation.
                  Uses linear interpolation.
                  &lt;p&gt;
                  This class stores a list &lt;tt&gt;l&lt;/tt&gt; of &lt;tt&gt;float&lt;/tt&gt; values for which holds:
                  &lt;li&gt;Let &lt;tt&gt;v&lt;/tt&gt; be a list of values (sorted ascending) an equi-depth histogram has been computed over.&lt;/li&gt;
                  &lt;li&gt;Let &lt;tt&gt;s=l.length&lt;/tt&gt;.&lt;/li&gt;
                  &lt;li&gt;Let &lt;tt&gt;p=(0, 1/s-1), 2/s-1,..., s-1/s-1=1.0)&lt;/tt&gt; be a list of the &lt;tt&gt;s&lt;/tt&gt; percentages.&lt;/li&gt;
                  &lt;li&gt;Then for each &lt;tt&gt;i=0..s-1: l[i] = e : v.contains(e) &amp;&amp; v[0],..., v[p[i]v.length] &amp;lt;= e&lt;/tt&gt;.&lt;/li&gt;
                  &lt;li&gt;(In particular: &lt;tt&gt;l[0]=min(v)=v[0]&lt;/tt&gt; and &lt;tt&gt;l[s-1]=max(v)=v[s-1]&lt;/tt&gt;.)&lt;/li&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="binBoundaries" type="float[]" line="29"/>
            <javadoc line="30">
                Constructs an equi-depth histogram with the given quantile elements.
                  Quantile elements must be sorted ascending and have the form specified in the class documentation.                
            </javadoc>
            <method name="EquiDepthHistogram" type="constructor" line="34">
                <params>
                    <param name="quantileElements" type="float[]"/>
                </params>
            </method>
            <javadoc line="37">
                Returns the bin index of the given element.
                  In other words, returns a handle to the range the element falls into.                
                <param>
                    element the element to search for.                    
                </param>
                <throws>
                    java.lang.IllegalArgumentException if the element is not contained in any bin.                    
                </throws>
            </javadoc>
            <method name="binOfElement" type="int" line="44">
                <params>
                    <param name="element" type="float"/>
                </params>
                <comment line="47">
                    element found.                    
                </comment>
                <comment line="48">
                    last bin is a closed interval.                    
                </comment>
                <comment line="51">
                    element not found.                    
                </comment>
                <comment line="52">
                    index = -index-1; now index is the insertion point.                    
                </comment>
                <declaration name="index" type="int" line="45"/>
                <scope line="46"/>
                <scope line="50">
                    <scope line="53"/>
                </scope>
            </method>
            <javadoc line="60">
                Returns the number of bins. In other words, returns the number of subdomains partitioning the entire value domain.                
            </javadoc>
            <method name="bins" type="int" line="63"/>
            <javadoc line="66">
                Returns the end of the range associated with the given bin.                
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>binIndex &lt; 0 || binIndex &gt;= bins()</tt>.                    
                </throws>
            </javadoc>
            <method name="endOfBin" type="float" line="70">
                <params>
                    <param name="binIndex" type="int"/>
                </params>
            </method>
            <javadoc line="73">
                Returns the percentage of elements in the range (from,to]. Does linear interpolation.                
                <param>
                    from the start point (exclusive).                    
                </param>
                <param>
                    to the end point (inclusive).                    
                </param>
                <returns>
                    a number in the closed interval <tt>[0.0,1.0]</tt>.                    
                </returns>
            </javadoc>
            <method name="percentFromTo" type="double" line="79">
                <params>
                    <param name="from" type="float"/>
                    <param name="to" type="float"/>
                </params>
            </method>
            <javadoc line="82">
                Returns how many percent of the elements contained in the receiver are &lt;tt&gt;&amp;lt;= element&lt;/tt&gt;.
                  Does linear interpolation.                
                <param>
                    the element to search for.                    
                </param>
                <returns>
                    a number in the closed interval <tt>[0.0,1.0]</tt>.                    
                </returns>
            </javadoc>
            <method name="phi" type="double" line="89">
                <params>
                    <param name="element" type="float"/>
                </params>
                <comment line="96">
                    int index = new FloatArrayList(binBoundaries).binarySearch(element);                    
                </comment>
                <comment line="97">
                    found                    
                </comment>
                <comment line="101">
                    do linear interpolation                    
                </comment>
                <declaration name="size" type="int" line="90"/>
                <declaration name="binWidth" type="double" line="94"/>
                <declaration name="index" type="int" line="95"/>
                <scope line="97"/>
                <declaration name="insertionPoint" type="int" line="102"/>
                <declaration name="from" type="double" line="103"/>
                <declaration name="to" type="double" line="104"/>
                <declaration name="p" type="double" line="105"/>
            </method>
            <javadoc line="108">
                @deprecatedDeprecated.
                  Returns the number of bin boundaries.                
            </javadoc>
            <method name="size" type="int" line="113"/>
            <javadoc line="116">
                Returns the start of the range associated with the given bin.                
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>binIndex &lt; 0 || binIndex &gt;= bins()</tt>.                    
                </throws>
            </javadoc>
            <method name="startOfBin" type="float" line="120">
                <params>
                    <param name="binIndex" type="int"/>
                </params>
            </method>
            <javadoc line="123">
                Not yet commented.                
            </javadoc>
            <method name="test" type="void" line="126">
                <params>
                    <param name="element" type="float"/>
                </params>
                <declaration name="quantileElements" type="float[]" line="127"/>
                <declaration name="histo" type="EquiDepthHistogram" line="129"/>
            </method>
        </class>
    </source>