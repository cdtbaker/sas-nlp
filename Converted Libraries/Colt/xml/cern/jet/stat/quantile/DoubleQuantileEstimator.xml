<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.colt.list.ObjectArrayList"/>
        <class name="DoubleQuantileEstimator" line="4">
            <extends class="cern.colt.PersistentObject"/>
            <implements interface="DoubleQuantileFinder"/>
            <javadoc line="4">
                The abstract base class for approximate quantile finders computing quantiles over a sequence of &lt;tt&gt;double&lt;/tt&gt; elements.                
            </javadoc>
            <declaration name="bufferSet" type="DoubleBufferSet" line="8"/>
            <declaration name="currentBufferToFill" type="DoubleBuffer" line="9"/>
            <declaration name="totalElementsFilled" type="int" line="10"/>
            <javadoc line="11">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="DoubleQuantileEstimator" type="constructor" line="14"/>
            <javadoc line="16">
                Adds a value to the receiver.                
                <param>
                    value the value to add.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="20">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="23"/>
            </method>
            <javadoc line="30">
                Adds all values of the specified list to the receiver.                
                <param>
                    values the list of which all values shall be added.                    
                </param>
            </javadoc>
            <method name="addAllOf" type="void" line="34">
                <params>
                    <param name="values" type="DoubleArrayList"/>
                </params>
            </method>
            <javadoc line="37">
                Adds the part of the specified list between indexes &lt;tt&gt;from&lt;/tt&gt; (inclusive) and &lt;tt&gt;to&lt;/tt&gt; (inclusive) to the receiver.                
                <param>
                    values the list of which elements shall be added.                    
                </param>
                <param>
                    from the index of the first element to be added (inclusive).                    
                </param>
                <param>
                    to the index of the last element to be added (inclusive).                    
                </param>
            </javadoc>
            <method name="addAllOfFromTo" type="void" line="43">
                <params>
                    <param name="values" type="DoubleArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="valuesToAdd" type="double[]" line="44"/>
                <declaration name="k" type="int" line="45"/>
                <declaration name="bufferSize" type="int" line="46"/>
                <declaration name="bufferValues" type="double[]" line="47"/>
                <scope line="48"/>
                <scope line="52">
                    <scope line="53">
                        <scope line="54"/>
                        <scope line="63"/>
                    </scope>
                </scope>
                <scope line="69"/>
            </method>
            <javadoc line="74">
                Not yet commented.                
            </javadoc>
            <method name="buffersToCollapse" type="DoubleBuffer[]" line="77">
                <declaration name="minLevel" type="int" line="78"/>
            </method>
            <javadoc line="81">
                Removes all elements from the receiver.  The receiver will
                  be empty after this call returns, and its memory requirements will be close to zero.                
            </javadoc>
            <method name="clear" type="void" line="85"/>
            <javadoc line="90">
                Returns a deep copy of the receiver.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="94">
                <declaration name="copy" type="DoubleQuantileEstimator" line="95"/>
                <scope line="96">
                    <scope line="98">
                        <declaration name="index" type="int" line="99"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="105">
                Not yet commented.                
            </javadoc>
            <method name="collapse" type="void" line="108">
                <declaration name="toCollapse" type="DoubleBuffer[]" line="109"/>
                <declaration name="outputBuffer" type="DoubleBuffer" line="110"/>
                <declaration name="minLevel" type="int" line="111"/>
            </method>
            <javadoc line="115">
                Returns whether the specified element is contained in the receiver.                
            </javadoc>
            <method name="contains" type="boolean" line="118">
                <params>
                    <param name="element" type="double"/>
                </params>
            </method>
            <javadoc line="121">
                Applies a procedure to each element of the receiver, if any.
                  Iterates over the receiver in no particular order.                
                <param>
                    procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
                <return>
                    <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="forEach" type="boolean" line="127">
                <params>
                    <param name="procedure" type="cern.colt.function.DoubleProcedure"/>
                </params>
            </method>
            <javadoc line="130">
                Returns the number of elements currently needed to store all contained elements.
                  This number usually differs from the results of method &lt;tt&gt;size()&lt;/tt&gt;, according to the underlying datastructure.                
            </javadoc>
            <method name="memory" type="long" line="134"/>
            <method name="newBuffer" type="void" line="137"/>
            <javadoc line="137">
                Not yet commented.                
            </javadoc>
            <javadoc line="141">
                Returns how many percent of the elements contained in the receiver are &lt;tt&gt;&amp;lt;= element&lt;/tt&gt;.
                  Does linear interpolation if the element is not contained but lies in between two contained elements.                
                <param>
                    the element to search for.                    
                </param>
                <return>
                    the percentage <tt>p</tt> of elements <tt>&lt;= element</tt> (<tt>0.0 &lt;= p &lt;=1.0)</tt>.                    
                </return>
            </javadoc>
            <method name="phi" type="double" line="147">
                <params>
                    <param name="element" type="double"/>
                </params>
            </method>
            <method name="postCollapse" type="void" line="150"/>
            <javadoc line="150">
                Not yet commented.                
            </javadoc>
            <javadoc line="154">
                Default implementation does nothing.                
            </javadoc>
            <method name="preProcessPhis" type="DoubleArrayList" line="157">
                <params>
                    <param name="phis" type="DoubleArrayList"/>
                </params>
            </method>
            <javadoc line="160">
                Computes the specified quantile elements over the values previously added.                
                <param>
                    phis the quantiles for which elements are to be computed. Each phi must be in the interval [0.0,1.0]. <tt>phis</tt> must be sorted ascending.                    
                </param>
                <return>
                    the approximate quantile elements.                    
                </return>
            </javadoc>
            <method name="quantileElements" type="DoubleArrayList" line="165">
                <params>
                    <param name="phis" type="DoubleArrayList"/>
                </params>
                <declaration name="triggerPositions" type="long[]" line="167"/>
                <declaration name="totalSize" type="long" line="168"/>
                <scope line="169"/>
                <declaration name="fullBuffers" type="DoubleBuffer[]" line="172"/>
                <declaration name="quantileElements" type="double[]" line="173"/>
            </method>
            <method name="sampleNextElement" type="boolean" line="176"/>
            <javadoc line="176">
                Not yet commented.                
            </javadoc>
            <javadoc line="180">
                Initializes the receiver                
            </javadoc>
            <method name="setUp" type="void" line="183">
                <params>
                    <param name="b" type="int"/>
                    <param name="k" type="int"/>
                </params>
                <scope line="184"/>
            </method>
            <javadoc line="190">
                Returns the number of elements currently contained in the receiver (identical to the number of values added so far).                
            </javadoc>
            <method name="size" type="long" line="193"/>
            <javadoc line="196">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="199">
                <declaration name="s" type="String" line="200"/>
                <declaration name="b" type="int" line="202"/>
                <declaration name="k" type="int" line="203"/>
            </method>
            <javadoc line="206">
                Returns the number of elements currently needed to store all contained elements.
                  This number usually differs from the results of method &lt;tt&gt;size()&lt;/tt&gt;, according to the underlying datastructure.                
            </javadoc>
            <method name="totalMemory" type="long" line="210"/>
        </class>
    </source>