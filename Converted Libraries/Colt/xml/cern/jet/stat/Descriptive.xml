<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat">
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.colt.list.IntArrayList"/>
        <class name="Descriptive" line="4">
            <extends class="Object"/>
            <javadoc line="4">
                Basic descriptive statistics.                
                <author>
                    peter.gedeck@pharma.Novartis.com                    
                </author>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    0.91, 08-Dec-99                    
                </version>
            </javadoc>
            <javadoc line="11">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Descriptive" type="constructor" line="14"/>
            <javadoc line="16">
                Returns the auto-correlation of a data sequence.                
            </javadoc>
            <method name="autoCorrelation" type="double" line="19">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="lag" type="int"/>
                    <param name="mean" type="double"/>
                    <param name="variance" type="double"/>
                </params>
                <declaration name="N" type="int" line="20"/>
                <declaration name="elements" type="double[]" line="22"/>
                <declaration name="run" type="double" line="23"/>
            </method>
            <javadoc line="27">
                Checks if the given range is within the contained array&apos;s bounds.                
                <throws>
                    IndexOutOfBoundsException if <tt>to!=from-1 || from&lt;0 || from&gt;to || to&gt;=size()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkRangeFromTo" type="void" line="31">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="theSize" type="int"/>
                </params>
            </method>
            <javadoc line="35">
                Returns the correlation of two data sequences.
                  That is &lt;tt&gt;covariance(data1,data2)/(standardDev1standardDev2)&lt;/tt&gt;.                
            </javadoc>
            <method name="correlation" type="double" line="39">
                <params>
                    <param name="data1" type="DoubleArrayList"/>
                    <param name="standardDev1" type="double"/>
                    <param name="data2" type="DoubleArrayList"/>
                    <param name="standardDev2" type="double"/>
                </params>
            </method>
            <javadoc line="42">
                Returns the covariance of two data sequences, which is 
                  &lt;tt&gt;cov(x,y) = (1/(size()-1))  Sum((x[i]-mean(x))  (y[i]-mean(y)))&lt;/tt&gt;.
                  See the &lt;A HREF=&quot;http://www.cquest.utoronto.ca/geog/ggr270y/notes/not05efg.html&quot;&gt; math definition&lt;/A&gt;.                
            </javadoc>
            <method name="covariance" type="double" line="47">
                <params>
                    <param name="data1" type="DoubleArrayList"/>
                    <param name="data2" type="DoubleArrayList"/>
                </params>
                <declaration name="size" type="int" line="48"/>
                <declaration name="elements1" type="double[]" line="50"/>
                <declaration name="elements2" type="double[]" line="51"/>
                <declaration name="sumx" type="double" line="52"/>
                <scope line="53">
                    <declaration name="x" type="double" line="54"/>
                    <declaration name="y" type="double" line="55"/>
                </scope>
            </method>
            <method name="covariance2" type="double" line="62">
                <params>
                    <param name="data1" type="DoubleArrayList"/>
                    <param name="data2" type="DoubleArrayList"/>
                </params>
                <declaration name="size" type="int" line="63"/>
                <declaration name="mean1" type="double" line="64"/>
                <declaration name="mean2" type="double" line="65"/>
                <declaration name="covariance" type="double" line="66"/>
                <scope line="67">
                    <declaration name="x" type="double" line="68"/>
                    <declaration name="y" type="double" line="69"/>
                </scope>
            </method>
            <javadoc line="74">
                Durbin-Watson computation.                
            </javadoc>
            <method name="durbinWatson" type="double" line="77">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                </params>
                <declaration name="size" type="int" line="78"/>
                <declaration name="elements" type="double[]" line="80"/>
                <declaration name="run" type="double" line="81"/>
                <declaration name="run_sq" type="double" line="82"/>
                <scope line="84">
                    <declaration name="x" type="double" line="85"/>
                </scope>
            </method>
            <javadoc line="91">
                Computes the frequency (number of occurances, count) of each distinct value in the given sorted data.
                  After this call returns both &lt;tt&gt;distinctValues&lt;/tt&gt; and &lt;tt&gt;frequencies&lt;/tt&gt; have a new size (which is equal for both), which is the number of distinct values in the sorted data.
                  &lt;p&gt;
                  Distinct values are filled into &lt;tt&gt;distinctValues&lt;/tt&gt;, starting at index 0.
                  The frequency of each distinct value is filled into &lt;tt&gt;frequencies&lt;/tt&gt;, starting at index 0.
                  As a result, the smallest distinct value (and its frequency) can be found at index 0, the second smallest distinct value (and its frequency) at index 1, ..., the largest distinct value (and its frequency) at index &lt;tt&gt;distinctValues.size()-1&lt;/tt&gt;.
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;br&gt;
                  &lt;tt&gt;elements = (5,6,6,7,8,8) --&gt; distinctValues = (5,6,7,8), frequencies = (1,2,1,2)&lt;/tt&gt;                
                <param>
                    sortedData the data; must be sorted ascending.                    
                </param>
                <param>
                    distinctValues a list to be filled with the distinct values; can have any size.                    
                </param>
                <param>
                    frequencies      a list to be filled with the frequencies; can have any size; set this parameter to <tt>null</tt> to ignore it.                    
                </param>
            </javadoc>
            <method name="frequencies" type="void" line="105">
                <params>
                    <param name="sortedData" type="DoubleArrayList"/>
                    <param name="distinctValues" type="DoubleArrayList"/>
                    <param name="frequencies" type="IntArrayList"/>
                </params>
                <declaration name="sortedElements" type="double[]" line="108"/>
                <declaration name="size" type="int" line="109"/>
                <declaration name="i" type="int" line="110"/>
                <scope line="111">
                    <declaration name="element" type="double" line="112"/>
                    <declaration name="cursor" type="int" line="113"/>
                    <declaration name="runLength" type="int" line="115"/>
                </scope>
            </method>
            <javadoc line="120">
                Returns the geometric mean of a data sequence.
                  Note that for a geometric mean to be meaningful, the minimum of the data sequence must not be less or equal to zero.
                  &lt;br&gt;
                  The geometric mean is given by &lt;tt&gt;pow( Product( data[i] ), 1/size)&lt;/tt&gt;
                  which is equivalent to &lt;tt&gt;Math.exp( Sum( Log(data[i]) ) / size)&lt;/tt&gt;.                
            </javadoc>
            <method name="geometricMean" type="double" line="127">
                <params>
                    <param name="size" type="int"/>
                    <param name="sumOfLogarithms" type="double"/>
                </params>
            </method>
            <javadoc line="130">
                Returns the geometric mean of a data sequence.
                  Note that for a geometric mean to be meaningful, the minimum of the data sequence must not be less or equal to zero.
                  &lt;br&gt;
                  The geometric mean is given by &lt;tt&gt;pow( Product( data[i] ), 1/data.size())&lt;/tt&gt;.
                  This method tries to avoid overflows at the expense of an equivalent but somewhat slow definition:
                  &lt;tt&gt;geo = Math.exp( Sum( Log(data[i]) ) / data.size())&lt;/tt&gt;.                
            </javadoc>
            <method name="geometricMean" type="double" line="138">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                </params>
            </method>
            <javadoc line="141">
                Returns the harmonic mean of a data sequence.                
                <param>
                    size the number of elements in the data sequence.                    
                </param>
                <param>
                    sumOfInversions <tt>Sum( 1.0 / data[i])</tt>.                    
                </param>
            </javadoc>
            <method name="harmonicMean" type="double" line="146">
                <params>
                    <param name="size" type="int"/>
                    <param name="sumOfInversions" type="double"/>
                </params>
            </method>
            <javadoc line="149">
                Incrementally maintains and updates minimum, maximum, sum and sum of squares of a data sequence.
                  Assume we have already recorded some data sequence elements 
                  and know their minimum, maximum, sum and sum of squares.
                  Assume further, we are to record some more elements 
                  and to derive updated values of minimum, maximum, sum and sum of squares.
                  &lt;p&gt;
                  This method computes those updated values without needing to know the already recorded elements.
                  This is interesting for interactive online monitoring and/or applications that cannot keep the entire huge data sequence in memory.
                  &lt;p&gt;
                  &lt;br&gt;Definition of sumOfSquares: &lt;tt&gt;sumOfSquares(n) = Sum ( data[i]  data[i] )&lt;/tt&gt;.                
                <param>
                    data the additional elements to be incorporated into min, max, etc.                    
                </param>
                <param>
                    from the index of the first element within <tt>data</tt> to consider.                    
                </param>
                <param>
                    to the index of the last element within <tt>data</tt> to consider.
                      The method incorporates elements <tt>data[from], ..., data[to]</tt>.                    
                </param>
                <param>
                    inOut the old values in the following format:
                      <ul>
                      <li><tt>inOut[0]</tt> is the old minimum.
                      <li><tt>inOut[1]</tt> is the old maximum.
                      <li><tt>inOut[2]</tt> is the old sum.
                      <li><tt>inOut[3]</tt> is the old sum of squares.
                      </ul>
                      If no data sequence elements have so far been recorded set the values as follows 
                      <ul>
                      <li><tt>inOut[0] = Double.POSITIVE_INFINITY</tt> as the old minimum.
                      <li><tt>inOut[1] = Double.NEGATIVE_INFINITY</tt> as the old maximum.
                      <li><tt>inOut[2] = 0.0</tt> as the old sum.
                      <li><tt>inOut[3] = 0.0</tt> as the old sum of squares.
                      </ul>                    
                </param>
                <return>
                    the updated values filled into the <tt>inOut</tt> array.                    
                </return>
            </javadoc>
            <method name="incrementalUpdate" type="void" line="180">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="inOut" type="double[]"/>
                </params>
                <declaration name="min" type="double" line="182"/>
                <declaration name="max" type="double" line="183"/>
                <declaration name="sum" type="double" line="184"/>
                <declaration name="sumSquares" type="double" line="185"/>
                <declaration name="elements" type="double[]" line="186"/>
                <scope line="187">
                    <declaration name="element" type="double" line="188"/>
                </scope>
            </method>
            <javadoc line="199">
                Incrementally maintains and updates various sums of powers of the form &lt;tt&gt;Sum(data[i]&lt;sup&gt;k&lt;/sup&gt;)&lt;/tt&gt;.
                  Assume we have already recorded some data sequence elements &lt;tt&gt;data[i]&lt;/tt&gt;
                  and know the values of &lt;tt&gt;Sum(data[i]&lt;sup&gt;from&lt;/sup&gt;), Sum(data[i]&lt;sup&gt;from+1&lt;/sup&gt;), ..., Sum(data[i]&lt;sup&gt;to&lt;/sup&gt;)&lt;/tt&gt;.
                  Assume further, we are to record some more elements 
                  and to derive updated values of these sums.
                  &lt;p&gt;
                  This method computes those updated values without needing to know the already recorded elements.
                  This is interesting for interactive online monitoring and/or applications that cannot keep the entire huge data sequence in memory.
                  For example, the incremental computation of moments is based upon such sums of powers:
                  &lt;p&gt;
                  The moment of &lt;tt&gt;k&lt;/tt&gt;-th order with constant &lt;tt&gt;c&lt;/tt&gt; of a data sequence,
                  is given by &lt;tt&gt;Sum( (data[i]-c)&lt;sup&gt;k&lt;/sup&gt; ) / data.size()&lt;/tt&gt;.
                  It can incrementally be computed by using the equivalent formula
                  &lt;p&gt;
                  &lt;tt&gt;moment(k,c) = m(k,c) / data.size()&lt;/tt&gt; where
                  &lt;br&gt;&lt;tt&gt;m(k,c) = Sum( -1&lt;sup&gt;i&lt;/sup&gt;  b(k,i)  c&lt;sup&gt;i&lt;/sup&gt;  sumOfPowers(k-i))&lt;/tt&gt; for &lt;tt&gt;i = 0 .. k&lt;/tt&gt; and
                  &lt;br&gt;&lt;tt&gt;b(k,i) = &lt;/tt&gt;{@link cern.jet.math.Arithmetic#binomial(long,long) binomial(k,i)} and
                  &lt;br&gt;&lt;tt&gt;sumOfPowers(k) = Sum( data[i]&lt;sup&gt;k&lt;/sup&gt; )&lt;/tt&gt;.
                  &lt;p&gt;                
                <param>
                    data the additional elements to be incorporated into min, max, etc.                    
                </param>
                <param>
                    from the index of the first element within <tt>data</tt> to consider.                    
                </param>
                <param>
                    to the index of the last element within <tt>data</tt> to consider.
                      The method incorporates elements <tt>data[from], ..., data[to]</tt>.                    
                </param>
                <param>
                    inOut the old values of the sums in the following format:
                      <ul>
                      <li><tt>sumOfPowers[0]</tt> is the old <tt>Sum(data[i]<sup>fromSumIndex</sup>)</tt>.
                      <li><tt>sumOfPowers[1]</tt> is the old <tt>Sum(data[i]<sup>fromSumIndex+1</sup>)</tt>.
                      <li>...
                      <li><tt>sumOfPowers[toSumIndex-fromSumIndex]</tt> is the old <tt>Sum(data[i]<sup>toSumIndex</sup>)</tt>.
                      </ul>
                      If no data sequence elements have so far been recorded set all old values of the sums to <tt>0.0</tt>.                    
                </param>
                <return>
                    the updated values filled into the <tt>sumOfPowers</tt> array.                    
                </return>
            </javadoc>
            <method name="incrementalUpdateSumsOfPowers" type="void" line="233">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="fromSumIndex" type="int"/>
                    <param name="toSumIndex" type="int"/>
                    <param name="sumOfPowers" type="double[]"/>
                </params>
                <declaration name="size" type="int" line="234"/>
                <declaration name="lastIndex" type="int" line="235"/>
                <scope line="237">
                    <scope line="238">
                        <declaration name="elements" type="double[]" line="239"/>
                        <declaration name="sum" type="double" line="240"/>
                        <declaration name="sumSquares" type="double" line="241"/>
                        <scope line="242">
                            <declaration name="element" type="double" line="243"/>
                        </scope>
                    </scope>
                    <scope line="251">
                        <declaration name="elements" type="double[]" line="252"/>
                        <declaration name="sum" type="double" line="253"/>
                        <declaration name="sumSquares" type="double" line="254"/>
                        <declaration name="sum_xxx" type="double" line="255"/>
                        <scope line="256">
                            <declaration name="element" type="double" line="257"/>
                        </scope>
                    </scope>
                    <scope line="267">
                        <declaration name="elements" type="double[]" line="268"/>
                        <declaration name="sum" type="double" line="269"/>
                        <declaration name="sumSquares" type="double" line="270"/>
                        <declaration name="sum_xxx" type="double" line="271"/>
                        <declaration name="sum_xxxx" type="double" line="272"/>
                        <scope line="273">
                            <declaration name="element" type="double" line="274"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="287">
                    <scope line="288"/>
                </scope>
                <declaration name="elements" type="double[]" line="293"/>
                <scope line="294">
                    <declaration name="element" type="double" line="295"/>
                    <declaration name="pow" type="double" line="296"/>
                    <declaration name="j" type="int" line="297"/>
                    <scope line="298"/>
                </scope>
            </method>
            <javadoc line="305">
                Incrementally maintains and updates sum and sum of squares of a &lt;i&gt;weighted&lt;/i&gt; data sequence.
                  Assume we have already recorded some data sequence elements 
                  and know their sum and sum of squares.
                  Assume further, we are to record some more elements 
                  and to derive updated values of sum and sum of squares.
                  &lt;p&gt;
                  This method computes those updated values without needing to know the already recorded elements.
                  This is interesting for interactive online monitoring and/or applications that cannot keep the entire huge data sequence in memory.
                  &lt;p&gt;
                  &lt;br&gt;Definition of sum: &lt;tt&gt;sum = Sum ( data[i]  weights[i] )&lt;/tt&gt;.
                  &lt;br&gt;Definition of sumOfSquares: &lt;tt&gt;sumOfSquares = Sum ( data[i]  data[i]  weights[i])&lt;/tt&gt;.                
                <param>
                    data the additional elements to be incorporated into min, max, etc.                    
                </param>
                <param>
                    weights the weight of each element within <tt>data</tt>.                    
                </param>
                <param>
                    from the index of the first element within <tt>data</tt> (and <tt>weights</tt>) to consider.                    
                </param>
                <param>
                    to the index of the last element within <tt>data</tt> (and <tt>weights</tt>) to consider.
                      The method incorporates elements <tt>data[from], ..., data[to]</tt>.                    
                </param>
                <param>
                    inOut the old values in the following format:
                      <ul>
                      <li><tt>inOut[0]</tt> is the old sum.
                      <li><tt>inOut[1]</tt> is the old sum of squares.
                      </ul>
                      If no data sequence elements have so far been recorded set the values as follows 
                      <ul>
                      <li><tt>inOut[0] = 0.0</tt> as the old sum.
                      <li><tt>inOut[1] = 0.0</tt> as the old sum of squares.
                      </ul>                    
                </param>
                <return>
                    the updated values filled into the <tt>inOut</tt> array.                    
                </return>
            </javadoc>
            <method name="incrementalWeightedUpdate" type="void" line="334">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="weights" type="DoubleArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="inOut" type="double[]"/>
                </params>
                <declaration name="dataSize" type="int" line="335"/>
                <declaration name="sum" type="double" line="338"/>
                <declaration name="sumOfSquares" type="double" line="339"/>
                <declaration name="elements" type="double[]" line="340"/>
                <declaration name="w" type="double[]" line="341"/>
                <scope line="342">
                    <declaration name="element" type="double" line="343"/>
                    <declaration name="weight" type="double" line="344"/>
                    <declaration name="prod" type="double" line="345"/>
                </scope>
            </method>
            <javadoc line="352">
                Returns the kurtosis (aka excess) of a data sequence.                
                <param>
                    moment4 the fourth central moment, which is <tt>moment(data,4,mean)</tt>.                    
                </param>
                <param>
                    standardDeviation the standardDeviation.                    
                </param>
            </javadoc>
            <method name="kurtosis" type="double" line="357">
                <params>
                    <param name="moment4" type="double"/>
                    <param name="standardDeviation" type="double"/>
                </params>
            </method>
            <javadoc line="360">
                Returns the kurtosis (aka excess) of a data sequence, which is &lt;tt&gt;-3 + moment(data,4,mean) / standardDeviation&lt;sup&gt;4&lt;/sup&gt;&lt;/tt&gt;.                
            </javadoc>
            <method name="kurtosis" type="double" line="363">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="mean" type="double"/>
                    <param name="standardDeviation" type="double"/>
                </params>
            </method>
            <javadoc line="366">
                Returns the lag-1 autocorrelation of a dataset; 
                  Note that this method has semantics different from &lt;tt&gt;autoCorrelation(..., 1)&lt;/tt&gt;;                
            </javadoc>
            <method name="lag1" type="double" line="370">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="mean" type="double"/>
                </params>
                <declaration name="size" type="int" line="371"/>
                <declaration name="elements" type="double[]" line="372"/>
                <declaration name="r1" type="double" line="373"/>
                <declaration name="q" type="double" line="374"/>
                <declaration name="v" type="double" line="375"/>
                <scope line="376">
                    <declaration name="delta0" type="double" line="377"/>
                    <declaration name="delta1" type="double" line="378"/>
                </scope>
            </method>
            <javadoc line="385">
                Returns the largest member of a data sequence.                
            </javadoc>
            <method name="max" type="double" line="388">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                </params>
                <declaration name="size" type="int" line="389"/>
                <declaration name="elements" type="double[]" line="391"/>
                <declaration name="max" type="double" line="392"/>
                <scope line="393"/>
            </method>
            <javadoc line="398">
                Returns the arithmetic mean of a data sequence; 
                  That is &lt;tt&gt;Sum( data[i] ) / data.size()&lt;/tt&gt;.                
            </javadoc>
            <method name="mean" type="double" line="402">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                </params>
            </method>
            <javadoc line="405">
                Returns the mean deviation of a dataset.
                  That is &lt;tt&gt;Sum (Math.abs(data[i]-mean)) / data.size())&lt;/tt&gt;.                
            </javadoc>
            <method name="meanDeviation" type="double" line="409">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="mean" type="double"/>
                </params>
                <declaration name="elements" type="double[]" line="410"/>
                <declaration name="size" type="int" line="411"/>
                <declaration name="sum" type="double" line="412"/>
            </method>
            <javadoc line="416">
                Returns the median of a sorted data sequence.                
                <param>
                    sortedData the data sequence; <b>must be sorted ascending</b>.                    
                </param>
            </javadoc>
            <method name="median" type="double" line="420">
                <params>
                    <param name="sortedData" type="DoubleArrayList"/>
                </params>
            </method>
            <javadoc line="423">
                Returns the smallest member of a data sequence.                
            </javadoc>
            <method name="min" type="double" line="426">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                </params>
                <declaration name="size" type="int" line="427"/>
                <declaration name="elements" type="double[]" line="429"/>
                <declaration name="min" type="double" line="430"/>
                <scope line="431"/>
            </method>
            <javadoc line="436">
                Returns the moment of &lt;tt&gt;k&lt;/tt&gt;-th order with constant &lt;tt&gt;c&lt;/tt&gt; of a data sequence,
                  which is &lt;tt&gt;Sum( (data[i]-c)&lt;sup&gt;k&lt;/sup&gt; ) / data.size()&lt;/tt&gt;.                
                <param>
                    sumOfPowers <tt>sumOfPowers[m] == Sum( data[i]<sup>m</sup>) )</tt> for <tt>m = 0,1,..,k</tt> as returned by method {@link #incrementalUpdateSumsOfPowers(DoubleArrayList,int,int,int,int,double[])}.
                      In particular there must hold <tt>sumOfPowers.length == k+1</tt>.                    
                </param>
                <param>
                    size the number of elements of the data sequence.                    
                </param>
            </javadoc>
            <method name="moment" type="double" line="443">
                <params>
                    <param name="k" type="int"/>
                    <param name="c" type="double"/>
                    <param name="size" type="int"/>
                    <param name="sumOfPowers" type="double[]"/>
                </params>
                <declaration name="sum" type="double" line="444"/>
                <declaration name="sign" type="int" line="445"/>
                <scope line="446">
                    <declaration name="y" type="double" line="447"/>
                </scope>
            </method>
            <javadoc line="458">
                Returns the moment of &lt;tt&gt;k&lt;/tt&gt;-th order with constant &lt;tt&gt;c&lt;/tt&gt; of a data sequence,
                  which is &lt;tt&gt;Sum( (data[i]-c)&lt;sup&gt;k&lt;/sup&gt; ) / data.size()&lt;/tt&gt;.                
            </javadoc>
            <method name="moment" type="double" line="462">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="k" type="int"/>
                    <param name="c" type="double"/>
                </params>
            </method>
            <javadoc line="465">
                Returns the pooled mean of two data sequences.
                  That is &lt;tt&gt;(size1  mean1 + size2  mean2) / (size1 + size2)&lt;/tt&gt;.                
                <param>
                    size1 the number of elements in data sequence 1.                    
                </param>
                <param>
                    mean1 the mean of data sequence 1.                    
                </param>
                <param>
                    size2 the number of elements in data sequence 2.                    
                </param>
                <param>
                    mean2 the mean of data sequence 2.                    
                </param>
            </javadoc>
            <method name="pooledMean" type="double" line="473">
                <params>
                    <param name="size1" type="int"/>
                    <param name="mean1" type="double"/>
                    <param name="size2" type="int"/>
                    <param name="mean2" type="double"/>
                </params>
            </method>
            <javadoc line="476">
                Returns the pooled variance of two data sequences.
                  That is &lt;tt&gt;(size1  variance1 + size2  variance2) / (size1 + size2)&lt;/tt&gt;;                
                <param>
                    size1 the number of elements in data sequence 1.                    
                </param>
                <param>
                    variance1 the variance of data sequence 1.                    
                </param>
                <param>
                    size2 the number of elements in data sequence 2.                    
                </param>
                <param>
                    variance2 the variance of data sequence 2.                    
                </param>
            </javadoc>
            <method name="pooledVariance" type="double" line="484">
                <params>
                    <param name="size1" type="int"/>
                    <param name="variance1" type="double"/>
                    <param name="size2" type="int"/>
                    <param name="variance2" type="double"/>
                </params>
            </method>
            <javadoc line="487">
                Returns the product, which is &lt;tt&gt;Prod( data[i] )&lt;/tt&gt;.
                  In other words: &lt;tt&gt;data[0]data[1]...data[data.size()-1]&lt;/tt&gt;.
                  This method uses the equivalent definition:
                  &lt;tt&gt;prod = pow( exp( Sum( Log(x[i]) ) / size(), size())&lt;/tt&gt;.                
            </javadoc>
            <method name="product" type="double" line="493">
                <params>
                    <param name="size" type="int"/>
                    <param name="sumOfLogarithms" type="double"/>
                </params>
            </method>
            <javadoc line="496">
                Returns the product of a data sequence, which is &lt;tt&gt;Prod( data[i] )&lt;/tt&gt;.
                  In other words: &lt;tt&gt;data[0]data[1]...data[data.size()-1]&lt;/tt&gt;.
                  Note that you may easily get numeric overflows.                
            </javadoc>
            <method name="product" type="double" line="501">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                </params>
                <declaration name="size" type="int" line="502"/>
                <declaration name="elements" type="double[]" line="503"/>
                <declaration name="product" type="double" line="504"/>
            </method>
            <javadoc line="508">
                Returns the &lt;tt&gt;phi-&lt;/tt&gt;quantile; that is, an element &lt;tt&gt;elem&lt;/tt&gt; for which holds that &lt;tt&gt;phi&lt;/tt&gt; percent of data elements are less than &lt;tt&gt;elem&lt;/tt&gt;.
                  The quantile need not necessarily be contained in the data sequence, it can be a linear interpolation.                
                <param>
                    sortedData the data sequence; <b>must be sorted ascending</b>.                    
                </param>
                <param>
                    phi the percentage; must satisfy <tt>0 &lt;= phi &lt;= 1</tt>.                    
                </param>
            </javadoc>
            <method name="quantile" type="double" line="514">
                <params>
                    <param name="sortedData" type="DoubleArrayList"/>
                    <param name="phi" type="double"/>
                </params>
                <declaration name="sortedElements" type="double[]" line="515"/>
                <declaration name="n" type="int" line="516"/>
                <declaration name="index" type="double" line="517"/>
                <declaration name="lhs" type="int" line="518"/>
                <declaration name="delta" type="double" line="519"/>
                <declaration name="result" type="double" line="520"/>
                <scope line="522"/>
                <scope line="525"/>
            </method>
            <javadoc line="530">
                Returns how many percent of the elements contained in the receiver are &lt;tt&gt;&amp;lt;= element&lt;/tt&gt;.
                  Does linear interpolation if the element is not contained but lies in between two contained elements.                
                <param>
                    sortedList the list to be searched (must be sorted ascending).                    
                </param>
                <param>
                    element the element to search for.                    
                </param>
                <return>
                    the percentage <tt>phi</tt> of elements <tt>&lt;= element</tt> (<tt>0.0 &lt;= phi &lt;= 1.0)</tt>.                    
                </return>
            </javadoc>
            <method name="quantileInverse" type="double" line="537">
                <params>
                    <param name="sortedList" type="DoubleArrayList"/>
                    <param name="element" type="double"/>
                </params>
            </method>
            <javadoc line="540">
                Returns the quantiles of the specified percentages.
                  The quantiles need not necessarily be contained in the data sequence, it can be a linear interpolation.                
                <param>
                    sortedData the data sequence; <b>must be sorted ascending</b>.                    
                </param>
                <param>
                    percentages the percentages for which quantiles are to be computed.
                      Each percentage must be in the interval <tt>[0.0,1.0]</tt>.                    
                </param>
                <return>
                    the quantiles.                    
                </return>
            </javadoc>
            <method name="quantiles" type="DoubleArrayList" line="548">
                <params>
                    <param name="sortedData" type="DoubleArrayList"/>
                    <param name="percentages" type="DoubleArrayList"/>
                </params>
                <declaration name="s" type="int" line="549"/>
                <declaration name="quantiles" type="DoubleArrayList" line="550"/>
                <scope line="551"/>
            </method>
            <javadoc line="556">
                Returns the linearly interpolated number of elements in a list less or equal to a given element.
                  The rank is the number of elements &lt;= element.
                  Ranks are of the form &lt;tt&gt;{0, 1, 2,..., sortedList.size()}&lt;/tt&gt;.
                  If no element is &lt;= element, then the rank is zero.
                  If the element lies in between two contained elements, then linear interpolation is used and a non integer value is returned.                
                <param>
                    sortedList the list to be searched (must be sorted ascending).                    
                </param>
                <param>
                    element the element to search for.                    
                </param>
                <return>
                    the rank of the element.                    
                </return>
            </javadoc>
            <method name="rankInterpolated" type="double" line="566">
                <params>
                    <param name="sortedList" type="DoubleArrayList"/>
                    <param name="element" type="double"/>
                </params>
                <declaration name="index" type="int" line="567"/>
                <scope line="568">
                    <declaration name="to" type="int" line="569"/>
                    <declaration name="s" type="int" line="570"/>
                </scope>
                <declaration name="insertionPoint" type="int" line="574"/>
                <declaration name="from" type="double" line="576"/>
                <declaration name="to" type="double" line="577"/>
                <declaration name="delta" type="double" line="578"/>
            </method>
            <javadoc line="581">
                Returns the RMS (Root-Mean-Square) of a data sequence.
                  That is &lt;tt&gt;Math.sqrt(Sum( data[i]data[i] ) / data.size())&lt;/tt&gt;.
                  The RMS of data sequence is the square-root of the mean of the squares of the elements in the data sequence.
                  It is a measure of the average &quot;size&quot; of the elements of a data sequence.                
                <param>
                    sumOfSquares <tt>sumOfSquares(data) == Sum( data[i]data[i] )</tt> of the data sequence.                    
                </param>
                <param>
                    size the number of elements in the data sequence.                    
                </param>
            </javadoc>
            <method name="rms" type="double" line="589">
                <params>
                    <param name="size" type="int"/>
                    <param name="sumOfSquares" type="double"/>
                </params>
            </method>
            <javadoc line="592">
                Returns the sample kurtosis (aka excess) of a data sequence.
                  Ref: R.R. Sokal, F.J. Rohlf, Biometry: the principles and practice of statistics
                  in biological research (W.H. Freeman and Company, New York, 1998, 3rd edition)
                  p. 114-115.                
                <param>
                    size the number of elements of the data sequence.                    
                </param>
                <param>
                    moment4 the fourth central moment, which is <tt>moment(data,4,mean)</tt>.                    
                </param>
                <param>
                    sampleVariance the <b>sample variance</b>.                    
                </param>
            </javadoc>
            <method name="sampleKurtosis" type="double" line="601">
                <params>
                    <param name="size" type="int"/>
                    <param name="moment4" type="double"/>
                    <param name="sampleVariance" type="double"/>
                </params>
                <declaration name="n" type="int" line="602"/>
                <declaration name="s2" type="double" line="603"/>
                <declaration name="m4" type="double" line="604"/>
            </method>
            <javadoc line="607">
                Returns the sample kurtosis (aka excess) of a data sequence.                
            </javadoc>
            <method name="sampleKurtosis" type="double" line="610">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="mean" type="double"/>
                    <param name="sampleVariance" type="double"/>
                </params>
            </method>
            <javadoc line="613">
                Return the standard error of the sample kurtosis.
                  Ref: R.R. Sokal, F.J. Rohlf, Biometry: the principles and practice of statistics
                  in biological research (W.H. Freeman and Company, New York, 1998, 3rd edition)
                  p. 138.                
                <param>
                    size the number of elements of the data sequence.                    
                </param>
            </javadoc>
            <method name="sampleKurtosisStandardError" type="double" line="620">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="n" type="int" line="621"/>
            </method>
            <javadoc line="624">
                Returns the sample skew of a data sequence.
                  Ref: R.R. Sokal, F.J. Rohlf, Biometry: the principles and practice of statistics
                  in biological research (W.H. Freeman and Company, New York, 1998, 3rd edition)
                  p. 114-115.                
                <param>
                    size the number of elements of the data sequence.                    
                </param>
                <param>
                    moment3 the third central moment, which is <tt>moment(data,3,mean)</tt>.                    
                </param>
                <param>
                    sampleVariance the <b>sample variance</b>.                    
                </param>
            </javadoc>
            <method name="sampleSkew" type="double" line="633">
                <params>
                    <param name="size" type="int"/>
                    <param name="moment3" type="double"/>
                    <param name="sampleVariance" type="double"/>
                </params>
                <declaration name="n" type="int" line="634"/>
                <declaration name="s" type="double" line="635"/>
                <declaration name="m3" type="double" line="636"/>
            </method>
            <javadoc line="639">
                Returns the sample skew of a data sequence.                
            </javadoc>
            <method name="sampleSkew" type="double" line="642">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="mean" type="double"/>
                    <param name="sampleVariance" type="double"/>
                </params>
            </method>
            <javadoc line="645">
                Return the standard error of the sample skew.
                  Ref: R.R. Sokal, F.J. Rohlf, Biometry: the principles and practice of statistics
                  in biological research (W.H. Freeman and Company, New York, 1998, 3rd edition)
                  p. 138.                
                <param>
                    size the number of elements of the data sequence.                    
                </param>
            </javadoc>
            <method name="sampleSkewStandardError" type="double" line="652">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="n" type="int" line="653"/>
            </method>
            <javadoc line="656">
                Returns the sample standard deviation.
                  Ref: R.R. Sokal, F.J. Rohlf, Biometry: the principles and practice of statistics
                  in biological research (W.H. Freeman and Company, New York, 1998, 3rd edition)
                  p. 53.                
                <param>
                    size the number of elements of the data sequence.                    
                </param>
                <param>
                    sampleVariance the <b>sample variance</b>.                    
                </param>
            </javadoc>
            <method name="sampleStandardDeviation" type="double" line="664">
                <params>
                    <param name="size" type="int"/>
                    <param name="sampleVariance" type="double"/>
                </params>
                <declaration name="s" type="double" line="665"/>
                <declaration name="n" type="int" line="666"/>
                <scope line="668"/>
                <scope line="671"/>
            </method>
            <javadoc line="676">
                Returns the sample variance of a data sequence.
                  That is &lt;tt&gt;(sumOfSquares - meansum) / (size - 1)&lt;/tt&gt; with &lt;tt&gt;mean = sum/size&lt;/tt&gt;.                
                <param>
                    size the number of elements of the data sequence.                    
                </param>
                <param>
                    sum <tt>== Sum( data[i] )</tt>.                    
                </param>
                <param>
                    sumOfSquares <tt>== Sum( data[i]data[i] )</tt>.                    
                </param>
            </javadoc>
            <method name="sampleVariance" type="double" line="683">
                <params>
                    <param name="size" type="int"/>
                    <param name="sum" type="double"/>
                    <param name="sumOfSquares" type="double"/>
                </params>
                <declaration name="mean" type="double" line="684"/>
            </method>
            <javadoc line="687">
                Returns the sample variance of a data sequence.
                  That is &lt;tt&gt;Sum ( (data[i]-mean)^2 ) / (data.size()-1)&lt;/tt&gt;.                
            </javadoc>
            <method name="sampleVariance" type="double" line="691">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="mean" type="double"/>
                </params>
                <declaration name="elements" type="double[]" line="692"/>
                <declaration name="size" type="int" line="693"/>
                <declaration name="sum" type="double" line="694"/>
                <scope line="695">
                    <declaration name="delta" type="double" line="696"/>
                </scope>
            </method>
            <javadoc line="701">
                Returns the sample weighted variance of a data sequence.
                  That is &lt;tt&gt;(sumOfSquaredProducts  -  sumOfProducts  sumOfProducts / sumOfWeights) / (sumOfWeights - 1)&lt;/tt&gt;.                
                <param>
                    sumOfWeights <tt>== Sum( weights[i] )</tt>.                    
                </param>
                <param>
                    sumOfProducts <tt>== Sum( data[i]  weights[i] )</tt>.                    
                </param>
                <param>
                    sumOfSquaredProducts <tt>== Sum( data[i]  data[i]  weights[i] )</tt>.                    
                </param>
            </javadoc>
            <method name="sampleWeightedVariance" type="double" line="708">
                <params>
                    <param name="sumOfWeights" type="double"/>
                    <param name="sumOfProducts" type="double"/>
                    <param name="sumOfSquaredProducts" type="double"/>
                </params>
            </method>
            <javadoc line="711">
                Returns the skew of a data sequence.                
                <param>
                    moment3 the third central moment, which is <tt>moment(data,3,mean)</tt>.                    
                </param>
                <param>
                    standardDeviation the standardDeviation.                    
                </param>
            </javadoc>
            <method name="skew" type="double" line="716">
                <params>
                    <param name="moment3" type="double"/>
                    <param name="standardDeviation" type="double"/>
                </params>
            </method>
            <javadoc line="719">
                Returns the skew of a data sequence, which is &lt;tt&gt;moment(data,3,mean) / standardDeviation&lt;sup&gt;3&lt;/sup&gt;&lt;/tt&gt;.                
            </javadoc>
            <method name="skew" type="double" line="722">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="mean" type="double"/>
                    <param name="standardDeviation" type="double"/>
                </params>
            </method>
            <javadoc line="725">
                Splits (partitions) a list into sublists such that each sublist contains the elements with a given range.
                  &lt;tt&gt;splitters=(a,b,c,...,y,z)&lt;/tt&gt; defines the ranges &lt;tt&gt;[-inf,a), [a,b), [b,c), ..., [y,z), [z,inf]&lt;/tt&gt;.
                  &lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;br&gt;
                  &lt;ul&gt;
                  &lt;tt&gt;data = (1,2,3,4,5,8,8,8,10,11)&lt;/tt&gt;.
                  &lt;br&gt;&lt;tt&gt;splitters=(2,8)&lt;/tt&gt; yields 3 bins: &lt;tt&gt;(1), (2,3,4,5) (8,8,8,10,11)&lt;/tt&gt;.
                  &lt;br&gt;&lt;tt&gt;splitters=()&lt;/tt&gt; yields 1 bin: &lt;tt&gt;(1,2,3,4,5,8,8,8,10,11)&lt;/tt&gt;.
                  &lt;br&gt;&lt;tt&gt;splitters=(-5)&lt;/tt&gt; yields 2 bins: &lt;tt&gt;(), (1,2,3,4,5,8,8,8,10,11)&lt;/tt&gt;.
                  &lt;br&gt;&lt;tt&gt;splitters=(100)&lt;/tt&gt; yields 2 bins: &lt;tt&gt;(1,2,3,4,5,8,8,8,10,11), ()&lt;/tt&gt;.
                  &lt;/ul&gt;                
                <param>
                    sortedList the list to be partitioned (must be sorted ascending).                    
                </param>
                <param>
                    splitters the points at which the list shall be partitioned (must be sorted ascending).                    
                </param>
                <return>
                    the sublists (an array with <tt>length == splitters.size() + 1</tt>.
                      Each sublist is returned sorted ascending.                    
                </return>
            </javadoc>
            <method name="split" type="DoubleArrayList[]" line="741">
                <params>
                    <param name="sortedList" type="DoubleArrayList"/>
                    <param name="splitters" type="DoubleArrayList"/>
                </params>
                <declaration name="noOfBins" type="int" line="742"/>
                <declaration name="bins" type="DoubleArrayList[]" line="743"/>
                <declaration name="listSize" type="int" line="745"/>
                <declaration name="nextStart" type="int" line="746"/>
                <declaration name="i" type="int" line="747"/>
                <scope line="748">
                    <declaration name="splitValue" type="double" line="749"/>
                    <declaration name="index" type="int" line="750"/>
                    <scope line="751">
                        <declaration name="insertionPosition" type="int" line="752"/>
                    </scope>
                    <scope line="756">
                        <scope line="757"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="769">
                Returns the standard deviation from a variance.                
            </javadoc>
            <method name="standardDeviation" type="double" line="772">
                <params>
                    <param name="variance" type="double"/>
                </params>
            </method>
            <javadoc line="775">
                Returns the standard error of a data sequence.
                  That is &lt;tt&gt;Math.sqrt(variance/size)&lt;/tt&gt;.                
                <param>
                    size the number of elements in the data sequence.                    
                </param>
                <param>
                    variance the variance of the data sequence.                    
                </param>
            </javadoc>
            <method name="standardError" type="double" line="781">
                <params>
                    <param name="size" type="int"/>
                    <param name="variance" type="double"/>
                </params>
            </method>
            <javadoc line="784">
                Modifies a data sequence to be standardized.
                  Changes each element &lt;tt&gt;data[i]&lt;/tt&gt; as follows: &lt;tt&gt;data[i] = (data[i]-mean)/standardDeviation&lt;/tt&gt;.                
            </javadoc>
            <method name="standardize" type="void" line="788">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="mean" type="double"/>
                    <param name="standardDeviation" type="double"/>
                </params>
                <declaration name="elements" type="double[]" line="789"/>
            </method>
            <javadoc line="792">
                Returns the sum of a data sequence.
                  That is &lt;tt&gt;Sum( data[i] )&lt;/tt&gt;.                
            </javadoc>
            <method name="sum" type="double" line="796">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                </params>
            </method>
            <javadoc line="799">
                Returns the sum of inversions of a data sequence,
                  which is &lt;tt&gt;Sum( 1.0 / data[i])&lt;/tt&gt;.                
                <param>
                    data the data sequence.                    
                </param>
                <param>
                    from the index of the first data element (inclusive).                    
                </param>
                <param>
                    to the index of the last data element (inclusive).                    
                </param>
            </javadoc>
            <method name="sumOfInversions" type="double" line="806">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
            </method>
            <javadoc line="809">
                Returns the sum of logarithms of a data sequence, which is &lt;tt&gt;Sum( Log(data[i])&lt;/tt&gt;.                
                <param>
                    data the data sequence.                    
                </param>
                <param>
                    from the index of the first data element (inclusive).                    
                </param>
                <param>
                    to the index of the last data element (inclusive).                    
                </param>
            </javadoc>
            <method name="sumOfLogarithms" type="double" line="815">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="elements" type="double[]" line="816"/>
                <declaration name="logsum" type="double" line="817"/>
            </method>
            <javadoc line="821">
                Returns &lt;tt&gt;Sum( (data[i]-c)&lt;sup&gt;k&lt;/sup&gt; )&lt;/tt&gt;; optimized for common parameters like &lt;tt&gt;c == 0.0&lt;/tt&gt; and/or &lt;tt&gt;k == -2 .. 4&lt;/tt&gt;.                
            </javadoc>
            <method name="sumOfPowerDeviations" type="double" line="824">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="k" type="int"/>
                    <param name="c" type="double"/>
                </params>
            </method>
            <javadoc line="827">
                Returns &lt;tt&gt;Sum( (data[i]-c)&lt;sup&gt;k&lt;/sup&gt; )&lt;/tt&gt; for all &lt;tt&gt;i = from .. to&lt;/tt&gt;; optimized for common parameters like &lt;tt&gt;c == 0.0&lt;/tt&gt; and/or &lt;tt&gt;k == -2 .. 5&lt;/tt&gt;.                
            </javadoc>
            <method name="sumOfPowerDeviations" type="double" line="830">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="k" type="int"/>
                    <param name="c" type="double"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="elements" type="double[]" line="831"/>
                <declaration name="sum" type="double" line="832"/>
                <declaration name="v" type="double" line="833"/>
                <declaration name="i" type="int" line="834"/>
                <scope line="837"/>
                <scope line="841"/>
                <scope line="858"/>
                <scope line="862"/>
                <scope line="868"/>
                <scope line="872"/>
                <scope line="878"/>
                <scope line="882"/>
                <scope line="888"/>
                <scope line="892"/>
            </method>
            <javadoc line="903">
                Returns the sum of powers of a data sequence, which is &lt;tt&gt;Sum ( data[i]&lt;sup&gt;k&lt;/sup&gt; )&lt;/tt&gt;.                
            </javadoc>
            <method name="sumOfPowers" type="double" line="906">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="909">
                Returns the sum of squared mean deviation of of a data sequence.
                  That is &lt;tt&gt;variance  (size-1) == Sum( (data[i] - mean)^2 )&lt;/tt&gt;.                
                <param>
                    size the number of elements of the data sequence.                    
                </param>
                <param>
                    variance the variance of the data sequence.                    
                </param>
            </javadoc>
            <method name="sumOfSquaredDeviations" type="double" line="915">
                <params>
                    <param name="size" type="int"/>
                    <param name="variance" type="double"/>
                </params>
            </method>
            <javadoc line="918">
                Returns the sum of squares of a data sequence.
                  That is &lt;tt&gt;Sum ( data[i]data[i] )&lt;/tt&gt;.                
            </javadoc>
            <method name="sumOfSquares" type="double" line="922">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                </params>
            </method>
            <javadoc line="925">
                Returns the trimmed mean of a sorted data sequence.                
                <param>
                    sortedData the data sequence; <b>must be sorted ascending</b>.                    
                </param>
                <param>
                    mean the mean of the (full) sorted data sequence.                    
                </param>
                <left>
                    the number of leading elements to trim.                    
                </left>
                <right>
                    the number of trailing elements to trim.                    
                </right>
            </javadoc>
            <method name="trimmedMean" type="double" line="932">
                <params>
                    <param name="sortedData" type="DoubleArrayList"/>
                    <param name="mean" type="double"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <declaration name="N" type="int" line="933"/>
                <declaration name="sortedElements" type="double[]" line="936"/>
                <declaration name="N0" type="int" line="937"/>
            </method>
            <javadoc line="942">
                Returns the variance from a standard deviation.                
            </javadoc>
            <method name="variance" type="double" line="945">
                <params>
                    <param name="standardDeviation" type="double"/>
                </params>
            </method>
            <javadoc line="948">
                Returns the variance of a data sequence.
                  That is &lt;tt&gt;(sumOfSquares - meansum) / size&lt;/tt&gt; with &lt;tt&gt;mean = sum/size&lt;/tt&gt;.                
                <param>
                    size the number of elements of the data sequence.                    
                </param>
                <param>
                    sum <tt>== Sum( data[i] )</tt>.                    
                </param>
                <param>
                    sumOfSquares <tt>== Sum( data[i]data[i] )</tt>.                    
                </param>
            </javadoc>
            <method name="variance" type="double" line="955">
                <params>
                    <param name="size" type="int"/>
                    <param name="sum" type="double"/>
                    <param name="sumOfSquares" type="double"/>
                </params>
                <declaration name="mean" type="double" line="956"/>
            </method>
            <javadoc line="959">
                Returns the weighted mean of a data sequence.
                  That is &lt;tt&gt; Sum (data[i]  weights[i]) / Sum ( weights[i] )&lt;/tt&gt;.                
            </javadoc>
            <method name="weightedMean" type="double" line="963">
                <params>
                    <param name="data" type="DoubleArrayList"/>
                    <param name="weights" type="DoubleArrayList"/>
                </params>
                <declaration name="size" type="int" line="964"/>
                <declaration name="elements" type="double[]" line="966"/>
                <declaration name="theWeights" type="double[]" line="967"/>
                <declaration name="sum" type="double" line="968"/>
                <declaration name="weightsSum" type="double" line="969"/>
                <scope line="970">
                    <declaration name="w" type="double" line="971"/>
                </scope>
            </method>
            <javadoc line="977">
                Returns the weighted RMS (Root-Mean-Square) of a data sequence.
                  That is &lt;tt&gt;Sum( data[i]  data[i]  weights[i]) / Sum( data[i]  weights[i] )&lt;/tt&gt;,
                  or in other words &lt;tt&gt;sumOfProducts / sumOfSquaredProducts&lt;/tt&gt;.                
                <param>
                    sumOfProducts <tt>== Sum( data[i]  weights[i] )</tt>.                    
                </param>
                <param>
                    sumOfSquaredProducts <tt>== Sum( data[i]  data[i]  weights[i] )</tt>.                    
                </param>
            </javadoc>
            <method name="weightedRMS" type="double" line="984">
                <params>
                    <param name="sumOfProducts" type="double"/>
                    <param name="sumOfSquaredProducts" type="double"/>
                </params>
            </method>
            <javadoc line="987">
                Returns the winsorized mean of a sorted data sequence.                
                <param>
                    sortedData the data sequence; <b>must be sorted ascending</b>.                    
                </param>
                <param>
                    mean the mean of the (full) sorted data sequence.                    
                </param>
                <left>
                    the number of leading elements to trim.                    
                </left>
                <right>
                    the number of trailing elements to trim.                    
                </right>
            </javadoc>
            <method name="winsorizedMean" type="double" line="994">
                <params>
                    <param name="sortedData" type="DoubleArrayList"/>
                    <param name="mean" type="double"/>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                </params>
                <declaration name="N" type="int" line="995"/>
                <declaration name="sortedElements" type="double[]" line="998"/>
                <declaration name="leftElement" type="double" line="999"/>
                <declaration name="rightElement" type="double" line="1001"/>
            </method>
        </class>
    </source>