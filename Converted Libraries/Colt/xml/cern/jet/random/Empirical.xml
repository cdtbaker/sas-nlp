<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="Empirical" line="3">
            <extends class="AbstractContinousDistribution"/>
            <javadoc line="3">
                Empirical distribution.
                  &lt;p&gt;
                  The probability distribution function (pdf) must be provided by the user as an array of positive real numbers. 
                  The pdf does not need to be provided in the form of relative probabilities, absolute probabilities are also accepted.
                  &lt;p&gt;
                  If &lt;tt&gt;interpolationType == LINEAR_INTERPOLATION&lt;/tt&gt; a linear interpolation within the bin is computed, resulting in a constant density within each bin.
                  &lt;dt&gt;
                  If &lt;tt&gt;interpolationType == NO_INTERPOLATION&lt;/tt&gt; no interpolation is performed and the result is a discrete distribution.  
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  A uniform random number is generated using a user supplied generator.
                  The uniform number is then transformed to the user&apos;s distribution using the cumulative probability distribution constructed from the pdf.
                  The cumulative distribution is inverted using a binary search for the nearest bin boundary. 
                  &lt;p&gt;
                  This is a port of &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandGeneral.html&quot;&gt;RandGeneral&lt;/A&gt; used in &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep&quot;&gt;CLHEP 1.4.0&lt;/A&gt; (C++).                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="cdf" type="double[]" line="27"/>
            <declaration name="interpolationType" type="int" line="28"/>
            <declaration name="LINEAR_INTERPOLATION" type="int" line="29"/>
            <declaration name="NO_INTERPOLATION" type="int" line="30"/>
            <javadoc line="31">
                Constructs an Empirical distribution.
                  The probability distribution function (pdf) is an array of positive real numbers. 
                  It need not be provided in the form of relative probabilities, absolute probabilities are also accepted.
                  The &lt;tt&gt;pdf&lt;/tt&gt; must satisfy both of the following conditions
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;0.0 &amp;lt;= pdf[i] : 0&amp;lt;=i&amp;lt;=pdf.length-1&lt;/tt&gt;
                  &lt;li&gt;&lt;tt&gt;0.0 &amp;lt; Sum(pdf[i]) : 0&amp;lt;=i&amp;lt;=pdf.length-1&lt;/tt&gt;
                  &lt;/ul&gt;                
                <param>
                    pdf the probability distribution function.                    
                </param>
                <param>
                    interpolationType can be either <tt>Empirical.NO_INTERPOLATION</tt> or <tt>Empirical.LINEAR_INTERPOLATION</tt>.                    
                </param>
                <param>
                    randomGenerator a uniform random number generator.                    
                </param>
                <throws>
                    IllegalArgumentException if at least one of the three conditions above is violated.                    
                </throws>
            </javadoc>
            <method name="Empirical" type="constructor" line="45">
                <params>
                    <param name="pdf" type="double[]"/>
                    <param name="interpolationType" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="49">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="52">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                Returns a deep copy of the receiver; the copy will produce identical sequences.
                  After this call has returned, the copy and the receiver have equal but separate state.                
                <return>
                    a copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="62">
                <declaration name="copy" type="Empirical" line="63"/>
            </method>
            <javadoc line="67">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="70">
                <declaration name="rand" type="double" line="71"/>
                <declaration name="nBins" type="int" line="73"/>
                <declaration name="nbelow" type="int" line="74"/>
                <declaration name="nabove" type="int" line="75"/>
                <scope line="76">
                    <declaration name="middle" type="int" line="77"/>
                </scope>
                <scope line="81"/>
                <scope line="84">
                    <declaration name="binMeasure" type="double" line="85"/>
                    <scope line="86"/>
                    <declaration name="binFraction" type="double" line="89"/>
                </scope>
            </method>
            <javadoc line="94">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="97">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="100">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="103">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="107">
                Sets the distribution parameters.
                  The &lt;tt&gt;pdf&lt;/tt&gt; must satisfy both of the following conditions
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;0.0 &amp;lt;= pdf[i] : 0 &amp;lt; =i &amp;lt;= pdf.length-1&lt;/tt&gt;
                  &lt;li&gt;&lt;tt&gt;0.0 &amp;lt; Sum(pdf[i]) : 0 &amp;lt;=i &amp;lt;= pdf.length-1&lt;/tt&gt;
                  &lt;/ul&gt;                
                <param>
                    pdf probability distribution function.                    
                </param>
                <param>
                    interpolationType can be either <tt>Empirical.NO_INTERPOLATION</tt> or <tt>Empirical.LINEAR_INTERPOLATION</tt>.                    
                </param>
                <throws>
                    IllegalArgumentException if at least one of the three conditions above is violated.                    
                </throws>
            </javadoc>
            <method name="setState" type="void" line="118">
                <params>
                    <param name="pdf" type="double[]"/>
                    <param name="interpolationType" type="int"/>
                </params>
                <scope line="119"/>
                <scope line="123"/>
                <declaration name="nBins" type="int" line="127"/>
                <scope line="130">
                    <declaration name="prob" type="double" line="131"/>
                </scope>
                <scope line="136"/>
            </method>
            <javadoc line="140">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="143">
                <declaration name="interpolation" type="String" line="144"/>
            </method>
            <javadoc line="149">
                Not yet commented.                
                <return>
                    int                    
                </return>
            </javadoc>
            <method name="xnBins" type="int" line="153"/>
        </class>
    </source>