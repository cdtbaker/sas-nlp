<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.sampling">
        <import package="cern.colt.list.BooleanArrayList"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="RandomSamplingAssistant" line="4">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="4">
                Conveniently computes a stable &lt;i&gt;Simple Random Sample Without Replacement (SRSWOR)&lt;/i&gt; subsequence of &lt;tt&gt;n&lt;/tt&gt; elements from a given input sequence of &lt;tt&gt;N&lt;/tt&gt; elements;
                  Example: Computing a sublist of &lt;tt&gt;n=3&lt;/tt&gt; random elements from a list &lt;tt&gt;(1,...,50)&lt;/tt&gt; may yield the sublist &lt;tt&gt;(7,13,47)&lt;/tt&gt;.
                  The subsequence is guaranteed to be &lt;i&gt;stable&lt;/i&gt;, i.e. elements never change position relative to each other.
                  Each element from the &lt;tt&gt;N&lt;/tt&gt; elements has the same probability to be included in the &lt;tt&gt;n&lt;/tt&gt; chosen elements.
                  This class is a convenience adapter for &lt;tt&gt;RandomSampler&lt;/tt&gt; using blocks.                
                <see>
                    RandomSampler                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 02/05/99                    
                </version>
            </javadoc>
            <declaration name="sampler" type="RandomSampler" line="15"/>
            <declaration name="buffer" type="long[]" line="16"/>
            <declaration name="bufferPosition" type="int" line="17"/>
            <declaration name="skip" type="long" line="18"/>
            <declaration name="n" type="long" line="19"/>
            <declaration name="MAX_BUFFER_SIZE" type="int" line="20"/>
            <javadoc line="21">
                Constructs a random sampler that samples &lt;tt&gt;n&lt;/tt&gt; random elements from an input sequence of &lt;tt&gt;N&lt;/tt&gt; elements.                
                <param>
                    n the total number of elements to choose (must be &gt;= 0).                    
                </param>
                <param>
                    N number of elements to choose from (must be &gt;= n).                    
                </param>
                <param>
                    randomGenerator a random number generator. Set this parameter to <tt>null</tt> to use the default random number generator.                    
                </param>
            </javadoc>
            <method name="RandomSamplingAssistant" type="constructor" line="27">
                <params>
                    <param name="n" type="long"/>
                    <param name="N" type="long"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="34">
                Returns a deep copy of the receiver.                
            </javadoc>
            <method name="clone" type="Object" line="37">
                <declaration name="copy" type="RandomSamplingAssistant" line="38"/>
            </method>
            <javadoc line="42">
                Not yet commented.                
            </javadoc>
            <method name="fetchNextBlock" type="void" line="45">
                <scope line="46">
                    <declaration name="last" type="long" line="47"/>
                </scope>
            </method>
            <javadoc line="53">
                Returns the used random generator.                
            </javadoc>
            <method name="getRandomGenerator" type="RandomEngine" line="56"/>
            <javadoc line="59">
                Tests random sampling.                
            </javadoc>
            <method name="main" type="void" line="62">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="n" type="long" line="63"/>
                <declaration name="N" type="long" line="64"/>
            </method>
            <javadoc line="67">
                Just shows how this class can be used; samples n elements from and int[] array.                
            </javadoc>
            <method name="sampleArray" type="int[]" line="70">
                <params>
                    <param name="n" type="int"/>
                    <param name="elements" type="int[]"/>
                </params>
                <declaration name="assistant" type="RandomSamplingAssistant" line="71"/>
                <declaration name="sample" type="int[]" line="72"/>
                <declaration name="j" type="int" line="73"/>
                <declaration name="length" type="int" line="74"/>
                <scope line="75"/>
            </method>
            <javadoc line="80">
                Returns whether the next element of the input sequence shall be sampled (picked) or not.                
                <return>
                    <tt>true</tt> if the next element shall be sampled (picked), <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="sampleNextElement" type="boolean" line="84">
                <scope line="88"/>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                Tests the methods of this class.
                  To do benchmarking, comment the lines printing stuff to the console.                
            </javadoc>
            <method name="test" type="void" line="101">
                <params>
                    <param name="n" type="long"/>
                    <param name="N" type="long"/>
                </params>
                <declaration name="assistant" type="RandomSamplingAssistant" line="102"/>
                <declaration name="sample" type="cern.colt.list.LongArrayList" line="103"/>
                <declaration name="timer" type="cern.colt.Timer" line="104"/>
                <scope line="105">
                    <scope line="106"/>
                </scope>
            </method>
            <javadoc line="114">
                Tests the methods of this class.
                  To do benchmarking, comment the lines printing stuff to the console.                
            </javadoc>
            <method name="testArraySampling" type="void" line="118">
                <params>
                    <param name="n" type="int"/>
                    <param name="N" type="int"/>
                </params>
                <declaration name="elements" type="int[]" line="119"/>
                <declaration name="timer" type="cern.colt.Timer" line="121"/>
                <declaration name="sample" type="int[]" line="122"/>
            </method>
            <javadoc line="126">
                Returns whether the next elements of the input sequence shall be sampled (picked) or not.
                  one is chosen from the first block, one from the second, ..., one from the last block.                
                <param>
                    acceptList a bitvector which will be filled with <tt>true</tt> where sampling shall occur and <tt>false</tt> where it shall not occur.                    
                </param>
            </javadoc>
            <method name="xsampleNextElements" type="void" line="131">
                <params>
                    <param name="acceptList" type="BooleanArrayList"/>
                </params>
                <declaration name="length" type="int" line="132"/>
                <declaration name="accept" type="boolean[]" line="133"/>
                <scope line="134">
                    <scope line="135"/>
                    <scope line="139"/>
                    <scope line="144"/>
                    <scope line="148"/>
                </scope>
            </method>
        </class>
    </source>