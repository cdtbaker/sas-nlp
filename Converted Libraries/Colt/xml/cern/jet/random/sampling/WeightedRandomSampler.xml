<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.sampling">
        <import package="cern.colt.list.BooleanArrayList"/>
        <import package="cern.jet.random.Uniform"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="WeightedRandomSampler" line="5">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="5">
                Conveniently computes a stable subsequence of elements from a given input sequence;
                  Picks (samples) exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
                  For example, if weight==2 (a block is 2 elements), and the input is 52=10 elements long, then picks 5 random elements from the 10 elements such that
                  one element is randomly picked from the first block, one element from the second block, ..., one element from the last block.
                  weight == 1.0 --&gt; all elements are picked (sampled). weight == 10.0 --&gt; Picks one random element from successive blocks of 10 elements each. Etc.
                  The subsequence is guaranteed to be &lt;i&gt;stable&lt;/i&gt;, i.e. elements never change position relative to each other.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 02/05/99                    
                </version>
            </javadoc>
            <declaration name="skip" type="int" line="16"/>
            <declaration name="nextTriggerPos" type="int" line="17"/>
            <declaration name="nextSkip" type="int" line="18"/>
            <declaration name="weight" type="int" line="19"/>
            <declaration name="generator" type="Uniform" line="20"/>
            <declaration name="UNDEFINED" type="int" line="21"/>
            <javadoc line="22">
                Calls &lt;tt&gt;BlockedRandomSampler(1,null)&lt;/tt&gt;.                
            </javadoc>
            <method name="WeightedRandomSampler" type="constructor" line="25"/>
            <javadoc line="28">
                Chooses exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
                  For example, if weight==2, and the input is 52=10 elements long, then chooses 5 random elements from the 10 elements such that
                  one is chosen from the first block, one from the second, ..., one from the last block.
                  weight == 1.0 --&gt; all elements are consumed (sampled). 10.0 --&gt; Consumes one random element from successive blocks of 10 elements each. Etc.                
                <param>
                    weight the weight.                    
                </param>
                <param>
                    randomGenerator a random number generator. Set this parameter to <tt>null</tt> to use the default random number generator.                    
                </param>
            </javadoc>
            <method name="WeightedRandomSampler" type="constructor" line="36">
                <params>
                    <param name="weight" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="41">
                Returns a deep copy of the receiver.                
            </javadoc>
            <method name="clone" type="Object" line="44">
                <declaration name="copy" type="WeightedRandomSampler" line="45"/>
            </method>
            <javadoc line="49">
                Not yet commented.                
                <param>
                    weight int                    
                </param>
            </javadoc>
            <method name="getWeight" type="int" line="53"/>
            <javadoc line="56">
                Chooses exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
                  For example, if weight==2, and the input is 52=10 elements long, then chooses 5 random elements from the 10 elements such that
                  one is chosen from the first block, one from the second, ..., one from the last block.                
                <return>
                    <tt>true</tt> if the next element shall be sampled (picked), <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="sampleNextElement" type="boolean" line="62">
                <scope line="63"/>
                <scope line="67"/>
                <scope line="72"/>
            </method>
            <javadoc line="80">
                Not yet commented.                
                <param>
                    weight int                    
                </param>
            </javadoc>
            <method name="setWeight" type="void" line="84">
                <params>
                    <param name="weight" type="int"/>
                </params>
            </method>
            <javadoc line="91">
                Not yet commented.                
            </javadoc>
            <method name="test" type="void" line="94">
                <params>
                    <param name="weight" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <declaration name="sampler" type="WeightedRandomSampler" line="95"/>
                <declaration name="sample" type="cern.colt.list.IntArrayList" line="97"/>
                <scope line="98"/>
            </method>
            <javadoc line="103">
                Chooses exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
                  For example, if weight==2, and the input is 52=10 elements long, then chooses 5 random elements from the 10 elements such that
                  one is chosen from the first block, one from the second, ..., one from the last block.                
                <param>
                    acceptList a bitvector which will be filled with <tt>true</tt> where sampling shall occur and <tt>false</tt> where it shall not occur.                    
                </param>
            </javadoc>
            <method name="xsampleNextElements" type="void" line="109">
                <params>
                    <param name="acceptList" type="BooleanArrayList"/>
                </params>
                <declaration name="length" type="int" line="110"/>
                <declaration name="accept" type="boolean[]" line="111"/>
                <scope line="112">
                    <scope line="113"/>
                    <scope line="118"/>
                    <scope line="123"/>
                </scope>
            </method>
        </class>
    </source>