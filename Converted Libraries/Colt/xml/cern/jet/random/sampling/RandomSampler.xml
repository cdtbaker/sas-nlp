<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.sampling">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="RandomSampler" line="12">
            <extends class="cern.colt.PersistentObject"/>
            <comment line="111">
                public class RandomSampler extends Object implements java.io.Serializable {                
            </comment>
            <comment line="116">
                static long negalphainv; // just to determine once and for all the best value for negalphainv                
            </comment>
            <javadoc line="12">
                Space and time efficiently computes a sorted &lt;i&gt;Simple Random Sample Without Replacement (SRSWOR)&lt;/i&gt;, that is, a sorted set of &lt;tt&gt;n&lt;/tt&gt; random numbers from an interval of &lt;tt&gt;N&lt;/tt&gt; numbers;
                  Example: Computing &lt;tt&gt;n=3&lt;/tt&gt; random numbers from the interval &lt;tt&gt;[1,50]&lt;/tt&gt; may yield the sorted random set &lt;tt&gt;(7,13,47)&lt;/tt&gt;.
                  Since we are talking about a set (sampling without replacement), no element will occur more than once.
                  Each number from the &lt;tt&gt;N&lt;/tt&gt; numbers has the same probability to be included in the &lt;tt&gt;n&lt;/tt&gt; chosen numbers.
                  &lt;p&gt;&lt;b&gt;Problem:&lt;/b&gt; This class solves problems including the following: &lt;i&gt;
                  Suppose we have a file containing 10^12 objects.
                  We would like to take a truly random subset of 10^6 objects and do something with it, 
                  for example, compute the sum over some instance field, or whatever.
                  How do we choose the subset? In particular, how do we avoid multiple equal elements? How do we do this quick and without consuming excessive memory? How do we avoid slowly jumping back and forth within the file? &lt;/i&gt;
                  &lt;p&gt;&lt;b&gt;Sorted Simple Random Sample Without Replacement (SRSWOR):&lt;/b&gt;
                  What are the exact semantics of this class? What is a SRSWOR? In which sense exactly is a returned set &quot;random&quot;?
                  It is random in the sense, that each number from the &lt;tt&gt;N&lt;/tt&gt; numbers has the same probability to be included in the &lt;tt&gt;n&lt;/tt&gt; chosen numbers.
                  For those who think in implementations rather than abstract interfaces:
                  &lt;i&gt;Suppose, we have an empty list.
                  We pick a random number between 1 and 10^12 and add it to the list only if it was not already picked before, i.e. if it is not already contained in the list.
                  We then do the same thing again and again until we have eventually collected 10^6 distinct numbers.
                  Now we sort the set ascending and return it.&lt;/i&gt;
                  &lt;dt&gt;It is exactly in this sense that this class returns &quot;random&quot; sets.
                  &lt;b&gt;Note, however, that the implementation of this class uses a technique orders of magnitudes better (both in time and space) than the one outlined above.&lt;/b&gt; 
                  &lt;p&gt;&lt;b&gt;Performance:&lt;/b&gt; Space requirements are zero. Running time is &lt;tt&gt;O(n)&lt;/tt&gt; on average, &lt;tt&gt;O(N)&lt;/tt&gt; in the worst case.
                  &lt;h2 align=center&gt;Performance (200Mhz Pentium Pro, JDK 1.2, NT)&lt;/h2&gt;
                  &lt;center&gt;
                  &lt;table border=&quot;1&quot;&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;n&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;N&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;Speed [seconds]&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;1.210&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20&quot;&gt;0.0014&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;7&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20&quot;&gt;0.006&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;5&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;7&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20&quot;&gt;0.7&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;9.010&lt;sup&gt;6&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;7&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20&quot;&gt;8.5&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;9.910&lt;sup&gt;6&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;7&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20&quot;&gt;2.0 (samples more than 95%)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;4&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;12&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20&quot;&gt;0.07&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;7&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;12&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20&quot;&gt;60&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/center&gt;
                  &lt;p&gt;&lt;b&gt;Scalability:&lt;/b&gt; This random sampler is designed to be scalable. In iterator style, it is able to compute and deliver sorted random sets stepwise in units called &lt;i&gt;blocks&lt;/i&gt;.
                  Example: Computing &lt;tt&gt;n=9&lt;/tt&gt; random numbers from the interval &lt;tt&gt;[1,50]&lt;/tt&gt; in 3 blocks may yield the blocks &lt;tt&gt;(7,13,14), (27,37,42), (45,46,49)&lt;/tt&gt;.
                  (The maximum of a block is guaranteed to be less than the minimum of its successor block. Every block is sorted ascending. No element will ever occur twice, both within a block and among blocks.)
                  A block can be computed and retrieved with method &lt;tt&gt;nextBlock&lt;/tt&gt;.
                  Successive calls to method &lt;tt&gt;nextBlock&lt;/tt&gt; will deliver as many random numbers as required.
                  &lt;p&gt;Computing and retrieving samples in blocks is useful if you need very many random numbers that cannot be stored in main memory at the same time.
                  For example, if you want to compute 10^10 such numbers you can do this by computing them in blocks of, say, 500 elements each.
                  You then need only space to keep one block of 500 elements (i.e. 4 KB).
                  When you are finished processing the first 500 elements you call &lt;tt&gt;nextBlock&lt;/tt&gt; to fill the next 500 elements into the block, process them, and so on.
                  If you have the time and need, by using such blocks you can compute random sets up to &lt;tt&gt;n=10^19&lt;/tt&gt; random numbers.
                  &lt;p&gt;If you do not need the block feature, you can also directly call 
                  the static methods of this class without needing to construct a &lt;tt&gt;RandomSampler&lt;/tt&gt; instance first.
                  &lt;p&gt;&lt;b&gt;Random number generation:&lt;/b&gt; By default uses &lt;tt&gt;MersenneTwister&lt;/tt&gt;, a very strong random number generator, much better than &lt;tt&gt;java.util.Random&lt;/tt&gt;.
                  You can also use other strong random number generators of Paul Houle&apos;s RngPack package.
                  For example, &lt;tt&gt;Ranecu&lt;/tt&gt;, &lt;tt&gt;Ranmar&lt;/tt&gt; and &lt;tt&gt;Ranlux&lt;/tt&gt; are strong well analyzed research grade pseudo-random number generators with known periods.
                  &lt;p&gt;&lt;b&gt;Implementation:&lt;/b&gt; after J.S. Vitter, An Efficient Algorithm for Sequential Random Sampling,
                  ACM Transactions on Mathematical Software, Vol 13, 1987.
                  Paper available &lt;A HREF=&quot;http://www.cs.duke.edu/~jsv&quot;&gt; here&lt;/A&gt;.                
                <see>
                    RandomSamplingAssistant                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.1 05/26/99                    
                </version>
            </javadoc>
            <declaration name="my_n" type="long" line="111"/>
            <declaration name="my_N" type="long" line="112"/>
            <declaration name="my_low" type="long" line="113"/>
            <declaration name="my_RandomGenerator" type="RandomEngine" line="114"/>
            <javadoc line="116">
                Constructs a random sampler that computes and delivers sorted random sets in blocks.
                  A set block can be retrieved with method &lt;tt&gt;nextBlock&lt;/tt&gt;.
                  Successive calls to method &lt;tt&gt;nextBlock&lt;/tt&gt; will deliver as many random numbers as required.                
                <param>
                    n the total number of elements to choose (must be <tt>n &gt;= 0</tt> and <tt>n &lt;= N</tt>).                    
                </param>
                <param>
                    N the interval to choose random numbers from is <tt>[low,low+N-1]</tt>.                    
                </param>
                <param>
                    low the interval to choose random numbers from is <tt>[low,low+N-1]</tt>. Hint: If <tt>low==0</tt>, then random numbers will be drawn from the interval <tt>[0,N-1]</tt>.                    
                </param>
                <param>
                    randomGenerator a random number generator. Set this parameter to <tt>null</tt> to use the default random number generator.                    
                </param>
            </javadoc>
            <method name="RandomSampler" type="constructor" line="126">
                <params>
                    <param name="n" type="long"/>
                    <param name="N" type="long"/>
                    <param name="low" type="long"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="136">
                Returns a deep copy of the receiver.                
            </javadoc>
            <method name="clone" type="Object" line="139">
                <declaration name="copy" type="RandomSampler" line="140"/>
            </method>
            <javadoc line="144">
                Tests this class.                
            </javadoc>
            <method name="main" type="void" line="147">
                <params>
                    <param name="args" type="String"/>
                </params>
                <comment line="155">
                    testNegAlphaInv(args);                    
                </comment>
                <declaration name="n" type="long" line="148"/>
                <declaration name="N" type="long" line="149"/>
                <declaration name="low" type="long" line="150"/>
                <declaration name="chunkSize" type="int" line="151"/>
                <declaration name="times" type="int" line="152"/>
            </method>
            <javadoc line="157">
                Computes the next &lt;tt&gt;count&lt;/tt&gt; random numbers of the sorted random set specified on instance construction
                  and fills them into &lt;tt&gt;values&lt;/tt&gt;, starting at index &lt;tt&gt;fromIndex&lt;/tt&gt;.
                  &lt;p&gt;Numbers are filled into the specified array starting at index &lt;tt&gt;fromIndex&lt;/tt&gt; to the right.
                  The array is returned sorted ascending in the range filled with numbers.                
                <param>
                    count the number of elements to be filled into <tt>values</tt> by this call (must be &gt;= 0).                    
                </param>
                <param>
                    values the array into which the random numbers are to be filled; must have a length <tt>&gt;= count+fromIndex</tt>.                    
                </param>
                <param>
                    fromIndex the first index within <tt>values</tt> to be filled with numbers (inclusive).                    
                </param>
            </javadoc>
            <method name="nextBlock" type="void" line="168">
                <params>
                    <param name="count" type="int"/>
                    <param name="values" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                </params>
                <comment line="172">
                    nothing to do                    
                </comment>
                <declaration name="lastSample" type="long" line="176"/>
            </method>
            <javadoc line="181">
                Efficiently computes a sorted random set of &lt;tt&gt;count&lt;/tt&gt; elements from the interval &lt;tt&gt;[low,low+N-1]&lt;/tt&gt;.
                  Since we are talking about a random set, no element will occur more than once.
                  &lt;p&gt;Running time is &lt;tt&gt;O(count)&lt;/tt&gt;, on average. Space requirements are zero.
                  &lt;p&gt;Numbers are filled into the specified array starting at index &lt;tt&gt;fromIndex&lt;/tt&gt; to the right.
                  The array is returned sorted ascending in the range filled with numbers.                
                <param>
                    n the total number of elements to choose (must be &gt;= 0).                    
                </param>
                <param>
                    N the interval to choose random numbers from is <tt>[low,low+N-1]</tt>.                    
                </param>
                <param>
                    count the number of elements to be filled into <tt>values</tt> by this call (must be &gt;= 0 and &lt;=<tt>n</tt>). Normally, you will set <tt>count=n</tt>.                    
                </param>
                <param>
                    low the interval to choose random numbers from is <tt>[low,low+N-1]</tt>. Hint: If <tt>low==0</tt>, then draws random numbers from the interval <tt>[0,N-1]</tt>.                    
                </param>
                <param>
                    values the array into which the random numbers are to be filled; must have a length <tt>&gt;= count+fromIndex</tt>.                    
                </param>
                <param>
                    fromIndex the first index within <tt>values</tt> to be filled with numbers (inclusive).                    
                </param>
                <param>
                    randomGenerator a random number generator.                    
                </param>
            </javadoc>
            <method name="rejectMethodD" type="void" line="198">
                <params>
                    <param name="n" type="long"/>
                    <param name="N" type="long"/>
                    <param name="count" type="int"/>
                    <param name="low" type="long"/>
                    <param name="values" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="199">
                    This algorithm is applicable if a large percentage (90%..100%) of N shall be sampled.
                    In such cases it is more efficient than sampleMethodA() and sampleMethodD().
                    The idea is that it is more efficient to express
                    sample(n,N,count) in terms of reject(N-n,N,count)
                    and then invert the result.
                    For example, sampling 99% turns into sampling 1% plus inversion.
                    
                    This algorithm is the same as method sampleMethodD(...) with the exception that sampled elements are rejected, and not sampled elements included in the result set.                    
                </comment>
                <comment line="208">
                    IMPORTANT !!!                    
                </comment>
                <comment line="212">
                    long threshold;                    
                </comment>
                <comment line="216">
                    tuning paramter, determines when to switch from method D to method A. Dependent on programming language, platform, etc.                    
                </comment>
                <comment line="221">
                    threshold = -negalphainv * n;                    
                </comment>
                <comment line="223">
                    &amp;&amp; threshold&lt;N) {                    
                </comment>
                <comment line="226">
                    step D2: generate U and X                    
                </comment>
                <comment line="233">
                    step D3: Accept?                    
                </comment>
                <comment line="236">
                    break inner loop                    
                </comment>
                <comment line="238">
                    step D4: Accept?                    
                </comment>
                <comment line="252">
                    accept !                    
                </comment>
                <comment line="254">
                    break inner loop                    
                </comment>
                <comment line="257">
                    end for                    
                </comment>
                <comment line="259">
                    step D5: reject the (S+1)st record !                    
                </comment>
                <comment line="260">
                    int iter = (int) (Math.min(S,count));                    
                </comment>
                <comment line="270">
                    threshold += negalphainv;                    
                </comment>
                <comment line="271">
                    end while                    
                </comment>
                <comment line="274">
                    special case n==1                    
                </comment>
                <comment line="275">
                    reject the (S+1)st record !                    
                </comment>
                <comment line="278">
                    int iter = (int) (Math.min(S,count));                    
                </comment>
                <comment line="286">
                    fill the rest                    
                </comment>
                <declaration name="nreal" type="double" line="210"/>
                <declaration name="qu1" type="long" line="211"/>
                <declaration name="S" type="long" line="213"/>
                <declaration name="chosen" type="long" line="214"/>
                <declaration name="negalphainv" type="long" line="216"/>
                <scope line="223">
                    <scope line="225">
                        <scope line="226"/>
                        <scope line="240"/>
                        <scope line="243"/>
                        <scope line="246"/>
                        <scope line="251"/>
                    </scope>
                    <declaration name="iter" type="int" line="260"/>
                </scope>
                <scope line="274">
                    <declaration name="iter" type="int" line="278"/>
                </scope>
            </method>
            <javadoc line="290">
                Efficiently computes a sorted random set of &lt;tt&gt;count&lt;/tt&gt; elements from the interval &lt;tt&gt;[low,low+N-1]&lt;/tt&gt;.
                  Since we are talking about a random set, no element will occur more than once.
                  &lt;p&gt;Running time is &lt;tt&gt;O(count)&lt;/tt&gt;, on average. Space requirements are zero.
                  &lt;p&gt;Numbers are filled into the specified array starting at index &lt;tt&gt;fromIndex&lt;/tt&gt; to the right.
                  The array is returned sorted ascending in the range filled with numbers.
                  &lt;p&gt;&lt;b&gt;Random number generation:&lt;/b&gt; By default uses &lt;tt&gt;MersenneTwister&lt;/tt&gt;, a very strong random number generator, much better than &lt;tt&gt;java.util.Random&lt;/tt&gt;.
                  You can also use other strong random number generators of Paul Houle&apos;s RngPack package.
                  For example, &lt;tt&gt;Ranecu&lt;/tt&gt;, &lt;tt&gt;Ranmar&lt;/tt&gt; and &lt;tt&gt;Ranlux&lt;/tt&gt; are strong well analyzed research grade pseudo-random number generators with known periods.                
                <param>
                    n the total number of elements to choose (must be <tt>n &gt;= 0</tt> and <tt>n &lt;= N</tt>).                    
                </param>
                <param>
                    N the interval to choose random numbers from is <tt>[low,low+N-1]</tt>.                    
                </param>
                <param>
                    count the number of elements to be filled into <tt>values</tt> by this call (must be &gt;= 0 and &lt;=<tt>n</tt>). Normally, you will set <tt>count=n</tt>.                    
                </param>
                <param>
                    low the interval to choose random numbers from is <tt>[low,low+N-1]</tt>. Hint: If <tt>low==0</tt>, then draws random numbers from the interval <tt>[0,N-1]</tt>.                    
                </param>
                <param>
                    values the array into which the random numbers are to be filled; must have a length <tt>&gt;= count+fromIndex</tt>.                    
                </param>
                <param>
                    fromIndex the first index within <tt>values</tt> to be filled with numbers (inclusive).                    
                </param>
                <param>
                    randomGenerator a random number generator. Set this parameter to <tt>null</tt> to use the default random number generator.                    
                </param>
            </javadoc>
            <method name="sample" type="void" line="311">
                <params>
                    <param name="n" type="long"/>
                    <param name="N" type="long"/>
                    <param name="count" type="int"/>
                    <param name="low" type="long"/>
                    <param name="values" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="316">
                    rare case treated quickly                    
                </comment>
                <comment line="323">
                    || Math.min(count,N-n)&gt;maxTmpMemoryAllowed) {                    
                </comment>
                <comment line="326">
                    More than 95% of all numbers shall be sampled.                    
                </comment>
                <scope line="316">
                    <declaration name="val" type="long" line="317"/>
                    <declaration name="limit" type="int" line="318"/>
                </scope>
                <scope line="323"/>
                <scope line="326"/>
            </method>
            <javadoc line="332">
                Computes a sorted random set of &lt;tt&gt;count&lt;/tt&gt; elements from the interval &lt;tt&gt;[low,low+N-1]&lt;/tt&gt;.
                  Since we are talking about a random set, no element will occur more than once.
                  &lt;p&gt;Running time is &lt;tt&gt;O(N)&lt;/tt&gt;, on average. Space requirements are zero.
                  &lt;p&gt;Numbers are filled into the specified array starting at index &lt;tt&gt;fromIndex&lt;/tt&gt; to the right.
                  The array is returned sorted ascending in the range filled with numbers.                
                <param>
                    n the total number of elements to choose (must be &gt;= 0).                    
                </param>
                <param>
                    N the interval to choose random numbers from is <tt>[low,low+N-1]</tt>.                    
                </param>
                <param>
                    count the number of elements to be filled into <tt>values</tt> by this call (must be &gt;= 0 and &lt;=<tt>n</tt>). Normally, you will set <tt>count=n</tt>.                    
                </param>
                <param>
                    low the interval to choose random numbers from is <tt>[low,low+N-1]</tt>. Hint: If <tt>low==0</tt>, then draws random numbers from the interval <tt>[0,N-1]</tt>.                    
                </param>
                <param>
                    values the array into which the random numbers are to be filled; must have a length <tt>&gt;= count+fromIndex</tt>.                    
                </param>
                <param>
                    fromIndex the first index within <tt>values</tt> to be filled with numbers (inclusive).                    
                </param>
                <param>
                    randomGenerator a random number generator.                    
                </param>
            </javadoc>
            <method name="sampleMethodA" type="void" line="349">
                <params>
                    <param name="n" type="long"/>
                    <param name="N" type="long"/>
                    <param name="count" type="int"/>
                    <param name="low" type="long"/>
                    <param name="values" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="374">
                    special case n==1                    
                </comment>
                <declaration name="V" type="double" line="350"/>
                <declaration name="S" type="long" line="351"/>
                <declaration name="chosen" type="long" line="352"/>
                <scope line="356">
                    <scope line="360"/>
                </scope>
                <scope line="373"/>
            </method>
            <javadoc line="380">
                Efficiently computes a sorted random set of &lt;tt&gt;count&lt;/tt&gt; elements from the interval &lt;tt&gt;[low,low+N-1]&lt;/tt&gt;.
                  Since we are talking about a random set, no element will occur more than once.
                  &lt;p&gt;Running time is &lt;tt&gt;O(count)&lt;/tt&gt;, on average. Space requirements are zero.
                  &lt;p&gt;Numbers are filled into the specified array starting at index &lt;tt&gt;fromIndex&lt;/tt&gt; to the right.
                  The array is returned sorted ascending in the range filled with numbers.                
                <param>
                    n the total number of elements to choose (must be &gt;= 0).                    
                </param>
                <param>
                    N the interval to choose random numbers from is <tt>[low,low+N-1]</tt>.                    
                </param>
                <param>
                    count the number of elements to be filled into <tt>values</tt> by this call (must be &gt;= 0 and &lt;=<tt>n</tt>). Normally, you will set <tt>count=n</tt>.                    
                </param>
                <param>
                    low the interval to choose random numbers from is <tt>[low,low+N-1]</tt>. Hint: If <tt>low==0</tt>, then draws random numbers from the interval <tt>[0,N-1]</tt>.                    
                </param>
                <param>
                    values the array into which the random numbers are to be filled; must have a length <tt>&gt;= count+fromIndex</tt>.                    
                </param>
                <param>
                    fromIndex the first index within <tt>values</tt> to be filled with numbers (inclusive).                    
                </param>
                <param>
                    randomGenerator a random number generator.                    
                </param>
            </javadoc>
            <method name="sampleMethodD" type="void" line="397">
                <params>
                    <param name="n" type="long"/>
                    <param name="N" type="long"/>
                    <param name="count" type="int"/>
                    <param name="low" type="long"/>
                    <param name="values" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="403">
                    tuning paramter, determines when to switch from method D to method A. Dependent on programming language, platform, etc.                    
                </comment>
                <comment line="413">
                    step D2: generate U and X                    
                </comment>
                <comment line="420">
                    step D3: Accept?                    
                </comment>
                <comment line="423">
                    break inner loop                    
                </comment>
                <comment line="425">
                    step D4: Accept?                    
                </comment>
                <comment line="439">
                    accept !                    
                </comment>
                <comment line="441">
                    break inner loop                    
                </comment>
                <comment line="444">
                    end for                    
                </comment>
                <comment line="446">
                    step D5: select the (S+1)st record !                    
                </comment>
                <comment line="449">
                    invert
                    for (int iter=0; iter&lt;S &amp;&amp; count &gt; 0; iter++) {
                    values[fromIndex++] = ++chosen;
                    count--;
                    }
                    chosen++;                    
                </comment>
                <comment line="463">
                    end while                    
                </comment>
                <comment line="467">
                    faster to use method A to finish the sampling                    
                </comment>
                <comment line="471">
                    special case n==1                    
                </comment>
                <declaration name="nreal" type="double" line="398"/>
                <declaration name="qu1" type="long" line="399"/>
                <declaration name="S" type="long" line="400"/>
                <declaration name="chosen" type="long" line="401"/>
                <declaration name="negalphainv" type="long" line="403"/>
                <scope line="410">
                    <scope line="412">
                        <scope line="413"/>
                        <scope line="427"/>
                        <scope line="430"/>
                        <scope line="433"/>
                        <scope line="438"/>
                    </scope>
                </scope>
                <scope line="466">
                    <scope line="467"/>
                    <scope line="470"/>
                </scope>
            </method>
            <javadoc line="478">
                Tests the methods of this class.
                  To do benchmarking, comment the lines printing stuff to the console.                
            </javadoc>
            <method name="test" type="void" line="482">
                <params>
                    <param name="n" type="long"/>
                    <param name="N" type="long"/>
                    <param name="low" type="long"/>
                    <param name="chunkSize" type="int"/>
                    <param name="times" type="int"/>
                </params>
                <comment line="492">
                    Log.print(&quot;Chunk #&quot;+i+&quot; = [&quot;);
                    for (int j=0; j&lt;chunkSize-1; j++) Log.print(values[j]+&quot;, &quot;);
                    Log.print(String.valueOf(values[chunkSize-1]));
                    Log.println(&quot;]&quot;);                    
                </comment>
                <comment line="502">
                    sample remaining part, if necessary                    
                </comment>
                <comment line="505">
                    Log.print(&quot;Chunk #&quot;+chunks+&quot; = [&quot;);
                    for (int j=0; j&lt;toDo-1; j++) Log.print(values[j]+&quot;, &quot;);
                    Log.print(String.valueOf(values[toDo-1]));
                    Log.println(&quot;]&quot;);                    
                </comment>
                <declaration name="values" type="long[]" line="483"/>
                <declaration name="chunks" type="long" line="484"/>
                <declaration name="timer" type="cern.colt.Timer" line="486"/>
                <scope line="487">
                    <declaration name="sampler" type="RandomSampler" line="488"/>
                    <scope line="489"/>
                    <declaration name="toDo" type="int" line="501"/>
                    <scope line="502"/>
                </scope>
            </method>
            <javadoc line="519">
                Tests different values for negaalphainv.
                  Result: J.S. Vitter&apos;s recommendation for negalphainv=-13 is also good in the JDK 1.2 environment.                
            </javadoc>
            <method name="testNegAlphaInv" type="void" line="523">
                <params>
                    <param name="args" type="String"/>
                </params>
                <comment line="524">
                    long N = Long.parseLong(args[0]);
                    int chunkSize = Integer.parseInt(args[1]);
                    
                    long[] alphas = {-104, -52, -26, -13, -8, -4, -2};
                    for (int i=0; i&lt;alphas.length; i++) {
                    negalphainv = alphas[i];
                    System.out.println(&quot;\n\nnegalphainv=&quot;+negalphainv);
                    
                    System.out.print(&quot; n=&quot;+N80+&quot; --&gt; &quot;);
                    test(N80,N,0,chunkSize);
                    
                    System.out.print(&quot; n=&quot;+N40+&quot; --&gt; &quot;);
                    test(N40,N,0,chunkSize);
                    
                    System.out.print(&quot; n=&quot;+N20+&quot; --&gt; &quot;);
                    test(N20,N,0,chunkSize);
                    
                    System.out.print(&quot; n=&quot;+N10+&quot; --&gt; &quot;);
                    test(N10,N,0,chunkSize);
                    
                    System.out.print(&quot; n=&quot;+N5+&quot; --&gt; &quot;);
                    test(N5,N,0,chunkSize);
                    
                    System.out.print(&quot; n=&quot;+N2+&quot; --&gt; &quot;);
                    test(N2,N,0,chunkSize);
                    
                    System.out.print(&quot; n=&quot;+(N-3)+&quot; --&gt; &quot;);
                    test(N-3,N,0,chunkSize);
                    }                    
                </comment>
            </method>
        </class>
    </source>