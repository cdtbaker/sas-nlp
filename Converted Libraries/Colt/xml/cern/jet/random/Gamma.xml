<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="Gamma" line="4">
            <extends class="AbstractContinousDistribution"/>
            <javadoc line="4">
                Gamma distribution; &lt;A HREF=&quot;http://wwwinfo.cern.ch/asdoc/shortwrupsdir/g106/top.html&quot;&gt; math definition&lt;/A&gt;,
                  &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node96.html#SECTION000960000000000000000&quot;&gt; definition of gamma function&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosf.html#Gamma Distribution&quot;&gt; animated definition&lt;/A&gt;. 
                  &lt;p&gt;
                  &lt;tt&gt;p(x) = k  x^(alpha-1)  e^(-x/beta)&lt;/tt&gt; with &lt;tt&gt;k = 1/(g(alpha)  b^a))&lt;/tt&gt; and &lt;tt&gt;g(a)&lt;/tt&gt; being the gamma function.
                  &lt;p&gt;
                  Valid parameter ranges: &lt;tt&gt;alpha &amp;gt; 0&lt;/tt&gt;.
                  &lt;p&gt;
                  Note: For a Gamma distribution to have the mean &lt;tt&gt;mean&lt;/tt&gt; and variance &lt;tt&gt;variance&lt;/tt&gt;, set the parameters as follows:
                  &lt;pre&gt;
                  alpha = meanmean / variance; lambda = 1 / (variance / mean); 
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; 
                  &lt;dt&gt;
                  Method: Acceptance Rejection combined with Acceptance Complement.
                  &lt;dt&gt;
                  High performance implementation. This is a port of &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandGamma.html&quot;&gt;RandGamma&lt;/A&gt; used in &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep&quot;&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
                  CLHEP&apos;s implementation, in turn, is based on &lt;tt&gt;gds.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  J.H. Ahrens, U. Dieter (1974): Computer methods for sampling from gamma, beta, Poisson and binomial distributions, 
                  Computing 12, 223-246.
                  &lt;p&gt;
                  and
                  &lt;p&gt;
                  J.H. Ahrens, U. Dieter (1982): Generating gamma variates by a modified rejection technique,
                  Communications of the ACM 25, 47-54.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="alpha" type="double" line="41"/>
            <declaration name="lambda" type="double" line="42"/>
            <declaration name="shared" type="Gamma" line="43"/>
            <javadoc line="44">
                Constructs a Gamma distribution.
                  Example: alpha=1.0, lambda=1.0.                
                <throws>
                    IllegalArgumentException if <tt>alpha &lt;= 0.0 || lambda &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="Gamma" type="constructor" line="49">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="lambda" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="53">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="56">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="59">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="62"/>
            <javadoc line="65">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextDouble" type="double" line="68">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="lambda" type="double"/>
                </params>
                <declaration name="a" type="double" line="69"/>
                <declaration name="aa" type="double" line="70"/>
                <declaration name="gds" type="double" line="71"/>
                <declaration name="v1" type="double" line="72"/>
                <scope line="75">
                    <scope line="77">
                        <scope line="79"/>
                        <scope line="83"/>
                    </scope>
                </scope>
                <scope line="89">
                    <scope line="90"/>
                    <scope line="96"/>
                    <scope line="108">
                        <scope line="112">
                            <scope line="113"/>
                            <scope line="118"/>
                        </scope>
                        <scope line="124"/>
                    </scope>
                    <scope line="130">
                        <scope line="132"/>
                        <scope line="135"/>
                    </scope>
                    <scope line="140">
                        <scope line="141"/>
                        <scope line="150"/>
                        <scope line="153"/>
                        <scope line="157"/>
                        <scope line="160"/>
                        <scope line="163"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="170">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="173">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="175"/>
            </method>
            <javadoc line="182">
                Sets the mean and variance.                
                <throws>
                    IllegalArgumentException if <tt>alpha &lt;= 0.0 || lambda &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="setState" type="void" line="186">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="lambda" type="double"/>
                </params>
            </method>
            <javadoc line="192">
                Returns a random number from the distribution.                
                <throws>
                    IllegalArgumentException if <tt>alpha &lt;= 0.0 || lambda &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="staticNextDouble" type="double" line="196">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="lambda" type="double"/>
                </params>
                <scope line="197"/>
            </method>
            <javadoc line="201">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="204"/>
            <javadoc line="207">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="211">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="212"/>
            </method>
        </class>
    </source>