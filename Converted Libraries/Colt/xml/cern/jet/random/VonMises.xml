<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="VonMises" line="3">
            <extends class="AbstractContinousDistribution"/>
            <javadoc line="3">
                Von Mises distribution.
                  &lt;p&gt;
                  Valid parameter ranges: &lt;tt&gt;k &amp;gt; 0&lt;/tt&gt;.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; 
                  &lt;dt&gt;
                  Method: Acceptance Rejection.
                  &lt;dt&gt;
                  This is a port of &lt;tt&gt;mwc.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  D.J. Best, N.I. Fisher (1979): Efficient simulation of the von Mises distribution, Appl. Statist. 28, 152-157.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="my_k" type="double" line="24"/>
            <declaration name="k_set" type="double" line="25"/>
            <declaration name="tau" type="double" line="26"/>
            <declaration name="shared" type="VonMises" line="27"/>
            <javadoc line="28">
                Constructs a Von Mises distribution.
                  Example: k=1.0.                
                <throws>
                    IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="VonMises" type="constructor" line="33">
                <params>
                    <param name="freedom" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="37">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="40"/>
            <javadoc line="43">
                Returns a random number from the distribution; bypasses the internal state.                
                <throws>
                    IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="nextDouble" type="double" line="47">
                <params>
                    <param name="k" type="double"/>
                </params>
                <declaration name="u" type="double" line="48"/>
                <scope line="50"/>
                <scope line="56"/>
            </method>
            <javadoc line="66">
                Sets the distribution parameter.                
                <throws>
                    IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="setState" type="void" line="70">
                <params>
                    <param name="k" type="double"/>
                </params>
            </method>
            <javadoc line="74">
                Returns a random number from the distribution.                
                <throws>
                    IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="staticNextDouble" type="double" line="78">
                <params>
                    <param name="freedom" type="double"/>
                </params>
                <scope line="79"/>
            </method>
            <javadoc line="83">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="86"/>
            <javadoc line="89">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="93">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="94"/>
            </method>
        </class>
    </source>