<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="VonMises" line="12">
            <extends class="AbstractContinousDistribution"/>
            <comment line="37">
                cached vars for method nextDouble(a) (for performance only)                
            </comment>
            <comment line="41">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="12">
                Von Mises distribution.
                  &lt;p&gt;
                  Valid parameter ranges: &lt;tt&gt;k &amp;gt; 0&lt;/tt&gt;.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; 
                  &lt;dt&gt;
                  Method: Acceptance Rejection.
                  &lt;dt&gt;
                  This is a port of &lt;tt&gt;mwc.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  D.J. Best, N.I. Fisher (1979): Efficient simulation of the von Mises distribution, Appl. Statist. 28, 152-157.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="my_k" type="double" line="34"/>
            <declaration name="k_set" type="double" line="37"/>
            <declaration name="tau" type="double" line="38"/>
            <declaration name="shared" type="VonMises" line="41"/>
            <javadoc line="42">
                Constructs a Von Mises distribution.
                  Example: k=1.0.                
                <throws>
                    IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="VonMises" type="constructor" line="47">
                <params>
                    <param name="freedom" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="51">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="54"/>
            <javadoc line="57">
                Returns a random number from the distribution; bypasses the internal state.                
                <throws>
                    IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="nextDouble" type="double" line="61">
                <params>
                    <param name="k" type="double"/>
                </params>
                <comment line="63">
                    Von Mises Distribution - Acceptance Rejection          
                                                                                    
                    
                                                                                    
                     FUNCTION :  - mwc samples a random number from the von Mises   
                                   distribution ( -Pi &lt;= x &lt;= Pi) with parameter    
                                   k &gt; 0  via  rejection from the wrapped Cauchy    
                                   distibution.                                     
                     REFERENCE:  - D.J. Best, N.I. Fisher (1979): Efficient         
                                   simulation of the von Mises distribution,        
                                   Appl. Statist. 28, 152-157.                      
                     SUBPROGRAM: - drand(seed) ... (0,1)-Uniform generator with     
                                   unsigned long integer seed.                     
                                                                                    
                     Implemented by F. Niederl, August 1992                    
                </comment>
                <comment line="85">
                    SET-UP                    
                </comment>
                <comment line="92">
                    GENERATOR                    
                </comment>
                <comment line="94">
                    U(0/1)                    
                </comment>
                <comment line="95">
                    U(0/1)                    
                </comment>
                <comment line="99">
                    Acceptance/Rejection                    
                </comment>
                <comment line="101">
                    Random sign //                    
                </comment>
                <comment line="102">
                    0 &lt;= x &lt;= Pi : -Pi &lt;= x &lt;= 0 //                    
                </comment>
                <declaration name="u" type="double" line="80"/>
                <scope line="84"/>
                <scope line="92"/>
            </method>
            <javadoc line="103">
                Sets the distribution parameter.                
                <throws>
                    IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="setState" type="void" line="107">
                <params>
                    <param name="k" type="double"/>
                </params>
            </method>
            <javadoc line="111">
                Returns a random number from the distribution.                
                <throws>
                    IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="staticNextDouble" type="double" line="115">
                <params>
                    <param name="freedom" type="double"/>
                </params>
                <scope line="116"/>
            </method>
            <javadoc line="120">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="123"/>
            <javadoc line="126">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="130">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="131"/>
            </method>
        </class>
    </source>