<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="Normal" line="4">
            <extends class="AbstractContinousDistribution"/>
            <javadoc line="4">
                Normal (aka Gaussian) distribution; See the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node188.html#SECTION0001880000000000000000&quot;&gt; math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosn.html#Normal Distribution&quot;&gt; animated definition&lt;/A&gt;.
                  &lt;pre&gt;                       
                  1                       2
                  pdf(x) = ---------    exp( - (x-mean) / 2v ) 
                  sqrt(2piv)
                  x
                  -
                  1        | |                 2
                  cdf(x) = ---------    |    exp( - (t-mean) / 2v ) dt
                  sqrt(2piv)| |
                  -
                  -inf.
                  &lt;/pre&gt;
                  where &lt;tt&gt;v = variance = standardDeviation^2&lt;/tt&gt;.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Polar Box-Muller transformation. See 
                  G.E.P. Box, M.E. Muller (1958): A note on the generation of random normal deviates, Annals Math. Statist. 29, 610-611.
                  &lt;p&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="mean" type="double" line="32"/>
            <declaration name="variance" type="double" line="33"/>
            <declaration name="standardDeviation" type="double" line="34"/>
            <declaration name="cache" type="double" line="35"/>
            <declaration name="cacheFilled" type="boolean" line="36"/>
            <declaration name="SQRT_INV" type="double" line="37"/>
            <declaration name="shared" type="Normal" line="38"/>
            <javadoc line="39">
                Constructs a normal (gauss) distribution.
                  Example: mean=0.0, standardDeviation=1.0.                
            </javadoc>
            <method name="Normal" type="constructor" line="43">
                <params>
                    <param name="mean" type="double"/>
                    <param name="standardDeviation" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="47">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="50">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="53">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="56"/>
            <javadoc line="59">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextDouble" type="double" line="62">
                <params>
                    <param name="mean" type="double"/>
                    <param name="standardDeviation" type="double"/>
                </params>
                <scope line="63"/>
                <declaration name="x" type="double" line="68"/>
                <scope line="69"/>
            </method>
            <javadoc line="80">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="83">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="diff" type="double" line="84"/>
            </method>
            <javadoc line="87">
                Sets the uniform random generator internally used.                
            </javadoc>
            <method name="setRandomGenerator" type="void" line="90">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="94">
                Sets the mean and variance.                
            </javadoc>
            <method name="setState" type="void" line="97">
                <params>
                    <param name="mean" type="double"/>
                    <param name="standardDeviation" type="double"/>
                </params>
                <scope line="98"/>
            </method>
            <javadoc line="106">
                Returns a random number from the distribution with the given mean and standard deviation.                
            </javadoc>
            <method name="staticNextDouble" type="double" line="109">
                <params>
                    <param name="mean" type="double"/>
                    <param name="standardDeviation" type="double"/>
                </params>
                <scope line="110"/>
            </method>
            <javadoc line="114">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="117"/>
            <javadoc line="120">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="124">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="125"/>
            </method>
        </class>
    </source>