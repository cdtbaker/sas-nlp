<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.math.Arithmetic"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="Binomial" line="14">
            <extends class="AbstractDiscreteDistribution"/>
            <comment line="37">
                cache vars for method generateBinomial(...)                
            </comment>
            <comment line="43">
                cache vars for method pdf(...)                
            </comment>
            <comment line="46">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="14">
                Binomial distribution; See the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node19.html#SECTION000190000000000000000&quot;&gt; math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosb.html#Binomial Distribution&quot;&gt; animated definition&lt;/A&gt;.
                  &lt;p&gt;
                  &lt;tt&gt;p(x) = k  p^k  (1-p)^(n-k)&lt;/tt&gt; with &lt;tt&gt;k = n! / (k!  (n-k)!)&lt;/tt&gt;.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation. Acceptance Rejection/Inversion method. 
                  This is a port of &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandBinomial.html&quot;&gt;RandBinomial&lt;/A&gt; used in &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep&quot;&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
                  CLHEP&apos;s implementation is, in turn, based on 
                  &lt;p&gt;V. Kachitvichyanukul, B.W. Schmeiser (1988): Binomial random variate generation, Communications of the ACM 31, 216-222.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="n" type="int" line="33"/>
            <declaration name="p" type="double" line="34"/>
            <declaration name="n_last" type="int" line="37"/>
            <declaration name="par" type="double" line="38"/>
            <declaration name="b" type="int" line="39"/>
            <declaration name="pq" type="double" line="40"/>
            <declaration name="log_p" type="double" line="43"/>
            <declaration name="shared" type="Binomial" line="46"/>
            <javadoc line="47">
                Constructs a binomial distribution.
                  Example: n=1, p=0.5.                
                <param>
                    n the number of trials (also known as <i>sample size</i>).                    
                </param>
                <param>
                    p the probability of success.                    
                </param>
                <param>
                    randomGenerator a uniform random number generator.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>nMath.min(p,1-p) &lt;= 0.0</tt>                    
                </throws>
            </javadoc>
            <method name="Binomial" type="constructor" line="55">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="59">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="62">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdfSlow" type="double" line="68">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="sum" type="double" line="71"/>
            </method>
            <javadoc line="76">
                Binomial-Distribution - Acceptance Rejection/Inversion     
                  
                  
                  Acceptance Rejection method combined with Inversion for        
                  generating Binomial random numbers with parameters             
                  n (number of trials) and p (probability of success).           
                  For  min(np,n(1-p)) &lt; 10  the Inversion method is applied:   
                  The random numbers are generated via sequential search,        
                  starting at the lowest index k=0. The cumulative probabilities 
                  are avoided by using the technique of chop-down.               
                  For  min(np,n(1-p)) &gt;= 10  Acceptance Rejection is used:     
                  The algorithm is based on a hat-function which is uniform in   
                  the centre region and exponential in the tails.                
                  A triangular immediate acceptance region in the centre speeds  
                  up the generation of binomial variates.                        
                  If candidate k is near the mode, f(k) is computed recursively  
                  starting at the mode m.                                        
                  The acceptance test by Stirling&apos;s formula is modified          
                  according to W. Hoermann (1992): The generation of binomial    
                  random variates, to appear in J. Statist. Comput. Simul.       
                  If  p &lt; .5  the algorithm is applied to parameters n, p.       
                  Otherwise p is replaced by 1-p, and k is replaced by n - k.    
                  
                  
                  FUNCTION:    - samples a random number from the binomial       
                  distribution with parameters n and p  and is    
                  valid for  nmin(p,1-p)  &gt;  0.                  
                  REFERENCE:   - V. Kachitvichyanukul, B.W. Schmeiser (1988):    
                  Binomial random variate generation,             
                  Communications of the ACM 31, 216-222.          
                  SUBPROGRAMS: - StirlingCorrection()                            
                  ... Correction term of the Stirling 
                  approximation for log(k!)       
                  (series in 1/k or table values  
                  for small k) with long int k    
                  - randomGenerator    ... (0,1)-Uniform engine                
            </javadoc>
            <method name="generateBinomial" type="int" line="118">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
                <comment line="129">
                    set-up                    
                </comment>
                <comment line="136">
                    Check for invalid input values                    
                </comment>
                <comment line="141">
                    mode, integer                    
                </comment>
                <comment line="143">
                    Chop-down                    
                </comment>
                <comment line="148">
                    recurr. relat.                    
                </comment>
                <comment line="149">
                    variance                    
                </comment>
                <comment line="150">
                    i = p1 - 0.5                    
                </comment>
                <comment line="152">
                    limit left                    
                </comment>
                <comment line="153">
                    limit right                    
                </comment>
                <comment line="156">
                    parallelogram                    
                </comment>
                <comment line="157">
                    height                    
                </comment>
                <comment line="159">
                    probabilities                    
                </comment>
                <comment line="160">
                    of regions 1-4                    
                </comment>
                <comment line="165">
                    Inversion Chop-down                    
                </comment>
                <comment line="188">
                    triangular region                    
                </comment>
                <comment line="190">
                    immediate accept                    
                </comment>
                <comment line="192">
                    parallelogram                    
                </comment>
                <comment line="197">
                    left tail                    
                </comment>
                <comment line="202">
                    right tail                    
                </comment>
                <comment line="207">
                    acceptance test :  two cases, depending on |K - m|                    
                </comment>
                <comment line="210">
                    computation of p(K) via recurrence relationship from the mode                    
                </comment>
                <comment line="211">
                    f(m)                    
                </comment>
                <comment line="214">
                    multiply  f                    
                </comment>
                <comment line="219">
                    multiply  V                    
                </comment>
                <comment line="222">
                    acceptance test                    
                </comment>
                <comment line="226">
                    lower and upper squeeze tests, based on lower bounds for log p(K)                    
                </comment>
                <comment line="242">
                    computation of log f(K) via Stirling&apos;s formula
                     final acceptance-rejection test                    
                </comment>
                <declaration name="C1_3" type="double" line="119"/>
                <declaration name="C5_8" type="double" line="120"/>
                <declaration name="C1_6" type="double" line="121"/>
                <declaration name="DMAX_KM" type="int" line="122"/>
                <declaration name="bh" type="int" line="125"/>
                <declaration name="f" type="double" line="126"/>
                <scope line="128">
                    <scope line="141"/>
                    <scope line="146"/>
                </scope>
                <scope line="164">
                    <declaration name="pk" type="double" line="165"/>
                    <scope line="170">
                        <scope line="172"/>
                        <scope line="177"/>
                    </scope>
                </scope>
                <scope line="185">
                    <scope line="187"/>
                    <scope line="191"/>
                    <scope line="196"/>
                    <scope line="201"/>
                    <scope line="207">
                        <scope line="211">
                            <scope line="212"/>
                        </scope>
                        <scope line="216">
                            <scope line="217"/>
                        </scope>
                    </scope>
                    <scope line="223">
                        <scope line="230">
                            <scope line="231"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="251">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="254"/>
            <javadoc line="257">
                Returns a random number from the distribution with the given parameters n and p; bypasses the internal state.                
                <param>
                    n the number of trials                    
                </param>
                <param>
                    p the probability of success.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>nMath.min(p,1-p) &lt;= 0.0</tt>                    
                </throws>
            </javadoc>
            <method name="nextInt" type="int" line="263">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="267">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="270">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="r" type="int" line="272"/>
            </method>
            <javadoc line="275">
                Sets the parameters number of trials and the probability of success.                
                <param>
                    n the number of trials                    
                </param>
                <param>
                    p the probability of success.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>nMath.min(p,1-p) &lt;= 0.0</tt>                    
                </throws>
            </javadoc>
            <method name="setNandP" type="void" line="281">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="290">
                Returns a random number from the distribution with the given parameters n and p.                
                <param>
                    n the number of trials                    
                </param>
                <param>
                    p the probability of success.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>nMath.min(p,1-p) &lt;= 0.0</tt>                    
                </throws>
            </javadoc>
            <method name="staticNextInt" type="int" line="296">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="297"/>
            </method>
            <javadoc line="301">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="304"/>
            <javadoc line="307">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="311">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="312"/>
            </method>
        </class>
    </source>