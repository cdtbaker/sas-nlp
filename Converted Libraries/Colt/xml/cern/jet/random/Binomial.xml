<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.math.Arithmetic"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="Binomial" line="5">
            <extends class="AbstractDiscreteDistribution"/>
            <javadoc line="5">
                Binomial distribution; See the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node19.html#SECTION000190000000000000000&quot;&gt; math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosb.html#Binomial Distribution&quot;&gt; animated definition&lt;/A&gt;.
                  &lt;p&gt;
                  &lt;tt&gt;p(x) = k  p^k  (1-p)^(n-k)&lt;/tt&gt; with &lt;tt&gt;k = n! / (k!  (n-k)!)&lt;/tt&gt;.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation. Acceptance Rejection/Inversion method. 
                  This is a port of &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandBinomial.html&quot;&gt;RandBinomial&lt;/A&gt; used in &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep&quot;&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
                  CLHEP&apos;s implementation is, in turn, based on 
                  &lt;p&gt;V. Kachitvichyanukul, B.W. Schmeiser (1988): Binomial random variate generation, Communications of the ACM 31, 216-222.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="n" type="int" line="23"/>
            <declaration name="p" type="double" line="24"/>
            <declaration name="n_last" type="int" line="25"/>
            <declaration name="par" type="double" line="26"/>
            <declaration name="b" type="int" line="27"/>
            <declaration name="pq" type="double" line="28"/>
            <declaration name="log_p" type="double" line="29"/>
            <declaration name="shared" type="Binomial" line="30"/>
            <javadoc line="31">
                Constructs a binomial distribution.
                  Example: n=1, p=0.5.                
                <param>
                    n the number of trials (also known as <i>sample size</i>).                    
                </param>
                <param>
                    p the probability of success.                    
                </param>
                <param>
                    randomGenerator a uniform random number generator.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>nMath.min(p,1-p) &lt;= 0.0</tt>                    
                </throws>
            </javadoc>
            <method name="Binomial" type="constructor" line="39">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="43">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="46">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="49">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdfSlow" type="double" line="52">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="sum" type="double" line="54"/>
            </method>
            <javadoc line="58">
                Binomial-Distribution - Acceptance Rejection/Inversion     
                  
                  
                  Acceptance Rejection method combined with Inversion for        
                  generating Binomial random numbers with parameters             
                  n (number of trials) and p (probability of success).           
                  For  min(np,n(1-p)) &lt; 10  the Inversion method is applied:   
                  The random numbers are generated via sequential search,        
                  starting at the lowest index k=0. The cumulative probabilities 
                  are avoided by using the technique of chop-down.               
                  For  min(np,n(1-p)) &gt;= 10  Acceptance Rejection is used:     
                  The algorithm is based on a hat-function which is uniform in   
                  the centre region and exponential in the tails.                
                  A triangular immediate acceptance region in the centre speeds  
                  up the generation of binomial variates.                        
                  If candidate k is near the mode, f(k) is computed recursively  
                  starting at the mode m.                                        
                  The acceptance test by Stirling&apos;s formula is modified          
                  according to W. Hoermann (1992): The generation of binomial    
                  random variates, to appear in J. Statist. Comput. Simul.       
                  If  p &lt; .5  the algorithm is applied to parameters n, p.       
                  Otherwise p is replaced by 1-p, and k is replaced by n - k.    
                  
                  
                  FUNCTION:    - samples a random number from the binomial       
                  distribution with parameters n and p  and is    
                  valid for  nmin(p,1-p)  &gt;  0.                  
                  REFERENCE:   - V. Kachitvichyanukul, B.W. Schmeiser (1988):    
                  Binomial random variate generation,             
                  Communications of the ACM 31, 216-222.          
                  SUBPROGRAMS: - StirlingCorrection()                            
                  ... Correction term of the Stirling 
                  approximation for log(k!)       
                  (series in 1/k or table values  
                  for small k) with long int k    
                  - randomGenerator    ... (0,1)-Uniform engine                
            </javadoc>
            <method name="generateBinomial" type="int" line="98">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
                <declaration name="C1_3" type="double" line="99"/>
                <declaration name="C5_8" type="double" line="100"/>
                <declaration name="C1_6" type="double" line="101"/>
                <declaration name="DMAX_KM" type="int" line="102"/>
                <declaration name="bh" type="int" line="103"/>
                <declaration name="f" type="double" line="104"/>
                <scope line="105">
                    <scope line="114"/>
                    <scope line="119"/>
                </scope>
                <scope line="137">
                    <declaration name="pk" type="double" line="138"/>
                    <scope line="142">
                        <scope line="144"/>
                        <scope line="149"/>
                    </scope>
                </scope>
                <scope line="156">
                    <scope line="158"/>
                    <scope line="162"/>
                    <scope line="167"/>
                    <scope line="172"/>
                    <scope line="176">
                        <scope line="178">
                            <scope line="179"/>
                        </scope>
                        <scope line="183">
                            <scope line="184"/>
                        </scope>
                    </scope>
                    <scope line="190">
                        <scope line="195">
                            <scope line="196"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="209">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="212"/>
            <javadoc line="215">
                Returns a random number from the distribution with the given parameters n and p; bypasses the internal state.                
                <param>
                    n the number of trials                    
                </param>
                <param>
                    p the probability of success.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>nMath.min(p,1-p) &lt;= 0.0</tt>                    
                </throws>
            </javadoc>
            <method name="nextInt" type="int" line="221">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="225">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="228">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="r" type="int" line="230"/>
            </method>
            <javadoc line="233">
                Sets the parameters number of trials and the probability of success.                
                <param>
                    n the number of trials                    
                </param>
                <param>
                    p the probability of success.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>nMath.min(p,1-p) &lt;= 0.0</tt>                    
                </throws>
            </javadoc>
            <method name="setNandP" type="void" line="239">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="247">
                Returns a random number from the distribution with the given parameters n and p.                
                <param>
                    n the number of trials                    
                </param>
                <param>
                    p the probability of success.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>nMath.min(p,1-p) &lt;= 0.0</tt>                    
                </throws>
            </javadoc>
            <method name="staticNextInt" type="int" line="253">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="254"/>
            </method>
            <javadoc line="258">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="261"/>
            <javadoc line="264">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="268">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="269"/>
            </method>
        </class>
    </source>