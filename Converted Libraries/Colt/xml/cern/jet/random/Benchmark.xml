<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.colt.list.IntArrayList"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="Benchmark" line="14">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="14">
                Benchmarks random number generation from various distributions as well as PDF and CDF lookups.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="randomGenerator" type="RandomEngine" line="21"/>
            <javadoc line="22">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Benchmark" type="constructor" line="25"/>
            <javadoc line="28">
                Prints the first &lt;tt&gt;size&lt;/tt&gt; random numbers generated by the distribution.                
            </javadoc>
            <method name="demo1" type="void" line="31">
                <comment line="33">
                    Gamma distribution                    
                </comment>
                <comment line="35">
                    define distribution parameters                    
                </comment>
                <comment line="41">
                    for tests and debugging use a random engine with CONSTANT seed --&gt; deterministic and reproducible results                    
                </comment>
                <comment line="44">
                    your favourite distribution goes here                    
                </comment>
                <comment line="47">
                    collect random numbers and print statistics                    
                </comment>
                <declaration name="mean" type="double" line="35"/>
                <declaration name="variance" type="double" line="36"/>
                <declaration name="alpha" type="double" line="37"/>
                <declaration name="lambda" type="double" line="38"/>
                <declaration name="engine" type="cern.jet.random.engine.RandomEngine" line="41"/>
                <declaration name="dist" type="cern.jet.random.AbstractDistribution" line="44"/>
                <declaration name="size" type="int" line="47"/>
                <declaration name="numbers" type="cern.colt.list.DoubleArrayList" line="48"/>
                <declaration name="bin" type="hep.aida.bin.DynamicBin1D" line="51"/>
            </method>
            <javadoc line="55">
                Benchmarks all subclasses                
                <param>
                    args[0] the number of random numbers to be generated per subclass.                    
                </param>
                <param>
                    args[1] <tt>true</tt> prints each generated number, <tt>false</tt> does not print generated numbers (use this setting for benchmarking).                    
                </param>
            </javadoc>
            <method name="main" type="void" line="60">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="size" type="int" line="61"/>
                <declaration name="print" type="boolean" line="62"/>
                <declaration name="mean" type="double" line="63"/>
                <declaration name="generatorName" type="String" line="64"/>
            </method>
            <javadoc line="67">
                Benchmarks all subclasses                
                <param>
                    size the number of random numbers to be generated per subclass.                    
                </param>
                <param>
                    print <tt>true</tt> prints each generated number, <tt>false</tt> does not print generated numbers (use this setting for benchmarking).                    
                </param>
                <param>
                    mean the mean for distributions that require a mean.                    
                </param>
            </javadoc>
            <method name="random" type="void" line="73">
                <params>
                    <param name="size" type="int"/>
                    <param name="print" type="boolean"/>
                    <param name="mean" type="double"/>
                    <param name="generatorName" type="String"/>
                </params>
                <comment line="77">
                    int large = 100000000;                    
                </comment>
                <comment line="79">
                    = new MersenneTwister();                    
                </comment>
                <comment line="86">
                    randomInstance(size,print,new Zeta(10.0, 10.0,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Zeta(1.0, 1.0, (RandomEngine)gen.clone()));
                    randomInstance(size,print,new Zeta(mean, mean, (RandomEngine)gen.clone()));
                    randomInstance(size,print,new Zeta(mean, 1mean, (RandomEngine)gen.clone()));
                    randomInstance(size,print,new Zeta(1mean, mean, (RandomEngine)gen.clone()));                    
                </comment>
                <comment line="94">
                    randomInstance(size,print,new Beta(10.0, 10.0,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Beta(1.0, 1.0, (RandomEngine)gen.clone()));
                    randomInstance(size,print,new Beta(mean, mean, (RandomEngine)gen.clone()));
                    randomInstance(size,print,new Beta(mean, 1mean, (RandomEngine)gen.clone()));
                    randomInstance(size,print,new Beta(1mean, mean, (RandomEngine)gen.clone()));
                    
                    randomInstance(size,print,new Uniform((RandomEngine)gen.clone()));                    
                </comment>
                <comment line="105">
                    randomInstance(size,print,new PoissonSlow(mean,(RandomEngine)gen.clone()));
                    
                    randomInstance(size,print,new Poisson(3.0,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new PoissonSlow(3.0,(RandomEngine)gen.clone()));
                    
                    randomInstance(size,print,new Binomial(1,0.5,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Binomial(5,0.3,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Binomial((int)mean,0.999999999,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Binomial((int)mean,1.0mean,(RandomEngine)gen.clone()));
                    
                    randomInstance(size,print,new Exponential(1.0,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Exponential(3.0,(RandomEngine)gen.clone()));
                    
                    randomInstance(size,print,new Normal(0.0,1.0,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Normal(3.0,1.0,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Normal(mean,largeVariance,(RandomEngine)gen.clone()));
                    
                    randomInstance(size,print,new BreitWigner(1.0, 0.2, Double.NEGATIVE_INFINITY, (RandomEngine)gen.clone()));
                    randomInstance(size,print,new BreitWigner(1.0, 0.2, 1.0, (RandomEngine)gen.clone()));
                    
                    randomInstance(size,print,new BreitWignerMeanSquare(1.0, 0.2, Double.NEGATIVE_INFINITY, (RandomEngine)gen.clone()));
                    randomInstance(size,print,new BreitWignerMeanSquare(1.0, 0.2, 1.0, (RandomEngine)gen.clone()));
                    
                    randomInstance(size,print,new ChiSquare(1.0,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new ChiSquare(5.0,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new ChiSquare(mean,(RandomEngine)gen.clone()));
                    
                    randomInstance(size,print,new Gamma(0.2,1.0,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Gamma(1.0,1.0,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Gamma(3.0,0.5,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Gamma(mean,0.5,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Gamma(mean,1.0mean,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new Gamma(mean,mean,(RandomEngine)gen.clone()));
                    
                    randomInstance(size,print,new StudentT(1.0,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new StudentT(2.5,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new StudentT(mean,(RandomEngine)gen.clone()));
                    randomInstance(size,print,new StudentT(1.0mean,(RandomEngine)gen.clone()));
                    
                    int probs = 10000;
                    double[] pdf = new double[probs];
                    for (int i=0; i&lt;probs; i++) pdf[i]=ii;  prepare f(x)=x^2 distrib.
                    randomInstance(size,print,new Empirical(pdf,Empirical.NO_INTERPOLATION, (RandomEngine)gen.clone()));
                    randomInstance(size,print,new Empirical(pdf,Empirical.LINEAR_INTERPOLATION, (RandomEngine)gen.clone()));                    
                </comment>
                <declaration name="largeVariance" type="int" line="77"/>
                <declaration name="gen" type="RandomEngine" line="78"/>
                <scope line="79"/>
                <scope line="81"/>
            </method>
            <javadoc line="151">
                generates &lt;size&gt; random numbers from &lt;dist&gt;                
            </javadoc>
            <method name="randomInstance" type="void" line="154">
                <params>
                    <param name="size" type="int"/>
                    <param name="print" type="boolean"/>
                    <param name="dist" type="AbstractDistribution"/>
                </params>
                <declaration name="timer" type="cern.colt.Timer" line="156"/>
                <scope line="158">
                    <declaration name="rand" type="double" line="159"/>
                    <scope line="160"/>
                </scope>
            </method>
            <javadoc line="169">
                Prints the first &lt;tt&gt;size&lt;/tt&gt; random numbers generated by the distribution.                
            </javadoc>
            <method name="test" type="void" line="172">
                <params>
                    <param name="size" type="int"/>
                    <param name="distribution" type="AbstractDistribution"/>
                </params>
                <scope line="173"/>
            </method>
            <javadoc line="179">
                Prints the first &lt;tt&gt;size&lt;/tt&gt; random numbers generated by the distribution.                
            </javadoc>
            <method name="test2" type="void" line="182">
                <params>
                    <param name="size" type="int"/>
                    <param name="distribution" type="AbstractDistribution"/>
                </params>
                <declaration name="bin" type="hep.aida.bin.DynamicBin1D" line="183"/>
                <scope line="184"/>
            </method>
            <javadoc line="190">
                Prints the first &lt;tt&gt;size&lt;/tt&gt; random numbers generated by the distribution.                
            </javadoc>
            <method name="test2" type="void" line="193">
                <params>
                    <param name="size" type="int"/>
                    <param name="a" type="AbstractDistribution"/>
                    <param name="b" type="AbstractDistribution"/>
                </params>
                <comment line="201">
                    System.out.println(binA);
                    System.out.println(binB);
                    System.out.println(binA.compareWith(binB));                    
                </comment>
                <comment line="213">
                    System.out.println(distinct);
                    System.out.println(freq);                    
                </comment>
                <comment line="216">
                    timer.reset();
                    timer.start();
                    binA.xfrequencies2(distinct,freq);
                    timer.stop().display();
                    System.out.println(distinct);
                    System.out.println(freq);                    
                </comment>
                <comment line="225">
                    distinct.shuffle();
                    timer.reset().start();
                    distinct.sort();
                    timer.stop().display();
                    
                    timer.reset().start();
                    binA.frequencies(distinct,freq);
                    timer.stop().display();
                    System.out.println(distinct);
                    System.out.println(freq);                    
                </comment>
                <declaration name="binA" type="hep.aida.bin.DynamicBin1D" line="194"/>
                <declaration name="binB" type="hep.aida.bin.DynamicBin1D" line="195"/>
                <scope line="196"/>
                <declaration name="freq" type="IntArrayList" line="205"/>
                <declaration name="distinct" type="DoubleArrayList" line="206"/>
                <declaration name="timer" type="cern.colt.Timer" line="207"/>
            </method>
        </class>
    </source>