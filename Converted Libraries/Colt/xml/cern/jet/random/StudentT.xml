<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="StudentT" line="13">
            <extends class="AbstractContinousDistribution"/>
            <comment line="41">
                performance cache for pdf()                
            </comment>
            <comment line="42">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="13">
                StudentT distribution (aka T-distribution); See the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node279.html#SECTION0002790000000000000000&quot;&gt; math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/gloss.html#Student&apos;s t Distribution&quot;&gt; animated definition&lt;/A&gt;.
                  &lt;p&gt;
                  &lt;tt&gt;p(x) = k    (1+x^2/f) ^ -(f+1)/2&lt;/tt&gt; where &lt;tt&gt;k = g((f+1)/2) / (sqrt(pif)  g(f/2))&lt;/tt&gt; and &lt;tt&gt;g(a)&lt;/tt&gt; being the gamma function and &lt;tt&gt;f&lt;/tt&gt; being the degrees of freedom.
                  &lt;p&gt;
                  Valid parameter ranges: &lt;tt&gt;freedom &amp;gt; 0&lt;/tt&gt;.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  &lt;dt&gt;
                  Method: Adapted Polar Box-Muller transformation.
                  &lt;dt&gt;
                  This is a port of &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandStudentT.html&quot;&gt;RandStudentT&lt;/A&gt; used in &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep&quot;&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
                  CLHEP&apos;s implementation, in turn, is based on &lt;tt&gt;tpol.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;R.W. Bailey (1994): Polar generation of random variates with the t-distribution, Mathematics of Computation 62, 779-781.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="freedom" type="double" line="38"/>
            <declaration name="TERM" type="double" line="40"/>
            <declaration name="shared" type="StudentT" line="42"/>
            <javadoc line="43">
                Constructs a StudentT distribution.
                  Example: freedom=1.0.                
                <param>
                    freedom degrees of freedom.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>freedom &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="StudentT" type="constructor" line="49">
                <params>
                    <param name="freedom" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="53">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="56">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="59">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="62"/>
            <javadoc line="65">
                Returns a random number from the distribution; bypasses the internal state.                
                <param>
                    a degrees of freedom.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>a &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="nextDouble" type="double" line="70">
                <params>
                    <param name="degreesOfFreedom" type="double"/>
                </params>
                <comment line="71">
                    The polar method of BoxMuller for generating Normal variates
                     is adapted to the Student-t distribution. The two generated
                     variates are not independent and the expected no. of uniforms
                     per variate is 2.5464.
                    
                     REFERENCE :  - R.W. Bailey (1994): Polar generation of random
                                    variates with the t-distribution, Mathematics
                                    of Computation 62, 779-781.                    
                </comment>
                <declaration name="u" type="double" line="82"/>
                <scope line="84"/>
            </method>
            <javadoc line="92">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="95">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="98">
                Sets the distribution parameter.                
                <param>
                    freedom degrees of freedom.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>freedom &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="setState" type="void" line="103">
                <params>
                    <param name="freedom" type="double"/>
                </params>
                <declaration name="val" type="double" line="107"/>
            </method>
            <javadoc line="110">
                Returns a random number from the distribution.                
                <param>
                    freedom degrees of freedom.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>freedom &lt;= 0.0</tt>.                    
                </throws>
            </javadoc>
            <method name="staticNextDouble" type="double" line="115">
                <params>
                    <param name="freedom" type="double"/>
                </params>
                <scope line="116"/>
            </method>
            <javadoc line="120">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="123"/>
            <javadoc line="126">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="130">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="131"/>
            </method>
        </class>
    </source>