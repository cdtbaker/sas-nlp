<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="AbstractDistribution" line="12">
            <extends class="cern.colt.PersistentObject"/>
            <implements interface="cern.colt.function.DoubleFunction"/>
            <implements interface="cern.colt.function.IntFunction"/>
            <javadoc line="12">
                Abstract base class for all random distributions.
                  A subclass of this class need to override method &lt;tt&gt;nextDouble()&lt;/tt&gt; and, in rare cases, also &lt;tt&gt;nextInt()&lt;/tt&gt;.
                  &lt;p&gt;
                  Currently all subclasses use a uniform pseudo-random number generation engine and transform its results to the target distribution.
                  Thus, they expect such a uniform engine upon instance construction.
                  &lt;p&gt;{@link cern.jet.random.engine.MersenneTwister} is recommended as uniform pseudo-random number generation engine, since it is very strong and at the same time quick.{@link #makeDefaultGenerator()} will conveniently construct and return such a magic thing.
                  You can also, for example, use {@link cern.jet.random.engine.DRand}, a quicker (but much weaker) uniform random number generation engine.
                  Of course, you can also use other strong uniform random number generation engines. 
                  &lt;p&gt;
                  &lt;b&gt;Ressources on the Web:&lt;/b&gt;
                  &lt;dt&gt;Check the Web version of the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node1.html&quot;&gt; CERN Data Analysis Briefbook &lt;/A&gt;. This will clarify the definitions of most distributions.
                  &lt;dt&gt;Also consult the &lt;A HREF=&quot;http://www.statsoftinc.com/textbook/stathome.html&quot;&gt; StatSoft Electronic Textbook&lt;/A&gt; - the definite web book.
                  &lt;p&gt;
                  &lt;b&gt;Other useful ressources:&lt;/b&gt;
                  &lt;dt&gt;&lt;A HREF=&quot;http://www.stats.gla.ac.uk/steps/glossary/probability_distributions.html&quot;&gt; Another site &lt;/A&gt; and &lt;A HREF=&quot;http://www.statlets.com/usermanual/glossary.htm&quot;&gt; yet another site &lt;/A&gt;describing the definitions of several distributions.
                  &lt;dt&gt;You may want to check out a &lt;A HREF=&quot;http://www.stat.berkeley.edu/users/stark/SticiGui/Text/gloss.htm&quot;&gt; Glossary of Statistical Terms&lt;/A&gt;.
                  &lt;dt&gt;The GNU Scientific Library contains an extensive (but hardly readable) &lt;A HREF=&quot;http://sourceware.cygnus.com/gsl/html/gsl-ref_toc.html#TOC26&quot;&gt; list of definition of distributions&lt;/A&gt;.
                  &lt;dt&gt;Use this Web interface to &lt;A HREF=&quot;http://www.stat.ucla.edu/calculators/cdf&quot;&gt; plot all sort of distributions&lt;/A&gt;.
                  &lt;dt&gt;Even more ressources: &lt;A HREF=&quot;http://www.animatedsoftware.com/statglos/statglos.htm&quot;&gt; Internet glossary of Statistical Terms&lt;/A&gt;,
                  &lt;A HREF=&quot;http://www.ruf.rice.edu/~lane/hyperstat/index.html&quot;&gt; a text book&lt;/A&gt;,
                  &lt;A HREF=&quot;http://www.stat.umn.edu/~jkuhn/courses/stat3091f/stat3091f.html&quot;&gt; another text book&lt;/A&gt;.
                  &lt;dt&gt;Finally, a good link list &lt;A HREF=&quot;http://www.execpc.com/~helberg/statistics.html&quot;&gt; Statistics on the Web&lt;/A&gt;.
                  &lt;p&gt;                
                <see>
                    cern.jet.random.engine                    
                </see>
                <see>
                    cern.jet.random.engine.Benchmark                    
                </see>
                <see>
                    cern.jet.random.Benchmark                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="randomGenerator" type="RandomEngine" line="47"/>
            <javadoc line="48">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractDistribution" type="constructor" line="51"/>
            <javadoc line="52">
                Equivalent to &lt;tt&gt;nextDouble()&lt;/tt&gt;.
                  This has the effect that distributions can now be used as function objects, returning a random number upon function evaluation.                
            </javadoc>
            <method name="apply" type="double" line="56">
                <params>
                    <param name="dummy" type="double"/>
                </params>
            </method>
            <javadoc line="59">
                Equivalent to &lt;tt&gt;nextInt()&lt;/tt&gt;.
                  This has the effect that distributions can now be used as function objects, returning a random number upon function evaluation.                
            </javadoc>
            <method name="apply" type="int" line="63">
                <params>
                    <param name="dummy" type="int"/>
                </params>
            </method>
            <javadoc line="66">
                Returns a deep copy of the receiver; the copy will produce identical sequences.
                  After this call has returned, the copy and the receiver have equal but separate state.                
                <return>
                    a copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="72">
                <declaration name="copy" type="AbstractDistribution" line="73"/>
            </method>
            <javadoc line="77">
                Returns the used uniform random number generator;                
            </javadoc>
            <method name="getRandomGenerator" type="RandomEngine" line="80"/>
            <javadoc line="83">
                Constructs and returns a new uniform random number generation engine seeded with the current time.
                  Currently this is {@link cern.jet.random.engine.MersenneTwister}.                
            </javadoc>
            <method name="makeDefaultGenerator" type="RandomEngine" line="87"/>
            <method name="nextDouble" type="double" line="90"/>
            <javadoc line="90">
                Returns a random number from the distribution.                
            </javadoc>
            <javadoc line="94">
                Returns a random number from the distribution; returns &lt;tt&gt;(int) Math.round(nextDouble())&lt;/tt&gt;.
                  Override this method if necessary.                
            </javadoc>
            <method name="nextInt" type="int" line="98"/>
            <javadoc line="101">
                Sets the uniform random generator internally used.                
            </javadoc>
            <method name="setRandomGenerator" type="void" line="104">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
        </class>
    </source>