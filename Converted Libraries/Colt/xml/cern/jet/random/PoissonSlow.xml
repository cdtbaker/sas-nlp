<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="PoissonSlow" line="3">
            <extends class="AbstractDiscreteDistribution"/>
            <javadoc line="3">
                Poisson distribution; See the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node208.html#SECTION0002080000000000000000&quot;&gt; math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosp.html#Poisson Distribution&quot;&gt; animated definition&lt;/A&gt;.
                  &lt;p&gt;
                  &lt;tt&gt;p(k) = (mean^k / k!)  exp(-mean)&lt;/tt&gt; for &lt;tt&gt;k &amp;gt;= 0&lt;/tt&gt;.
                  &lt;p&gt;
                  Valid parameter ranges: &lt;tt&gt;mean &amp;gt; 0&lt;/tt&gt;.
                  Note: if &lt;tt&gt;mean &amp;lt;= 0.0&lt;/tt&gt; then always returns zero.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; 
                  This is a port of &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandPoisson.html&quot;&gt;RandPoisson&lt;/A&gt; used in &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep&quot;&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
                  CLHEP&apos;s implementation, in turn, is based upon &quot;W.H.Press et al., Numerical Recipes in C, Second Edition&quot;.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="mean" type="double" line="23"/>
            <declaration name="cached_sq" type="double" line="24"/>
            <declaration name="cached_alxm" type="double" line="25"/>
            <declaration name="cached_g" type="double" line="26"/>
            <declaration name="MEAN_MAX" type="double" line="27"/>
            <declaration name="SWITCH_MEAN" type="double" line="28"/>
            <declaration name="cof" type="double[]" line="29"/>
            <declaration name="shared" type="PoissonSlow" line="30"/>
            <javadoc line="31">
                Constructs a poisson distribution.
                  Example: mean=1.0.                
            </javadoc>
            <method name="PoissonSlow" type="constructor" line="35">
                <params>
                    <param name="mean" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="39">
                Returns the value ln(Gamma(xx) for xx &gt; 0.  Full accuracy is obtained for 
                  xx &gt; 1. For 0 &lt; xx &lt; 1. the reflection formula (6.1.4) can be used first.
                  (Adapted from Numerical Recipes in C)                
            </javadoc>
            <method name="logGamma" type="double" line="44">
                <params>
                    <param name="xx" type="double"/>
                </params>
                <declaration name="x" type="double" line="45"/>
                <declaration name="tmp" type="double" line="46"/>
                <declaration name="ser" type="double" line="48"/>
                <declaration name="coeff" type="double[]" line="49"/>
                <scope line="50"/>
            </method>
            <javadoc line="56">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="59"/>
            <javadoc line="62">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="65">
                <params>
                    <param name="theMean" type="double"/>
                </params>
                <declaration name="xm" type="double" line="66"/>
                <declaration name="g" type="double" line="67"/>
                <scope line="69">
                    <declaration name="poisson" type="int" line="70"/>
                    <declaration name="product" type="double" line="71"/>
                    <scope line="72"/>
                </scope>
                <scope line="79">
                    <declaration name="t" type="double" line="80"/>
                    <declaration name="em" type="double" line="81"/>
                    <declaration name="sq" type="double" line="82"/>
                    <declaration name="alxm" type="double" line="83"/>
                    <declaration name="rand" type="RandomEngine" line="84"/>
                    <scope line="85">
                        <declaration name="y" type="double" line="86"/>
                        <scope line="87"/>
                    </scope>
                </scope>
                <scope line="98"/>
            </method>
            <javadoc line="102">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextIntSlow" type="int" line="105">
                <declaration name="bound" type="double" line="106"/>
                <declaration name="count" type="int" line="107"/>
                <declaration name="product" type="double" line="108"/>
                <scope line="109"/>
            </method>
            <javadoc line="115">
                Sets the mean.                
            </javadoc>
            <method name="setMean" type="void" line="118">
                <params>
                    <param name="mean" type="double"/>
                </params>
                <scope line="119">
                    <scope line="122"/>
                    <scope line="125"/>
                </scope>
            </method>
            <javadoc line="132">
                Returns a random number from the distribution with the given mean.                
            </javadoc>
            <method name="staticNextInt" type="int" line="135">
                <params>
                    <param name="mean" type="double"/>
                </params>
                <scope line="136"/>
            </method>
            <javadoc line="141">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="144"/>
            <javadoc line="147">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="151">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="152"/>
            </method>
        </class>
    </source>