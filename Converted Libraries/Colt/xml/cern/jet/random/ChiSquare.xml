<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="ChiSquare" line="4">
            <extends class="AbstractContinousDistribution"/>
            <javadoc line="4">
                ChiSquare distribution; See the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node31.html#SECTION000310000000000000000&quot;&gt; math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosc.html#Chi-square Distribution&quot;&gt; animated definition&lt;/A&gt;.
                  &lt;dt&gt;A special case of the Gamma distribution.
                  &lt;p&gt;
                  &lt;tt&gt;p(x) = (1/g(f/2))  (x/2)^(f/2-1)  exp(-x/2)&lt;/tt&gt; with &lt;tt&gt;g(a)&lt;/tt&gt; being the gamma function and &lt;tt&gt;f&lt;/tt&gt; being the degrees of freedom.
                  &lt;p&gt;
                  Valid parameter ranges: &lt;tt&gt;freedom &amp;gt; 0&lt;/tt&gt;.
                  &lt;p&gt; 
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; 
                  &lt;dt&gt;
                  Method: Ratio of Uniforms with shift.
                  &lt;dt&gt;
                  High performance implementation. This is a port of &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandChiSquare.html&quot;&gt;RandChiSquare&lt;/A&gt; used in &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep&quot;&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
                  CLHEP&apos;s implementation, in turn, is based on &lt;tt&gt;chru.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;J.F. Monahan (1987): An algorithm for generating chi random variables, ACM Trans. Math. Software 13, 168-172.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="freedom" type="double" line="29"/>
            <declaration name="freedom_in" type="double" line="30"/>
            <declaration name="shared" type="ChiSquare" line="31"/>
            <javadoc line="32">
                Constructs a ChiSquare distribution.
                  Example: freedom=1.0.                
                <param>
                    freedom degrees of freedom.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>freedom &lt; 1.0</tt>.                    
                </throws>
            </javadoc>
            <method name="ChiSquare" type="constructor" line="38">
                <params>
                    <param name="freedom" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="42">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="45">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="48">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="51"/>
            <javadoc line="54">
                Returns a random number from the distribution; bypasses the internal state.                
                <param>
                    freedom degrees of freedom.
                      It should hold <tt>freedom &lt; 1.0</tt>.                    
                </param>
            </javadoc>
            <method name="nextDouble" type="double" line="59">
                <params>
                    <param name="freedom" type="double"/>
                </params>
                <declaration name="u" type="double" line="60"/>
                <scope line="61">
                    <scope line="62"/>
                </scope>
                <scope line="75">
                    <scope line="76"/>
                    <scope line="84"/>
                </scope>
            </method>
            <javadoc line="98">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="101">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="logGamma" type="double" line="103"/>
            </method>
            <javadoc line="106">
                Sets the distribution parameter.                
                <param>
                    freedom degrees of freedom.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>freedom &lt; 1.0</tt>.                    
                </throws>
            </javadoc>
            <method name="setState" type="void" line="111">
                <params>
                    <param name="freedom" type="double"/>
                </params>
            </method>
            <javadoc line="115">
                Returns a random number from the distribution.                
                <param>
                    freedom degrees of freedom.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>freedom &lt; 1.0</tt>.                    
                </throws>
            </javadoc>
            <method name="staticNextDouble" type="double" line="120">
                <params>
                    <param name="freedom" type="double"/>
                </params>
                <scope line="121"/>
            </method>
            <javadoc line="125">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="128"/>
            <javadoc line="131">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="135">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="136"/>
            </method>
        </class>
    </source>