<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="NegativeBinomial" line="4">
            <extends class="AbstractDiscreteDistribution"/>
            <javadoc line="4">
                Negative Binomial distribution; See the &lt;A HREF=&quot;http://www.statlets.com/usermanual/glossary2.htm&quot;&gt; math definition&lt;/A&gt;.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation. Compound method. 
                  &lt;dt&gt;
                  This is a port of &lt;tt&gt;nbp.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  J.H. Ahrens, U. Dieter (1974): Computer methods for sampling from gamma, beta, Poisson and binomial distributions, Computing 12, 223--246.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="n" type="int" line="21"/>
            <declaration name="p" type="double" line="22"/>
            <declaration name="gamma" type="Gamma" line="23"/>
            <declaration name="poisson" type="Poisson" line="24"/>
            <declaration name="shared" type="NegativeBinomial" line="25"/>
            <javadoc line="26">
                Constructs a Negative Binomial distribution.
                  Example: n=1, p=0.5.                
                <param>
                    n the number of trials.                    
                </param>
                <param>
                    p the probability of success.                    
                </param>
                <param>
                    randomGenerator a uniform random number generator.                    
                </param>
            </javadoc>
            <method name="NegativeBinomial" type="constructor" line="33">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="39">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="42">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="45">
                Returns a deep copy of the receiver; the copy will produce identical sequences.
                  After this call has returned, the copy and the receiver have equal but separate state.                
                <return>
                    a copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="50">
                <declaration name="copy" type="NegativeBinomial" line="51"/>
            </method>
            <javadoc line="58">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="61"/>
            <javadoc line="64">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="67">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
                <declaration name="x" type="double" line="68"/>
                <declaration name="p1" type="double" line="69"/>
                <declaration name="y" type="double" line="70"/>
            </method>
            <javadoc line="73">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="76">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="80">
                Sets the parameters number of trials and the probability of success.                
                <param>
                    n the number of trials                    
                </param>
                <param>
                    p the probability of success.                    
                </param>
            </javadoc>
            <method name="setNandP" type="void" line="85">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="89">
                Returns a random number from the distribution with the given parameters n and p.                
                <param>
                    n the number of trials                    
                </param>
                <param>
                    p the probability of success.                    
                </param>
            </javadoc>
            <method name="staticNextInt" type="int" line="94">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="95"/>
            </method>
            <javadoc line="99">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="102"/>
            <javadoc line="105">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="109">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="110"/>
            </method>
        </class>
    </source>