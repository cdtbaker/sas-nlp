<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.engine">
        <class name="Benchmark" line="2">
            <javadoc line="2">
                Benchmarks the performance of the currently provided uniform pseudo-random number generation engines.
                  &lt;p&gt;
                  All distributions are obtained by using a &lt;b&gt;uniform&lt;/b&gt; pseudo-random number generation engine.
                  followed by a transformation to the desired distribution.
                  Therefore, the performance of the uniform engines is crucial.
                  &lt;p&gt;
                  &lt;h2 align=center&gt;Comparison of uniform generation engines&lt;/h2&gt;
                  &lt;center&gt;
                  &lt;table border&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt;Name&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;Period&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt;
                  &lt;p&gt;Speed&lt;br&gt;
                  [# million uniform random numbers generated/sec]&lt;br&gt;
                  Pentium Pro 200 Mhz, JDK 1.2, NT&lt;/p&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt; &lt;tt&gt;MersenneTwister&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;2&lt;sup&gt;19937&lt;/sup&gt;-1 (=10&lt;sup&gt;6001&lt;/sup&gt;)&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;40&quot;&gt;2.5&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt; &lt;tt&gt;Ranlux&lt;/tt&gt; (default luxury level 3) &lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;171&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;40&quot;&gt;0.4&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;40&quot;&gt; &lt;tt&gt;Ranmar&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20&quot;&gt;10&lt;sup&gt;43&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt;1.6&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt; &lt;tt&gt;Ranecu&lt;/tt&gt; &lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;20&quot;&gt;10&lt;sup&gt;18&lt;/sup&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt;1.5&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td align=&quot;center&quot;&gt; &lt;tt&gt;java.util.Random.nextFloat() &lt;/tt&gt;&lt;tt&gt; 
                  &lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot;&gt;&lt;font size=+3&gt;?&lt;/font&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot;&gt;2.4&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/center&gt;
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Methods working on the default uniform random generator are &lt;b&gt;synchronized&lt;/b&gt; and therefore in current VM&apos;s &lt;b&gt;slow&lt;/b&gt; (as of June &apos;99).
                  Methods taking as argument a uniform random generator are &lt;b&gt;not synchronized&lt;/b&gt; and therefore much &lt;b&gt;quicker&lt;/b&gt;.
                  Thus, if you need a lot of random numbers, you should use the unsynchronized approach:
                  &lt;p&gt;
                  &lt;b&gt;Example usage:&lt;/b&gt;&lt;pre&gt;
                  edu.cornell.lassp.houle.RngPack.RandomElement generator;
                  generator = new cern.jet.random.engine.MersenneTwister(new java.util.Date());
                  //generator = new edu.cornell.lassp.houle.RngPack.Ranecu(new java.util.Date());
                  //generator = new edu.cornell.lassp.houle.RngPack.Ranmar(new java.util.Date());
                  //generator = new edu.cornell.lassp.houle.RngPack.Ranlux(new java.util.Date());
                  //generator = makeDefaultGenerator();
                  for (int i=1000000; --i &gt;=0; ) {
                  double uniform = generator.raw();
                  ...
                  }
                  &lt;/pre&gt;                
                <see>
                    cern.jet.random                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <javadoc line="71">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Benchmark" type="constructor" line="74"/>
            <javadoc line="77">
                Benchmarks &lt;tt&gt;raw()&lt;/tt&gt; for various uniform generation engines.                
            </javadoc>
            <method name="benchmark" type="void" line="80">
                <params>
                    <param name="times" type="int"/>
                </params>
                <declaration name="timer" type="cern.colt.Timer" line="81"/>
                <declaration name="gen" type="RandomEngine" line="82"/>
                <declaration name="emptyLoop" type="float" line="86"/>
                <declaration name="javaGen" type="java.util.Random" line="106"/>
            </method>
            <javadoc line="114">
                Tests various methods of this class.                
            </javadoc>
            <method name="main" type="void" line="117">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="from" type="long" line="118"/>
                <declaration name="to" type="long" line="119"/>
                <declaration name="times" type="int" line="120"/>
                <declaration name="runs" type="int" line="121"/>
                <scope line="122"/>
            </method>
            <javadoc line="126">
                Prints the first &lt;tt&gt;size&lt;/tt&gt; random numbers generated by the given engine.                
            </javadoc>
            <method name="test" type="void" line="129">
                <params>
                    <param name="size" type="int"/>
                    <param name="randomEngine" type="RandomEngine"/>
                </params>
                <declaration name="random" type="RandomEngine" line="130"/>
                <scope line="133"/>
            </method>
            <javadoc line="139">
                Tests various methods of this class.                
            </javadoc>
            <method name="xtestRandomFromTo" type="void" line="142">
                <params>
                    <param name="from" type="long"/>
                    <param name="to" type="long"/>
                    <param name="times" type="int"/>
                </params>
                <declaration name="randomJava" type="java.util.Random" line="144"/>
                <declaration name="random" type="RandomEngine" line="145"/>
                <declaration name="_from" type="int" line="146"/>
                <declaration name="timer" type="cern.colt.Timer" line="147"/>
                <scope line="148"/>
            </method>
        </class>
    </source>