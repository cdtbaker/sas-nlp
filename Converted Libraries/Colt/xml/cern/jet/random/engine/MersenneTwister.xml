<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.engine">
        <import package="java.util.Date"/>
        <class name="MersenneTwister" line="3">
            <extends class="RandomEngine"/>
            <javadoc line="3">
                MersenneTwister (MT19937) is one of the strongest uniform pseudo-random number generators known so far; at the same time it is quick.
                  Produces uniformly distributed &lt;tt&gt;int&lt;/tt&gt;&apos;s and &lt;tt&gt;long&lt;/tt&gt;&apos;s in the closed intervals &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; and &lt;tt&gt;[Long.MIN_VALUE,Long.MAX_VALUE]&lt;/tt&gt;, respectively, 
                  as well as &lt;tt&gt;float&lt;/tt&gt;&apos;s and &lt;tt&gt;double&lt;/tt&gt;&apos;s in the open unit intervals &lt;tt&gt;(0.0f,1.0f)&lt;/tt&gt; and &lt;tt&gt;(0.0,1.0)&lt;/tt&gt;, respectively.
                  The seed can be any 32-bit integer except &lt;tt&gt;0&lt;/tt&gt;. Shawn J. Cokus commented that perhaps the seed should preferably be odd.
                  &lt;p&gt;
                  &lt;b&gt;Quality:&lt;/b&gt; MersenneTwister is designed to pass the k-distribution test. It has an astronomically large period of 2&lt;sup&gt;19937&lt;/sup&gt;-1 (=10&lt;sup&gt;6001&lt;/sup&gt;) and 623-dimensional equidistribution up to 32-bit accuracy.
                  It passes many stringent statistical tests, including the &lt;A HREF=&quot;http://stat.fsu.edu/~geo/diehard.html&quot;&gt;diehard&lt;/A&gt; test of G. Marsaglia and the load test of P. Hellekalek and S. Wegenkittl.
                  &lt;p&gt;
                  &lt;b&gt;Performance:&lt;/b&gt; Its speed is comparable to other modern generators (in particular, as fast as &lt;tt&gt;java.util.Random.nextFloat()&lt;/tt&gt;).
                  2.5 million calls to &lt;tt&gt;raw()&lt;/tt&gt; per second (Pentium Pro 200 Mhz, JDK 1.2, NT).
                  Be aware, however, that there is a non-negligible amount of overhead required to initialize the data
                  structures used by a MersenneTwister. Code like
                  &lt;pre&gt;
                  double sum = 0.0;
                  for (int i=0; i&lt;100000; ++i) {
                  RandomElement twister = new MersenneTwister(new java.util.Date());
                  sum += twister.raw();
                  }
                  &lt;/pre&gt;
                  will be wildly inefficient. Consider using
                  &lt;pre&gt;
                  double sum = 0.0;
                  RandomElement twister = new MersenneTwister(new java.util.Date());
                  for (int i=0; i&lt;100000; ++i) {
                  sum += twister.raw();
                  }
                  &lt;/pre&gt;
                  instead.  This allows the cost of constructing the MersenneTwister object
                  to be borne only once, rather than once for each iteration in the loop.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; After M. Matsumoto and T. Nishimura,                                  
                  &quot;Mersenne Twister: A 623-Dimensionally Equidistributed Uniform Pseudo-Random Number Generator&quot;,                                
                  ACM Transactions on Modeling and Computer Simulation,           
                  Vol. 8, No. 1, January 1998, pp 3--30.
                  &lt;dt&gt;More info on &lt;A HREF=&quot;http://www.math.keio.ac.jp/~matumoto/eindex.html&quot;&gt; Masumoto&apos;s homepage&lt;/A&gt;.
                  &lt;dt&gt;More info on &lt;A HREF=&quot;http://www.ncsa.uiuc.edu/Apps/CMP/RNG/www-rng.html&quot;&gt; Pseudo-random number generators is on the Web&lt;/A&gt;.
                  &lt;dt&gt;Yet &lt;A HREF=&quot;http://nhse.npac.syr.edu/random&quot;&gt; some more info&lt;/A&gt;.
                  &lt;p&gt;
                  The correctness of this implementation has been verified against the published output sequence 
                  &lt;a href=&quot;http://www.math.keio.ac.jp/~nisimura/random/real2/mt19937-2.out&quot;&gt;mt19937-2.out&lt;/a&gt; of the C-implementation
                  &lt;a href=&quot;http://www.math.keio.ac.jp/~nisimura/random/real2/mt19937-2.c&quot;&gt;mt19937-2.c&lt;/a&gt;.
                  (Call &lt;tt&gt;test(1000)&lt;/tt&gt; to print the sequence).
                  &lt;dt&gt;
                  Note that this implementation is &lt;b&gt;not synchronized&lt;/b&gt;.                                  
                  &lt;p&gt;
                  &lt;b&gt;Details:&lt;/b&gt; MersenneTwister is designed with consideration of the flaws of various existing generators in mind.
                  It is an improved version of TT800, a very successful generator.
                  MersenneTwister is based on linear recurrences modulo 2.
                  Such generators are very fast, have extremely long periods, and appear quite robust. 
                  MersenneTwister produces 32-bit numbers, and every &lt;tt&gt;k&lt;/tt&gt;-dimensional vector of such numbers appears the same number of times as &lt;tt&gt;k&lt;/tt&gt; successive values over the
                  period length, for each &lt;tt&gt;k &amp;lt;= 623&lt;/tt&gt; (except for the zero vector, which appears one time less).
                  If one looks at only the first &lt;tt&gt;n &amp;lt;= 16&lt;/tt&gt; bits of each number, then the property holds for even larger &lt;tt&gt;k&lt;/tt&gt;, as shown in the following table (taken from the publication cited above):
                  &lt;div align=&quot;center&quot;&gt;
                  &lt;table width=&quot;75%&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
                  &lt;tr&gt; 
                  &lt;td width=&quot;2%&quot;&gt; &lt;div align=&quot;center&quot;&gt;n&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;6%&quot;&gt; &lt;div align=&quot;center&quot;&gt;1&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;2&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;3&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;4&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;5&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;6&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;7&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;8&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;9&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;10&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;11&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;10%&quot;&gt; &lt;div align=&quot;center&quot;&gt;12 .. 16&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;10%&quot;&gt; &lt;div align=&quot;center&quot;&gt;17 .. 32&lt;/div&gt; &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td width=&quot;2%&quot;&gt; &lt;div align=&quot;center&quot;&gt;k&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;6%&quot;&gt; &lt;div align=&quot;center&quot;&gt;19937&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;9968&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;6240&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;4984&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;3738&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;3115&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;2493&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;2492&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;1869&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;1869&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;5%&quot;&gt; &lt;div align=&quot;center&quot;&gt;1248&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;10%&quot;&gt; &lt;div align=&quot;center&quot;&gt;1246&lt;/div&gt; &lt;/td&gt;
                  &lt;td width=&quot;10%&quot;&gt; &lt;div align=&quot;center&quot;&gt;623&lt;/div&gt; &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/div&gt;
                  &lt;p&gt;
                  MersenneTwister generates random numbers in batches of 624 numbers at a time, so the caching and pipelining of modern systems is exploited.
                  The generator is implemented to generate the output by using the fastest arithmetic operations only: 32-bit additions and bit operations (no division, no multiplication, no mod).
                  These operations generate sequences of 32 random bits (&lt;tt&gt;int&lt;/tt&gt;&apos;s).
                  &lt;tt&gt;long&lt;/tt&gt;&apos;s are formed by concatenating two 32 bit &lt;tt&gt;int&lt;/tt&gt;&apos;s.
                  &lt;tt&gt;float&lt;/tt&gt;&apos;s are formed by dividing the interval &lt;tt&gt;[0.0,1.0]&lt;/tt&gt; into 2&lt;sup&gt;32&lt;/sup&gt; sub intervals, then randomly choosing one subinterval.
                  &lt;tt&gt;double&lt;/tt&gt;&apos;s are formed by dividing the interval &lt;tt&gt;[0.0,1.0]&lt;/tt&gt; into 2&lt;sup&gt;64&lt;/sup&gt; sub intervals, then randomly choosing one subinterval.
                  &lt;p&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    java.util.Random                    
                </see>
            </javadoc>
            <declaration name="mti" type="int" line="105"/>
            <declaration name="mt" type="int[]" line="106"/>
            <declaration name="N" type="int" line="107"/>
            <declaration name="M" type="int" line="108"/>
            <declaration name="MATRIX_A" type="int" line="109"/>
            <declaration name="UPPER_MASK" type="int" line="110"/>
            <declaration name="LOWER_MASK" type="int" line="111"/>
            <declaration name="TEMPERING_MASK_B" type="int" line="112"/>
            <declaration name="TEMPERING_MASK_C" type="int" line="113"/>
            <declaration name="mag0" type="int" line="114"/>
            <declaration name="mag1" type="int" line="115"/>
            <declaration name="DEFAULT_SEED" type="int" line="116"/>
            <javadoc line="117">
                Constructs and returns a random number generator with a default seed, which is a &lt;b&gt;constant&lt;/b&gt;.
                  Thus using this constructor will yield generators that always produce exactly the same sequence.
                  This method is mainly intended to ease testing and debugging.                
            </javadoc>
            <method name="MersenneTwister" type="constructor" line="122"/>
            <javadoc line="125">
                Constructs and returns a random number generator with the given seed.                
            </javadoc>
            <method name="MersenneTwister" type="constructor" line="128">
                <params>
                    <param name="seed" type="int"/>
                </params>
            </method>
            <javadoc line="131">
                Constructs and returns a random number generator seeded with the given date.                
                <param>
                    d typically <tt>new java.util.Date()</tt>                    
                </param>
            </javadoc>
            <method name="MersenneTwister" type="constructor" line="135">
                <params>
                    <param name="d" type="Date"/>
                </params>
            </method>
            <javadoc line="138">
                Returns a copy of the receiver; the copy will produce identical sequences.
                  After this call has returned, the copy and the receiver have equal but separate state.                
                <return>
                    a copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="143">
                <declaration name="clone" type="MersenneTwister" line="144"/>
            </method>
            <javadoc line="148">
                Generates N words at one time.                
            </javadoc>
            <method name="nextBlock" type="void" line="151">
                <declaration name="y" type="int" line="152"/>
                <declaration name="kk" type="int" line="153"/>
                <scope line="154"/>
                <scope line="158"/>
            </method>
            <javadoc line="166">
                Returns a 32 bit uniformly distributed random number in the closed interval &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; (including &lt;tt&gt;Integer.MIN_VALUE&lt;/tt&gt; and &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;).                
            </javadoc>
            <method name="nextInt" type="int" line="169">
                <declaration name="y" type="int" line="171"/>
            </method>
            <javadoc line="178">
                Sets the receiver&apos;s seed. 
                  This method resets the receiver&apos;s entire internal state.                
            </javadoc>
            <method name="setSeed" type="void" line="182">
                <params>
                    <param name="seed" type="int"/>
                </params>
                <scope line="184"/>
            </method>
        </class>
    </source>