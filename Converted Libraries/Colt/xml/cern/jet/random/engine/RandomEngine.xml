<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.engine">
        <class name="RandomEngine" line="11">
            <extends class="cern.colt.PersistentObject"/>
            <comment line="36">
                public abstract class RandomEngine extends edu.cornell.lassp.houle.RngPack.RandomSeedable implements cern.colt.function.DoubleFunction, cern.colt.function.IntFunction {                
            </comment>
            <implements interface="cern.colt.function.DoubleFunction"/>
            <implements interface="cern.colt.function.IntFunction"/>
            <javadoc line="11">
                Abstract base class for uniform pseudo-random number generating engines.
                  &lt;p&gt;
                  Most probability distributions are obtained by using a &lt;b&gt;uniform&lt;/b&gt; pseudo-random number generation engine 
                  followed by a transformation to the desired distribution.
                  Thus, subclasses of this class are at the core of computational statistics, simulations, Monte Carlo methods, etc.
                  &lt;p&gt;
                  Subclasses produce uniformly distributed &lt;tt&gt;int&lt;/tt&gt;&apos;s and &lt;tt&gt;long&lt;/tt&gt;&apos;s in the closed intervals &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; and &lt;tt&gt;[Long.MIN_VALUE,Long.MAX_VALUE]&lt;/tt&gt;, respectively, 
                  as well as &lt;tt&gt;float&lt;/tt&gt;&apos;s and &lt;tt&gt;double&lt;/tt&gt;&apos;s in the open unit intervals &lt;tt&gt;(0.0f,1.0f)&lt;/tt&gt; and &lt;tt&gt;(0.0,1.0)&lt;/tt&gt;, respectively.
                  &lt;p&gt;
                  Subclasses need to override one single method only: &lt;tt&gt;nextInt()&lt;/tt&gt;.
                  All other methods generating different data types or ranges are usually layered upon &lt;tt&gt;nextInt()&lt;/tt&gt;.
                  &lt;tt&gt;long&lt;/tt&gt;&apos;s are formed by concatenating two 32 bit &lt;tt&gt;int&lt;/tt&gt;&apos;s.
                  &lt;tt&gt;float&lt;/tt&gt;&apos;s are formed by dividing the interval &lt;tt&gt;[0.0f,1.0f]&lt;/tt&gt; into 2&lt;sup&gt;32&lt;/sup&gt; sub intervals, then randomly choosing one subinterval.
                  &lt;tt&gt;double&lt;/tt&gt;&apos;s are formed by dividing the interval &lt;tt&gt;[0.0,1.0]&lt;/tt&gt; into 2&lt;sup&gt;64&lt;/sup&gt; sub intervals, then randomly choosing one subinterval.
                  &lt;p&gt;
                  Note that this implementation is &lt;b&gt;not synchronized&lt;/b&gt;.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    MersenneTwister                    
                </see>
                <see>
                    MersenneTwister64                    
                </see>
                <see>
                    java.util.Random                    
                </see>
            </javadoc>
            <javadoc line="37">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="RandomEngine" type="constructor" line="40"/>
            <javadoc line="41">
                Equivalent to &lt;tt&gt;raw()&lt;/tt&gt;.
                  This has the effect that random engines can now be used as function objects, returning a random number upon function evaluation.                
            </javadoc>
            <method name="apply" type="double" line="45">
                <params>
                    <param name="dummy" type="double"/>
                </params>
            </method>
            <javadoc line="48">
                Equivalent to &lt;tt&gt;nextInt()&lt;/tt&gt;.
                  This has the effect that random engines can now be used as function objects, returning a random number upon function evaluation.                
            </javadoc>
            <method name="apply" type="int" line="52">
                <params>
                    <param name="dummy" type="int"/>
                </params>
            </method>
            <javadoc line="55">
                Constructs and returns a new uniform random number engine seeded with the current time.
                  Currently this is {@link cern.jet.random.engine.MersenneTwister}.                
            </javadoc>
            <method name="makeDefault" type="RandomEngine" line="59"/>
            <javadoc line="62">
                Returns a 64 bit uniformly distributed random number in the open unit interval &lt;code&gt;(0.0,1.0)&lt;/code&gt; (excluding 0.0 and 1.0).                
            </javadoc>
            <method name="nextDouble" type="double" line="65">
                <comment line="69">
                    -9.223372036854776E18 == (double) Long.MIN_VALUE                    
                </comment>
                <comment line="70">
                    5.421010862427522E-20 == 1 / Math.pow(2,64) == 1 / ((double) Long.MAX_VALUE - (double) Long.MIN_VALUE);                    
                </comment>
                <comment line="73">
                    catch loss of precision of long --&gt; double conversion                    
                </comment>
                <comment line="76">
                    --&gt; in (0.0,1.0)                    
                </comment>
                <comment line="79">
                    nextLong == Long.MAX_VALUE         --&gt; 1.0
                    nextLong == Long.MIN_VALUE         --&gt; 0.0
                    nextLong == Long.MAX_VALUE-1       --&gt; 1.0
                    nextLong == Long.MAX_VALUE-100000L --&gt; 0.9999999999999946
                    nextLong == Long.MIN_VALUE+1       --&gt; 0.0
                    nextLong == Long.MIN_VALUE-100000L --&gt; 0.9999999999999946
                    nextLong == 1L                     --&gt; 0.5
                    nextLong == -1L                    --&gt; 0.5
                    nextLong == 2L                     --&gt; 0.5
                    nextLong == -2L                    --&gt; 0.5
                    nextLong == 2L+100000L             --&gt; 0.5000000000000054
                    nextLong == -2L-100000L            --&gt; 0.49999999999999456                    
                </comment>
                <declaration name="nextDouble" type="double" line="66"/>
                <scope line="68"/>
            </method>
            <javadoc line="94">
                Returns a 32 bit uniformly distributed random number in the open unit interval &lt;code&gt;(0.0f,1.0f)&lt;/code&gt; (excluding 0.0f and 1.0f).                
            </javadoc>
            <method name="nextFloat" type="float" line="97">
                <comment line="98">
                    catch loss of precision of double --&gt; float conversion                    
                </comment>
                <comment line="103">
                    --&gt; in (0.0f,1.0f)                    
                </comment>
                <declaration name="nextFloat" type="float" line="99"/>
                <scope line="100"/>
            </method>
            <method name="nextInt" type="int" line="106"/>
            <javadoc line="106">
                Returns a 32 bit uniformly distributed random number in the closed interval &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; (including &lt;tt&gt;Integer.MIN_VALUE&lt;/tt&gt; and &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;);                
            </javadoc>
            <javadoc line="110">
                Returns a 64 bit uniformly distributed random number in the closed interval &lt;tt&gt;[Long.MIN_VALUE,Long.MAX_VALUE]&lt;/tt&gt; (including &lt;tt&gt;Long.MIN_VALUE&lt;/tt&gt; and &lt;tt&gt;Long.MAX_VALUE&lt;/tt&gt;).                
            </javadoc>
            <method name="nextLong" type="long" line="113">
                <comment line="114">
                    concatenate two 32-bit strings into one 64-bit string                    
                </comment>
            </method>
            <javadoc line="118">
                Returns a 32 bit uniformly distributed random number in the open unit interval &lt;code&gt;(0.0,1.0)&lt;/code&gt; (excluding 0.0 and 1.0).                
            </javadoc>
            <method name="raw" type="double" line="121">
                <comment line="123">
                    accept anything but zero                    
                </comment>
                <comment line="124">
                    in [Integer.MIN_VALUE,Integer.MAX_VALUE]-interval                    
                </comment>
                <comment line="127">
                    transform to (0.0,1.0)-interval                    
                </comment>
                <comment line="128">
                    2.3283064365386963E-10 == 1.0 / Math.pow(2,32)                    
                </comment>
                <comment line="131">
                    nextInt == Integer.MAX_VALUE   --&gt; 0.49999999976716936
                    nextInt == Integer.MIN_VALUE   --&gt; 0.5
                    nextInt == Integer.MAX_VALUE-1 --&gt; 0.4999999995343387
                    nextInt == Integer.MIN_VALUE+1 --&gt; 0.5000000002328306
                    nextInt == 1                   --&gt; 2.3283064365386963E-10
                    nextInt == -1                  --&gt; 0.9999999997671694
                    nextInt == 2                   --&gt; 4.6566128730773926E-10
                    nextInt == -2                  --&gt; 0.9999999995343387                    
                </comment>
                <declaration name="nextInt" type="int" line="122"/>
                <scope line="123"/>
            </method>
        </class>
    </source>