<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.engine">
        <class name="RandomEngine" line="2">
            <extends class="cern.colt.PersistentObject"/>
            <implements interface="cern.colt.function.DoubleFunction"/>
            <implements interface="cern.colt.function.IntFunction"/>
            <javadoc line="2">
                Abstract base class for uniform pseudo-random number generating engines.
                  &lt;p&gt;
                  Most probability distributions are obtained by using a &lt;b&gt;uniform&lt;/b&gt; pseudo-random number generation engine 
                  followed by a transformation to the desired distribution.
                  Thus, subclasses of this class are at the core of computational statistics, simulations, Monte Carlo methods, etc.
                  &lt;p&gt;
                  Subclasses produce uniformly distributed &lt;tt&gt;int&lt;/tt&gt;&apos;s and &lt;tt&gt;long&lt;/tt&gt;&apos;s in the closed intervals &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; and &lt;tt&gt;[Long.MIN_VALUE,Long.MAX_VALUE]&lt;/tt&gt;, respectively, 
                  as well as &lt;tt&gt;float&lt;/tt&gt;&apos;s and &lt;tt&gt;double&lt;/tt&gt;&apos;s in the open unit intervals &lt;tt&gt;(0.0f,1.0f)&lt;/tt&gt; and &lt;tt&gt;(0.0,1.0)&lt;/tt&gt;, respectively.
                  &lt;p&gt;
                  Subclasses need to override one single method only: &lt;tt&gt;nextInt()&lt;/tt&gt;.
                  All other methods generating different data types or ranges are usually layered upon &lt;tt&gt;nextInt()&lt;/tt&gt;.
                  &lt;tt&gt;long&lt;/tt&gt;&apos;s are formed by concatenating two 32 bit &lt;tt&gt;int&lt;/tt&gt;&apos;s.
                  &lt;tt&gt;float&lt;/tt&gt;&apos;s are formed by dividing the interval &lt;tt&gt;[0.0f,1.0f]&lt;/tt&gt; into 2&lt;sup&gt;32&lt;/sup&gt; sub intervals, then randomly choosing one subinterval.
                  &lt;tt&gt;double&lt;/tt&gt;&apos;s are formed by dividing the interval &lt;tt&gt;[0.0,1.0]&lt;/tt&gt; into 2&lt;sup&gt;64&lt;/sup&gt; sub intervals, then randomly choosing one subinterval.
                  &lt;p&gt;
                  Note that this implementation is &lt;b&gt;not synchronized&lt;/b&gt;.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    MersenneTwister                    
                </see>
                <see>
                    MersenneTwister64                    
                </see>
                <see>
                    java.util.Random                    
                </see>
            </javadoc>
            <javadoc line="26">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="RandomEngine" type="constructor" line="29"/>
            <javadoc line="31">
                Equivalent to &lt;tt&gt;raw()&lt;/tt&gt;.
                  This has the effect that random engines can now be used as function objects, returning a random number upon function evaluation.                
            </javadoc>
            <method name="apply" type="double" line="35">
                <params>
                    <param name="dummy" type="double"/>
                </params>
            </method>
            <javadoc line="38">
                Equivalent to &lt;tt&gt;nextInt()&lt;/tt&gt;.
                  This has the effect that random engines can now be used as function objects, returning a random number upon function evaluation.                
            </javadoc>
            <method name="apply" type="int" line="42">
                <params>
                    <param name="dummy" type="int"/>
                </params>
            </method>
            <javadoc line="45">
                Constructs and returns a new uniform random number engine seeded with the current time.
                  Currently this is {@link cern.jet.random.engine.MersenneTwister}.                
            </javadoc>
            <method name="makeDefault" type="RandomEngine" line="49"/>
            <javadoc line="52">
                Returns a 64 bit uniformly distributed random number in the open unit interval &lt;code&gt;(0.0,1.0)&lt;/code&gt; (excluding 0.0 and 1.0).                
            </javadoc>
            <method name="nextDouble" type="double" line="55">
                <declaration name="nextDouble" type="double" line="56"/>
                <scope line="57"/>
            </method>
            <javadoc line="63">
                Returns a 32 bit uniformly distributed random number in the open unit interval &lt;code&gt;(0.0f,1.0f)&lt;/code&gt; (excluding 0.0f and 1.0f).                
            </javadoc>
            <method name="nextFloat" type="float" line="66">
                <declaration name="nextFloat" type="float" line="67"/>
                <scope line="68"/>
            </method>
            <method name="nextInt" type="int" line="74"/>
            <javadoc line="74">
                Returns a 32 bit uniformly distributed random number in the closed interval &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; (including &lt;tt&gt;Integer.MIN_VALUE&lt;/tt&gt; and &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;);                
            </javadoc>
            <javadoc line="78">
                Returns a 64 bit uniformly distributed random number in the closed interval &lt;tt&gt;[Long.MIN_VALUE,Long.MAX_VALUE]&lt;/tt&gt; (including &lt;tt&gt;Long.MIN_VALUE&lt;/tt&gt; and &lt;tt&gt;Long.MAX_VALUE&lt;/tt&gt;).                
            </javadoc>
            <method name="nextLong" type="long" line="81"/>
            <javadoc line="84">
                Returns a 32 bit uniformly distributed random number in the open unit interval &lt;code&gt;(0.0,1.0)&lt;/code&gt; (excluding 0.0 and 1.0).                
            </javadoc>
            <method name="raw" type="double" line="87">
                <declaration name="nextInt" type="int" line="88"/>
                <scope line="89"/>
            </method>
        </class>
    </source>