<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="EmpiricalWalker" line="3">
            <extends class="AbstractDiscreteDistribution"/>
            <javadoc line="3">
                Discrete Empirical distribution (pdf&apos;s can be specified).
                  &lt;p&gt;
                  The probability distribution function (pdf) must be provided by the user as an array of positive real numbers. 
                  The pdf does not need to be provided in the form of relative probabilities, absolute probabilities are also accepted.
                  &lt;p&gt;
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  Walker&apos;s algorithm. 
                  Generating a random number takes &lt;tt&gt;O(1)&lt;/tt&gt;, i.e. constant time, as opposed to commonly used algorithms with logarithmic time complexity.
                  Preprocessing time (on object construction) is &lt;tt&gt;O(k)&lt;/tt&gt; where &lt;tt&gt;k&lt;/tt&gt; is the number of elements of the provided empirical pdf.
                  Space complexity is &lt;tt&gt;O(k)&lt;/tt&gt;.
                  &lt;p&gt;
                  This is a port of &lt;A HREF=&quot;http://sourceware.cygnus.com/cgi-bin/cvsweb.cgi/gsl/randist/discrete.c?cvsroot=gsl&quot;&gt;discrete.c&lt;/A&gt; which was written by James Theiler and is distributed with &lt;A HREF=&quot;http://sourceware.cygnus.com/gsl/&quot;&gt;GSL 0.4.1&lt;/A&gt;.
                  Theiler&apos;s implementation in turn is based upon
                  &lt;p&gt;
                  Alastair J. Walker, An efficient method for generating
                  discrete random variables with general distributions, ACM Trans
                  Math Soft 3, 253-256 (1977).
                  &lt;p&gt;
                  See also: D. E. Knuth, The Art of
                  Computer Programming, Volume 2 (Seminumerical algorithms), 3rd
                  edition, Addison-Wesley (1997), p120.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="K" type="int" line="34"/>
            <declaration name="A" type="int[]" line="35"/>
            <declaration name="F" type="double[]" line="36"/>
            <declaration name="cdf" type="double[]" line="37"/>
            <javadoc line="38">
                Constructs an Empirical distribution.
                  The probability distribution function (pdf) is an array of positive real numbers. 
                  It need not be provided in the form of relative probabilities, absolute probabilities are also accepted.
                  The &lt;tt&gt;pdf&lt;/tt&gt; must satisfy both of the following conditions
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;0.0 &amp;lt;= pdf[i] : 0&amp;lt;=i&amp;lt;=pdf.length-1&lt;/tt&gt;
                  &lt;li&gt;&lt;tt&gt;0.0 &amp;lt; Sum(pdf[i]) : 0&amp;lt;=i&amp;lt;=pdf.length-1&lt;/tt&gt;
                  &lt;/ul&gt;                
                <param>
                    pdf the probability distribution function.                    
                </param>
                <param>
                    interpolationType can be either <tt>Empirical.NO_INTERPOLATION</tt> or <tt>Empirical.LINEAR_INTERPOLATION</tt>.                    
                </param>
                <param>
                    randomGenerator a uniform random number generator.                    
                </param>
                <throws>
                    IllegalArgumentException if at least one of the three conditions above is violated.                    
                </throws>
            </javadoc>
            <method name="EmpiricalWalker" type="constructor" line="52">
                <params>
                    <param name="pdf" type="double[]"/>
                    <param name="interpolationType" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="57">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="60">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Returns a deep copy of the receiver; the copy will produce identical sequences.
                  After this call has returned, the copy and the receiver have equal but separate state.                
                <return>
                    a copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="70">
                <declaration name="copy" type="EmpiricalWalker" line="71"/>
            </method>
            <javadoc line="77">
                Returns a random integer &lt;tt&gt;k&lt;/tt&gt; with probability &lt;tt&gt;pdf(k)&lt;/tt&gt;.                
            </javadoc>
            <method name="nextInt" type="int" line="80">
                <declaration name="c" type="int" line="81"/>
                <declaration name="u" type="double" line="82"/>
                <scope line="89"/>
                <scope line="92"/>
            </method>
            <javadoc line="96">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="99">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="103">
                Sets the distribution parameters.
                  The &lt;tt&gt;pdf&lt;/tt&gt; must satisfy all of the following conditions
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;pdf != null &amp;&amp; pdf.length &amp;gt; 0&lt;/tt&gt;
                  &lt;li&gt;&lt;tt&gt;0.0 &amp;lt;= pdf[i] : 0 &amp;lt; =i &amp;lt;= pdf.length-1&lt;/tt&gt;
                  &lt;li&gt;&lt;tt&gt;0.0 &amp;lt; Sum(pdf[i]) : 0 &amp;lt;=i &amp;lt;= pdf.length-1&lt;/tt&gt;
                  &lt;/ul&gt;                
                <param>
                    pdf probability distribution function.                    
                </param>
                <throws>
                    IllegalArgumentException if at least one of the three conditions above is violated.                    
                </throws>
            </javadoc>
            <method name="setState" type="void" line="114">
                <params>
                    <param name="pdf" type="double[]"/>
                    <param name="interpolationType" type="int"/>
                </params>
                <scope line="115"/>
                <declaration name="nBins" type="int" line="118"/>
                <scope line="121"/>
                <scope line="126"/>
            </method>
            <javadoc line="130">
                Sets the distribution parameters.
                  The &lt;tt&gt;pdf&lt;/tt&gt; must satisfy both of the following conditions
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;0.0 &amp;lt;= pdf[i] : 0 &amp;lt; =i &amp;lt;= pdf.length-1&lt;/tt&gt;
                  &lt;li&gt;&lt;tt&gt;0.0 &amp;lt; Sum(pdf[i]) : 0 &amp;lt;=i &amp;lt;= pdf.length-1&lt;/tt&gt;
                  &lt;/ul&gt;                
                <param>
                    pdf probability distribution function.                    
                </param>
                <throws>
                    IllegalArgumentException if at least one of the three conditions above is violated.                    
                </throws>
            </javadoc>
            <method name="setState2" type="void" line="140">
                <params>
                    <param name="pdf" type="double[]"/>
                </params>
                <declaration name="size" type="int" line="141"/>
                <declaration name="k" type="int" line="142"/>
                <declaration name="nBigs" type="int" line="143"/>
                <declaration name="Bigs" type="Stack" line="144"/>
                <declaration name="Smalls" type="Stack" line="145"/>
                <declaration name="E" type="double[]" line="146"/>
                <declaration name="pTotal" type="double" line="147"/>
                <declaration name="mean" type="double" line="148"/>
                <scope line="149"/>
                <scope line="156"/>
                <scope line="162"/>
                <scope line="168">
                    <scope line="169"/>
                    <scope line="172"/>
                </scope>
                <scope line="176">
                    <scope line="178"/>
                    <scope line="189"/>
                    <scope line="192"/>
                    <scope line="195"/>
                </scope>
                <scope line="200"/>
            </method>
            <javadoc line="206">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="209">
                <declaration name="interpolation" type="String" line="210"/>
            </method>
        </class>
    </source>