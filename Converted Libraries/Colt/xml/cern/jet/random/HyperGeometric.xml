<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.math.Arithmetic"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="HyperGeometric" line="4">
            <extends class="AbstractDiscreteDistribution"/>
            <javadoc line="4">
                HyperGeometric distribution; See the &lt;A HREF=&quot;http://library.advanced.org/10030/6atpdvah.htm&quot;&gt; math definition&lt;/A&gt;
                  The hypergeometric distribution with parameters &lt;tt&gt;N&lt;/tt&gt;, &lt;tt&gt;n&lt;/tt&gt; and &lt;tt&gt;s&lt;/tt&gt; is the probability distribution of the random variable X, 
                  whose value is the number of successes in a sample of &lt;tt&gt;n&lt;/tt&gt; items from a population of size &lt;tt&gt;N&lt;/tt&gt; that has &lt;tt&gt;s&lt;/tt&gt; &apos;success&apos; items and &lt;tt&gt;N - s&lt;/tt&gt; &apos;failure&apos; items.
                  &lt;p&gt;            
                  &lt;tt&gt;p(k) = C(s,k)  C(N-s,n-k) / C(N,n)&lt;/tt&gt; where &lt;tt&gt;C(a,b) = a! / (b!  (a-b)!)&lt;/tt&gt;.
                  &lt;p&gt;
                  valid for N &gt;= 2, s,n &lt;= N. 
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation.
                  Patchwork Rejection/Inversion method.
                  &lt;dt&gt;This is a port of &lt;tt&gt;hprsc.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  H. Zechner (1994): Efficient sampling from continuous and discrete unimodal distributions,
                  Doctoral Dissertation, 156 pp., Technical University Graz, Austria.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="my_N" type="int" line="28"/>
            <declaration name="my_s" type="int" line="29"/>
            <declaration name="my_n" type="int" line="30"/>
            <declaration name="N_last" type="int" line="31"/>
            <declaration name="N_Mn" type="int" line="32"/>
            <declaration name="mp" type="int" line="33"/>
            <declaration name="Mp" type="double" line="34"/>
            <declaration name="k2" type="int" line="35"/>
            <declaration name="dl" type="double" line="36"/>
            <declaration name="shared" type="HyperGeometric" line="37"/>
            <javadoc line="38">
                Constructs a HyperGeometric distribution.                
            </javadoc>
            <method name="HyperGeometric" type="constructor" line="41">
                <params>
                    <param name="N" type="int"/>
                    <param name="s" type="int"/>
                    <param name="n" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <method name="fc_lnpk" type="double" line="45">
                <params>
                    <param name="k" type="int"/>
                    <param name="N_Mn" type="int"/>
                    <param name="M" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="48">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="hmdu" type="int" line="51">
                <params>
                    <param name="N" type="int"/>
                    <param name="M" type="int"/>
                    <param name="n" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="I" type="int" line="52"/>
                <declaration name="p" type="double" line="53"/>
                <scope line="54">
                    <scope line="63"/>
                    <scope line="66"/>
                </scope>
                <scope line="73">
                    <scope line="76"/>
                    <scope line="84"/>
                </scope>
            </method>
            <javadoc line="90">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="hprs" type="int" line="93">
                <params>
                    <param name="N" type="int"/>
                    <param name="M" type="int"/>
                    <param name="n" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="Dk" type="int" line="94"/>
                <declaration name="Mp" type="double" line="95"/>
                <scope line="96"/>
                <scope line="132">
                    <scope line="133">
                        <scope line="137"/>
                        <scope line="140">
                            <scope line="142"/>
                            <scope line="145"/>
                        </scope>
                    </scope>
                    <scope line="151">
                        <scope line="155"/>
                        <scope line="158">
                            <scope line="160"/>
                            <scope line="163"/>
                        </scope>
                    </scope>
                    <scope line="169">
                        <scope line="171">
                            <scope line="175"/>
                        </scope>
                        <scope line="179">
                            <scope line="183"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="191">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="194"/>
            <javadoc line="197">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="200">
                <params>
                    <param name="N" type="int"/>
                    <param name="s" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="203">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="206">
                <params>
                    <param name="N" type="int"/>
                    <param name="M" type="int"/>
                    <param name="n" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="Nhalf" type="int" line="207"/>
                <scope line="211"/>
                <scope line="214"/>
                <scope line="217"/>
                <scope line="220"/>
            </method>
            <javadoc line="224">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="227">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="230">
                Sets the parameters.                
            </javadoc>
            <method name="setState" type="void" line="233">
                <params>
                    <param name="N" type="int"/>
                    <param name="s" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="238">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="staticNextInt" type="double" line="241">
                <params>
                    <param name="N" type="int"/>
                    <param name="M" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="242"/>
            </method>
            <javadoc line="246">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="249"/>
            <javadoc line="252">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="256">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="257"/>
            </method>
        </class>
    </source>