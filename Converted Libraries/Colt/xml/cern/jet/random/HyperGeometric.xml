<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.math.Arithmetic"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="HyperGeometric" line="13">
            <extends class="AbstractDiscreteDistribution"/>
            <comment line="44">
                cached vars shared by hmdu(...) and hprs(...)                
            </comment>
            <comment line="48">
                cached vars for hmdu(...)                
            </comment>
            <comment line="52">
                cached vars for hprs(...)                
            </comment>
            <comment line="58">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="13">
                HyperGeometric distribution; See the &lt;A HREF=&quot;http://library.advanced.org/10030/6atpdvah.htm&quot;&gt; math definition&lt;/A&gt;
                  The hypergeometric distribution with parameters &lt;tt&gt;N&lt;/tt&gt;, &lt;tt&gt;n&lt;/tt&gt; and &lt;tt&gt;s&lt;/tt&gt; is the probability distribution of the random variable X, 
                  whose value is the number of successes in a sample of &lt;tt&gt;n&lt;/tt&gt; items from a population of size &lt;tt&gt;N&lt;/tt&gt; that has &lt;tt&gt;s&lt;/tt&gt; &apos;success&apos; items and &lt;tt&gt;N - s&lt;/tt&gt; &apos;failure&apos; items.
                  &lt;p&gt;            
                  &lt;tt&gt;p(k) = C(s,k)  C(N-s,n-k) / C(N,n)&lt;/tt&gt; where &lt;tt&gt;C(a,b) = a! / (b!  (a-b)!)&lt;/tt&gt;.
                  &lt;p&gt;
                  valid for N &gt;= 2, s,n &lt;= N. 
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation.
                  Patchwork Rejection/Inversion method.
                  &lt;dt&gt;This is a port of &lt;tt&gt;hprsc.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  H. Zechner (1994): Efficient sampling from continuous and discrete unimodal distributions,
                  Doctoral Dissertation, 156 pp., Technical University Graz, Austria.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="my_N" type="int" line="39"/>
            <declaration name="my_s" type="int" line="40"/>
            <declaration name="my_n" type="int" line="41"/>
            <declaration name="N_last" type="int" line="44"/>
            <declaration name="N_Mn" type="int" line="45"/>
            <declaration name="mp" type="int" line="48"/>
            <declaration name="Mp" type="double" line="49"/>
            <declaration name="k2" type="int" line="52"/>
            <declaration name="dl" type="double" line="53"/>
            <declaration name="shared" type="HyperGeometric" line="58"/>
            <javadoc line="59">
                Constructs a HyperGeometric distribution.                
            </javadoc>
            <method name="HyperGeometric" type="constructor" line="62">
                <params>
                    <param name="N" type="int"/>
                    <param name="s" type="int"/>
                    <param name="n" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <method name="fc_lnpk" type="double" line="66">
                <params>
                    <param name="k" type="int"/>
                    <param name="N_Mn" type="int"/>
                    <param name="M" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="69">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="hmdu" type="int" line="72">
                <params>
                    <param name="N" type="int"/>
                    <param name="M" type="int"/>
                    <param name="n" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="77">
                    set-up           */                    
                </comment>
                <comment line="86">
                                        
                </comment>
                <comment line="87">
                                        
                </comment>
                <comment line="91">
                                        
                </comment>
                <comment line="94">
                                        
                </comment>
                <comment line="99">
                                        
                </comment>
                <comment line="100">
                                        
                </comment>
                <comment line="109">
                                        
                </comment>
                <comment line="111">
                                        
                </comment>
                <comment line="115">
                                        
                </comment>
                <comment line="120">
                                        
                </comment>
                <declaration name="I" type="int" line="74"/>
                <declaration name="p" type="double" line="75"/>
                <scope line="77">
                    <scope line="87"/>
                    <scope line="90"/>
                </scope>
                <scope line="105">
                    <scope line="110"/>
                    <scope line="121"/>
                </scope>
            </method>
            <javadoc line="127">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="hprs" type="int" line="130">
                <params>
                    <param name="N" type="int"/>
                    <param name="M" type="int"/>
                    <param name="n" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="132">
                                        
                </comment>
                <comment line="134">
                                        
                </comment>
                <comment line="142">
                    main parameters                    
                </comment>
                <comment line="144">
                    approximate deviation of reflection points k2, k4 from nu - 1/2                    
                </comment>
                <comment line="147">
                    mode m, reflection points k2 and k4, and points k1 and k5, which                    
                </comment>
                <comment line="148">
                    delimit the centre region of h(x)                    
                </comment>
                <comment line="149">
                    k2 = ceil (nu - 1/2 - U),    k1 = 2*k2 - (m - 1 + delta_ml)                    
                </comment>
                <comment line="150">
                    k4 = floor(nu - 1/2 + U),    k5 = 2*k4 - (m + 1 - delta_mr)                    
                </comment>
                <comment line="155">
                    delta_ml = 0                    
                </comment>
                <comment line="156">
                    delta_mr = 1                    
                </comment>
                <comment line="158">
                    range width of the critical left and right centre region                    
                </comment>
                <comment line="162">
                    recurrence constants r(k) = p(k)/p(k-1) at k = k1, k2, k4+1, k5+1                    
                </comment>
                <comment line="168">
                    reciprocal values of the scale parameters of expon. tail envelopes                    
                </comment>
                <comment line="169">
                    expon. tail left  //                    
                </comment>
                <comment line="170">
                    expon. tail right //                    
                </comment>
                <comment line="172">
                    hypergeom. constant, necessary for computing function values f(k)                    
                </comment>
                <comment line="175">
                    function values f(k) = p(k)/p(m)  at  k = k2, k4, k1, k5                    
                </comment>
                <comment line="181">
                    area of the two centre and the two exponential tail regions                    
                </comment>
                <comment line="182">
                    area of the two immediate acceptance regions between k2, k4                    
                </comment>
                <comment line="183">
                    immed. left                    
                </comment>
                <comment line="184">
                    centre left                    
                </comment>
                <comment line="185">
                    immed. right                    
                </comment>
                <comment line="186">
                    centre right                    
                </comment>
                <comment line="187">
                    expon. tail left                    
                </comment>
                <comment line="188">
                    expon. tail right                    
                </comment>
                <comment line="192">
                    generate uniform number U -- U(0, p6)                    
                </comment>
                <comment line="193">
                    case distinction corresponding to U                    
                </comment>
                <comment line="194">
                    centre left                    
                </comment>
                <comment line="196">
                    immediate acceptance region R2 = [k2, m) *[0, f2),  X = k2, ... m -1                    
                </comment>
                <comment line="198">
                    immediate acceptance region R1 = [k1, k2)*[0, f1),  X = k1, ... k2-1                    
                </comment>
                <comment line="201">
                    computation of candidate X &lt; k2, and its counterpart V &gt; k2                    
                </comment>
                <comment line="202">
                    either squeeze-acceptance of X or acceptance-rejection of V                    
                </comment>
                <comment line="204">
                    quick accept of                    
                </comment>
                <comment line="205">
                    X = k2 - Dk                    
                </comment>
                <comment line="207">
                    quick reject of V                    
                </comment>
                <comment line="209">
                    quick accept of                    
                </comment>
                <comment line="210">
                    V = k2 + Dk                    
                </comment>
                <comment line="213">
                    final accept of V                    
                </comment>
                <comment line="218">
                    centre right                    
                </comment>
                <comment line="220">
                    immediate acceptance region R3 = [m, k4+1)*[0, f4), X = m, ... k4                    
                </comment>
                <comment line="222">
                    immediate acceptance region R4 = [k4+1, k5+1)*[0, f5)                    
                </comment>
                <comment line="225">
                    computation of candidate X &gt; k4, and its counterpart V &lt; k4                    
                </comment>
                <comment line="226">
                    either squeeze-acceptance of X or acceptance-rejection of V                    
                </comment>
                <comment line="228">
                    quick accept of                    
                </comment>
                <comment line="229">
                    X = k4 + Dk                    
                </comment>
                <comment line="231">
                    quick reject of V                    
                </comment>
                <comment line="233">
                    quick accept of                    
                </comment>
                <comment line="234">
                    V = k4 - Dk                    
                </comment>
                <comment line="237">
                    final accept of V                    
                </comment>
                <comment line="244">
                    expon. tail left                    
                </comment>
                <comment line="246">
                    0 &lt;= X &lt;= k1 - 1                    
                </comment>
                <comment line="247">
                    Y -- U(0, h(x))                    
                </comment>
                <comment line="249">
                    quick accept of X                    
                </comment>
                <comment line="252">
                    expon. tail right                    
                </comment>
                <comment line="254">
                    k5 + 1 &lt;= X &lt;= n                    
                </comment>
                <comment line="255">
                    Y -- U(0, h(x))   /                    
                </comment>
                <comment line="257">
                    quick accept of X                    
                </comment>
                <comment line="262">
                    acceptance-rejection test of candidate X from the original area                    
                </comment>
                <comment line="263">
                    test, whether  Y &lt;= f(X),    with  Y = U*h(x)  and  U -- U(0, 1)                    
                </comment>
                <comment line="264">
                    log f(X) = log( m! (M - m)! (n - m)! (N - M - n + m)! )                    
                </comment>
                <comment line="265">
                    - log( X! (M - X)! (n - X)! (N - M - n + X)! )                    
                </comment>
                <comment line="266">
                    by using an external function for log k!                    
                </comment>
                <declaration name="Dk" type="int" line="131"/>
                <declaration name="Mp" type="double" line="132"/>
                <scope line="134"/>
                <scope line="191">
                    <scope line="194">
                        <scope line="204"/>
                        <scope line="207">
                            <scope line="209"/>
                            <scope line="212"/>
                        </scope>
                    </scope>
                    <scope line="218">
                        <scope line="228"/>
                        <scope line="231">
                            <scope line="233"/>
                            <scope line="236"/>
                        </scope>
                    </scope>
                    <scope line="242">
                        <scope line="244">
                            <scope line="248"/>
                        </scope>
                        <scope line="252">
                            <scope line="256"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="270">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="273"/>
            <javadoc line="276">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="279">
                <params>
                    <param name="N" type="int"/>
                    <param name="s" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="282">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="285">
                <params>
                    <param name="N" type="int"/>
                    <param name="M" type="int"/>
                    <param name="n" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="286">
                    Hypergeometric Distribution - Patchwork RejectionInversion    
                                                                                    
                    
                                                                                    
                     The basic algorithms work for parameters 1 &lt;= n &lt;= M &lt;= N2.   
                     Otherwise parameters are re-defined in the set-up step and the 
                     random number K is adapted before delivering.                  
                     For l = m-max(0,n-N+M) &lt; 10  Inversion method hmdu is applied: 
                     The random numbers are generated via modal down-up search,     
                     starting at the mode m. The cumulative probabilities           
                     are avoided by using the technique of chop-down.               
                     For l &gt;= 10  the Patchwork Rejection method  hprs is employed: 
                     The area below the histogram function f(x) in its              
                     body is rearranged by certain point reflections. Within a      
                     large center interval variates are sampled efficiently by      
                     rejection from uniform hats. Rectangular immediate acceptance  
                     regions speed up the generation. The remaining tails are       
                     covered by exponential functions.                              
                                                                                    
                    
                                                                                    
                     FUNCTION :   - hprsc samples a random number from the          
                                    Hypergeometric distribution with parameters     
                                    N (number of red and black balls), M (number    
                                    of red balls) and n (number of trials)          
                                    valid for N &gt;= 2, M,n &lt;= N.                     
                     REFERENCE :  - H. Zechner (1994): Efficient sampling from      
                                    continuous and discrete unimodal distributions, 
                                    Doctoral Dissertation, 156 pp., Technical       
                                    University Graz, Austria.                       
                     SUBPROGRAMS: - flogfak(k)  ... log(k!) with long integer k     
                                  - drand(seed) ... (0,1)-Uniform generator with    
                                    unsigned long integer seed.                    
                                  - hmdu(seed,N,M,n) ... Hypergeometric generator   
                                    for l&lt;10                                        
                                  - hprs(seed,N,M,n) ... Hypergeometric generator   
                                    for l&gt;=10 with unsigned long integer seed,     
                                    long integer  N , M , n.                    
                </comment>
                <declaration name="Nhalf" type="int" line="328"/>
                <scope line="334"/>
                <scope line="339"/>
                <scope line="345"/>
                <scope line="348"/>
            </method>
            <javadoc line="352">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="355">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="359">
                Sets the parameters.                
            </javadoc>
            <method name="setState" type="void" line="362">
                <params>
                    <param name="N" type="int"/>
                    <param name="s" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="367">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="staticNextInt" type="double" line="370">
                <params>
                    <param name="N" type="int"/>
                    <param name="M" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="371"/>
            </method>
            <javadoc line="375">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="378"/>
            <javadoc line="381">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="385">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="386"/>
            </method>
        </class>
    </source>