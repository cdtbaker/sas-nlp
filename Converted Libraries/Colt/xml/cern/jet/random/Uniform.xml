<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="Uniform" line="3">
            <extends class="AbstractContinousDistribution"/>
            <javadoc line="3">
                Uniform distribution; &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node292.html#SECTION0002920000000000000000&quot;&gt; Math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosu.html#Uniform Distribution&quot;&gt; animated definition&lt;/A&gt;.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="min" type="double" line="15"/>
            <declaration name="max" type="double" line="16"/>
            <declaration name="shared" type="Uniform" line="17"/>
            <javadoc line="18">
                Constructs a uniform distribution with the given minimum and maximum, using a {@link cern.jet.random.engine.MersenneTwister} seeded with the given seed.                
            </javadoc>
            <method name="Uniform" type="constructor" line="21">
                <params>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="seed" type="int"/>
                </params>
            </method>
            <javadoc line="24">
                Constructs a uniform distribution with the given minimum and maximum.                
            </javadoc>
            <method name="Uniform" type="constructor" line="27">
                <params>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="31">
                Constructs a uniform distribution with &lt;tt&gt;min=0.0&lt;/tt&gt; and &lt;tt&gt;max=1.0&lt;/tt&gt;.                
            </javadoc>
            <method name="Uniform" type="constructor" line="34">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="37">
                Returns the cumulative distribution function (assuming a continous uniform distribution).                
            </javadoc>
            <method name="cdf" type="double" line="40">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="45">
                Returns a uniformly distributed random &lt;tt&gt;boolean&lt;/tt&gt;.                
            </javadoc>
            <method name="nextBoolean" type="boolean" line="48"/>
            <javadoc line="51">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(min,max)&lt;/tt&gt; (excluding &lt;tt&gt;min&lt;/tt&gt; and &lt;tt&gt;max&lt;/tt&gt;).                
            </javadoc>
            <method name="nextDouble" type="double" line="54"/>
            <javadoc line="57">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                  Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="nextDoubleFromTo" type="double" line="61">
                <params>
                    <param name="from" type="double"/>
                    <param name="to" type="double"/>
                </params>
            </method>
            <javadoc line="64">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                  Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="nextFloatFromTo" type="float" line="68">
                <params>
                    <param name="from" type="float"/>
                    <param name="to" type="float"/>
                </params>
            </method>
            <javadoc line="71">
                Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[min,max]&lt;/tt&gt; (including &lt;tt&gt;min&lt;/tt&gt; and &lt;tt&gt;max&lt;/tt&gt;).                
            </javadoc>
            <method name="nextInt" type="int" line="74"/>
            <javadoc line="77">
                Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                  Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="nextIntFromTo" type="int" line="81">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
            </method>
            <javadoc line="84">
                Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                  Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="nextLongFromTo" type="long" line="88">
                <params>
                    <param name="from" type="long"/>
                    <param name="to" type="long"/>
                </params>
                <scope line="89"/>
                <declaration name="diff" type="double" line="92"/>
                <scope line="93"/>
                <declaration name="random" type="long" line="96"/>
                <scope line="97">
                    <scope line="98">
                        <declaration name="i1" type="int" line="99"/>
                        <declaration name="i2" type="int" line="100"/>
                    </scope>
                </scope>
                <scope line="106"/>
            </method>
            <javadoc line="112">
                Returns the probability distribution function (assuming a continous uniform distribution).                
            </javadoc>
            <method name="pdf" type="double" line="115">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="119">
                Sets the internal state.                
            </javadoc>
            <method name="setState" type="void" line="122">
                <params>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                </params>
                <scope line="123"/>
            </method>
            <javadoc line="130">
                Returns a uniformly distributed random &lt;tt&gt;boolean&lt;/tt&gt;.                
            </javadoc>
            <method name="staticNextBoolean" type="boolean" line="133">
                <scope line="134"/>
            </method>
            <javadoc line="138">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(0,1)&lt;/tt&gt; (excluding &lt;tt&gt;0&lt;/tt&gt; and &lt;tt&gt;1&lt;/tt&gt;).                
            </javadoc>
            <method name="staticNextDouble" type="double" line="141">
                <scope line="142"/>
            </method>
            <javadoc line="146">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                  Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="staticNextDoubleFromTo" type="double" line="150">
                <params>
                    <param name="from" type="double"/>
                    <param name="to" type="double"/>
                </params>
                <scope line="151"/>
            </method>
            <javadoc line="155">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                  Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="staticNextFloatFromTo" type="float" line="159">
                <params>
                    <param name="from" type="float"/>
                    <param name="to" type="float"/>
                </params>
                <scope line="160"/>
            </method>
            <javadoc line="164">
                Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                  Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="staticNextIntFromTo" type="int" line="168">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <scope line="169"/>
            </method>
            <javadoc line="173">
                Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                  Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="staticNextLongFromTo" type="long" line="177">
                <params>
                    <param name="from" type="long"/>
                    <param name="to" type="long"/>
                </params>
                <scope line="178"/>
            </method>
            <javadoc line="182">
                Sets the uniform random number generation engine shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generation engine to be shared.                    
                </param>
            </javadoc>
            <method name="staticSetRandomEngine" type="void" line="186">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="187"/>
            </method>
            <javadoc line="191">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="194"/>
        </class>
    </source>