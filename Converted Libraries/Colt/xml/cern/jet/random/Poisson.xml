<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.math.Arithmetic"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="Poisson" line="14">
            <extends class="AbstractDiscreteDistribution"/>
            <comment line="47">
                precomputed and cached values (for performance only)                
            </comment>
            <comment line="48">
                cache for &lt; SWITCH_MEAN                
            </comment>
            <comment line="54">
                cache for &gt;= SWITCH_MEAN                
            </comment>
            <comment line="61">
                cache for both;                
            </comment>
            <comment line="65">
                for all means larger than that, we don&apos;t try to compute a poisson deviation, but return the mean.                
            </comment>
            <comment line="66">
                switch from method A to method B                
            </comment>
            <comment line="69">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="14">
                Poisson distribution (quick); See the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node208.html#SECTION0002080000000000000000&quot;&gt; math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosp.html#Poisson Distribution&quot;&gt; animated definition&lt;/A&gt;.
                  &lt;p&gt;
                  &lt;tt&gt;p(k) = (mean^k / k!)  exp(-mean)&lt;/tt&gt; for &lt;tt&gt;k &amp;gt;= 0&lt;/tt&gt;.
                  &lt;p&gt;
                  Valid parameter ranges: &lt;tt&gt;mean &amp;gt; 0&lt;/tt&gt;.
                  Note: if &lt;tt&gt;mean &amp;lt;= 0.0&lt;/tt&gt; then always returns zero.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation.
                  Patchwork Rejection/Inversion method.
                  &lt;dt&gt;This is a port of &lt;tt&gt;pprsc.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  H. Zechner (1994): Efficient sampling from continuous and discrete unimodal distributions,
                  Doctoral Dissertation, 156 pp., Technical University Graz, Austria.
                  &lt;p&gt;
                  Also see
                  &lt;p&gt;
                  Stadlober E., H. Zechner (1999), &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;The patchwork rejection method for sampling from unimodal distributions&lt;/A&gt;,
                  to appear in ACM Transactions on Modelling and Simulation.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="mean" type="double" line="44"/>
            <declaration name="my_old" type="double" line="48"/>
            <declaration name="p" type="double" line="49"/>
            <declaration name="pp" type="double[]" line="50"/>
            <declaration name="llll" type="int" line="51"/>
            <declaration name="my_last" type="double" line="54"/>
            <declaration name="ll" type="double" line="55"/>
            <declaration name="k2" type="int" line="56"/>
            <declaration name="dl" type="double" line="57"/>
            <declaration name="f1" type="double" line="58"/>
            <declaration name="m" type="int" line="61"/>
            <declaration name="MEAN_MAX" type="double" line="64"/>
            <declaration name="SWITCH_MEAN" type="double" line="65"/>
            <declaration name="shared" type="Poisson" line="69"/>
            <javadoc line="70">
                Constructs a poisson distribution.
                  Example: mean=1.0.                
            </javadoc>
            <method name="Poisson" type="constructor" line="74">
                <params>
                    <param name="mean" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="78">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="81">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="84">
                Returns a deep copy of the receiver; the copy will produce identical sequences.
                  After this call has returned, the copy and the receiver have equal but separate state.                
                <return>
                    a copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="90">
                <declaration name="copy" type="Poisson" line="91"/>
            </method>
            <method name="f" type="double" line="95">
                <params>
                    <param name="k" type="int"/>
                    <param name="l_nu" type="double"/>
                    <param name="c_pm" type="double"/>
                </params>
            </method>
            <javadoc line="98">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="101"/>
            <javadoc line="104">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="107">
                <params>
                    <param name="theMean" type="double"/>
                </params>
                <comment line="108">
                    Poisson Distribution - Patchwork RejectionInversion           
                                                                                    
                    
                                                                                    
                     For parameter  my &lt; 10  Tabulated Inversion is applied.        
                     For my &gt;= 10  Patchwork Rejection is employed:                 
                     The area below the histogram function f(x) is rearranged in    
                     its body by certain point reflections. Within a large center   
                     interval variates are sampled efficiently by rejection from    
                     uniform hats. Rectangular immediate acceptance regions speed   
                     up the generation. The remaining tails are covered by          
                     exponential functions.                    
                </comment>
                <comment line="132">
                    static double p,q,p0,pp[36];                    
                </comment>
                <comment line="133">
                    static long ll,m;                    
                </comment>
                <comment line="137">
                    CASE B: Inversion- start new table and calculate p0                    
                </comment>
                <comment line="144">
                    for (k=pp.length; --k &gt;=0; ) pp[k] = 0;                    
                </comment>
                <comment line="148">
                    Step U. Uniform sample                    
                </comment>
                <comment line="151">
                    Step T. Table comparison                    
                </comment>
                <comment line="156">
                    Step C. Creation of new prob.                    
                </comment>
                <comment line="167">
                    end my &lt; SWITCH_MEAN                    
                </comment>
                <comment line="168">
                    CASE A: acceptance complement                    
                </comment>
                <comment line="169">
                    static double        my_last = -1.0;                    
                </comment>
                <comment line="170">
                    static long int      m,  k2, k4, k1, k5;                    
                </comment>
                <comment line="171">
                    static double        dl, dr, r1, r2, r4, r5, ll, lr, l_my, c_pm,                    
                </comment>
                <comment line="172">
                    f1, f2, f4, f5, p1, p2, p3, p4, p5, p6;                    
                </comment>
                <comment line="177">
                    set-up                    
                </comment>
                <comment line="180">
                    approximate deviation of reflection points k2, k4 from my - 1/2                    
                </comment>
                <comment line="183">
                    mode m, reflection points k2 and k4, and points k1 and k5, which                    
                </comment>
                <comment line="184">
                    delimit the centre region of h(x)                    
                </comment>
                <comment line="190">
                    range width of the critical left and right centre region                    
                </comment>
                <comment line="194">
                    recurrence constants r(k) = p(k)/p(k-1) at k = k1, k2, k4+1, k5+1                    
                </comment>
                <comment line="200">
                    reciprocal values of the scale parameters of expon. tail envelopes                    
                </comment>
                <comment line="201">
                    expon. tail left                    
                </comment>
                <comment line="202">
                    expon. tail right                    
                </comment>
                <comment line="204">
                    Poisson constants, necessary for computing function values f(k)                    
                </comment>
                <comment line="208">
                    function values f(k) = p(k)/p(m) at k = k2, k4, k1, k5                    
                </comment>
                <comment line="214">
                    area of the two centre and the two exponential tail regions                    
                </comment>
                <comment line="215">
                    area of the two immediate acceptance regions between k2, k4                    
                </comment>
                <comment line="216">
                    immed. left                    
                </comment>
                <comment line="217">
                    centre left                    
                </comment>
                <comment line="218">
                    immed. right                    
                </comment>
                <comment line="219">
                    centre right                    
                </comment>
                <comment line="220">
                    expon. tail left                    
                </comment>
                <comment line="221">
                    expon. tail right                    
                </comment>
                <comment line="222">
                    end set-up                    
                </comment>
                <comment line="225">
                    generate uniform number U -- U(0, p6)                    
                </comment>
                <comment line="226">
                    case distinction corresponding to U                    
                </comment>
                <comment line="227">
                    centre left                    
                </comment>
                <comment line="229">
                    immediate acceptance region R2 = [k2, m) *[0, f2),  X = k2, ... m -1                    
                </comment>
                <comment line="231">
                    immediate acceptance region R1 = [k1, k2)*[0, f1),  X = k1, ... k2-1                    
                </comment>
                <comment line="234">
                    computation of candidate X &lt; k2, and its counterpart Y &gt; k2                    
                </comment>
                <comment line="235">
                    either squeeze-acceptance of X or acceptance-rejection of Y                    
                </comment>
                <comment line="237">
                    quick accept of                    
                </comment>
                <comment line="238">
                    X = k2 - Dk                    
                </comment>
                <comment line="240">
                    quick reject of Y                    
                </comment>
                <comment line="242">
                    quick accept of                    
                </comment>
                <comment line="243">
                    Y = k2 + Dk                    
                </comment>
                <comment line="245">
                    final accept of Y                    
                </comment>
                <comment line="249">
                    centre right                    
                </comment>
                <comment line="250">
                    immediate acceptance region R3 = [m, k4+1)*[0, f4), X = m, ... k4                    
                </comment>
                <comment line="252">
                    immediate acceptance region R4 = [k4+1, k5+1)*[0, f5)                    
                </comment>
                <comment line="255">
                    computation of candidate X &gt; k4, and its counterpart Y &lt; k4                    
                </comment>
                <comment line="256">
                    either squeeze-acceptance of X or acceptance-rejection of Y                    
                </comment>
                <comment line="258">
                    quick accept of                    
                </comment>
                <comment line="259">
                    X = k4 + Dk                    
                </comment>
                <comment line="261">
                    quick reject of Y                    
                </comment>
                <comment line="263">
                    quick accept of                    
                </comment>
                <comment line="264">
                    Y = k4 - Dk                    
                </comment>
                <comment line="266">
                    final accept of Y                    
                </comment>
                <comment line="272">
                    expon. tail left                    
                </comment>
                <comment line="274">
                    0 &lt;= X &lt;= k1 - 1                    
                </comment>
                <comment line="275">
                    W -- U(0, h(x))                    
                </comment>
                <comment line="276">
                    quick accept of X                    
                </comment>
                <comment line="278">
                    expon. tail right                    
                </comment>
                <comment line="280">
                    X &gt;= k5 + 1                    
                </comment>
                <comment line="281">
                    W -- U(0, h(x))                    
                </comment>
                <comment line="282">
                    quick accept of X                    
                </comment>
                <comment line="286">
                    acceptance-rejection test of candidate X from the original area                    
                </comment>
                <comment line="287">
                    test, whether  W &lt;= f(k),    with  W = U*h(x)  and  U -- U(0, 1)                    
                </comment>
                <comment line="288">
                    log f(X) = (X - m)*log(my) - log X! + log m!                    
                </comment>
                <comment line="292">
                    mean is too large                    
                </comment>
                <declaration name="gen" type="RandomEngine" line="124"/>
                <declaration name="my" type="double" line="125"/>
                <declaration name="t" type="double" line="127"/>
                <declaration name="gx" type="double" line="129"/>
                <declaration name="sign" type="int" line="130"/>
                <declaration name="u" type="double" line="134"/>
                <declaration name="k" type="int" line="135"/>
                <scope line="137">
                    <scope line="138"/>
                    <scope line="147">
                        <scope line="151"/>
                        <scope line="156">
                            <scope line="160"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="168">
                    <declaration name="Dk" type="int" line="173"/>
                    <declaration name="Ds" type="double" line="174"/>
                    <scope line="177"/>
                    <scope line="224">
                        <scope line="227">
                            <scope line="237"/>
                            <scope line="240">
                                <scope line="242"/>
                            </scope>
                        </scope>
                        <scope line="249">
                            <scope line="258"/>
                            <scope line="261">
                                <scope line="263"/>
                            </scope>
                        </scope>
                        <scope line="270">
                            <scope line="272"/>
                            <scope line="278"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="292"/>
            </method>
            <javadoc line="296">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="299">
                <params>
                    <param name="k" type="int"/>
                </params>
                <comment line="302">
                    Overflow sensitive:                    
                </comment>
                <comment line="303">
                    return (Math.pow(mean,k) / cephes.Arithmetic.factorial(k)) * Math.exp(-this.mean);                    
                </comment>
            </method>
            <javadoc line="305">
                Sets the mean.                
            </javadoc>
            <method name="setMean" type="void" line="308">
                <params>
                    <param name="mean" type="double"/>
                </params>
            </method>
            <javadoc line="311">
                Returns a random number from the distribution with the given mean.                
            </javadoc>
            <method name="staticNextInt" type="int" line="314">
                <params>
                    <param name="mean" type="double"/>
                </params>
                <scope line="315"/>
            </method>
            <javadoc line="320">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="323"/>
            <javadoc line="326">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="330">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="331"/>
            </method>
        </class>
    </source>