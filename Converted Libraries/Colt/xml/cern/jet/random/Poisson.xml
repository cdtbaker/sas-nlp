<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.math.Arithmetic"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="Poisson" line="5">
            <extends class="AbstractDiscreteDistribution"/>
            <javadoc line="5">
                Poisson distribution (quick); See the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node208.html#SECTION0002080000000000000000&quot;&gt; math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosp.html#Poisson Distribution&quot;&gt; animated definition&lt;/A&gt;.
                  &lt;p&gt;
                  &lt;tt&gt;p(k) = (mean^k / k!)  exp(-mean)&lt;/tt&gt; for &lt;tt&gt;k &amp;gt;= 0&lt;/tt&gt;.
                  &lt;p&gt;
                  Valid parameter ranges: &lt;tt&gt;mean &amp;gt; 0&lt;/tt&gt;.
                  Note: if &lt;tt&gt;mean &amp;lt;= 0.0&lt;/tt&gt; then always returns zero.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation.
                  Patchwork Rejection/Inversion method.
                  &lt;dt&gt;This is a port of &lt;tt&gt;pprsc.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  H. Zechner (1994): Efficient sampling from continuous and discrete unimodal distributions,
                  Doctoral Dissertation, 156 pp., Technical University Graz, Austria.
                  &lt;p&gt;
                  Also see
                  &lt;p&gt;
                  Stadlober E., H. Zechner (1999), &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;The patchwork rejection method for sampling from unimodal distributions&lt;/A&gt;,
                  to appear in ACM Transactions on Modelling and Simulation.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="mean" type="double" line="34"/>
            <declaration name="my_old" type="double" line="35"/>
            <declaration name="p" type="double" line="36"/>
            <declaration name="pp" type="double[]" line="37"/>
            <declaration name="llll" type="int" line="38"/>
            <declaration name="my_last" type="double" line="39"/>
            <declaration name="ll" type="double" line="40"/>
            <declaration name="k2" type="int" line="41"/>
            <declaration name="dl" type="double" line="42"/>
            <declaration name="f1" type="double" line="43"/>
            <declaration name="m" type="int" line="44"/>
            <declaration name="MEAN_MAX" type="double" line="45"/>
            <declaration name="SWITCH_MEAN" type="double" line="46"/>
            <declaration name="shared" type="Poisson" line="47"/>
            <javadoc line="48">
                Constructs a poisson distribution.
                  Example: mean=1.0.                
            </javadoc>
            <method name="Poisson" type="constructor" line="52">
                <params>
                    <param name="mean" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="56">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="59">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="62">
                Returns a deep copy of the receiver; the copy will produce identical sequences.
                  After this call has returned, the copy and the receiver have equal but separate state.                
                <return>
                    a copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="67">
                <declaration name="copy" type="Poisson" line="68"/>
            </method>
            <method name="f" type="double" line="72">
                <params>
                    <param name="k" type="int"/>
                    <param name="l_nu" type="double"/>
                    <param name="c_pm" type="double"/>
                </params>
            </method>
            <javadoc line="75">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="78"/>
            <javadoc line="81">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="84">
                <params>
                    <param name="theMean" type="double"/>
                </params>
                <declaration name="gen" type="RandomEngine" line="85"/>
                <declaration name="my" type="double" line="86"/>
                <declaration name="t" type="double" line="87"/>
                <declaration name="gx" type="double" line="88"/>
                <declaration name="sign" type="int" line="89"/>
                <declaration name="u" type="double" line="90"/>
                <declaration name="k" type="int" line="91"/>
                <scope line="92">
                    <scope line="93"/>
                    <scope line="101">
                        <scope line="105"/>
                        <scope line="110">
                            <scope line="114"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="122">
                    <declaration name="Dk" type="int" line="123"/>
                    <declaration name="Ds" type="double" line="124"/>
                    <scope line="126"/>
                    <scope line="154">
                        <scope line="155">
                            <scope line="159"/>
                            <scope line="162">
                                <scope line="164"/>
                            </scope>
                        </scope>
                        <scope line="171">
                            <scope line="175"/>
                            <scope line="178">
                                <scope line="180"/>
                            </scope>
                        </scope>
                        <scope line="187">
                            <scope line="189"/>
                            <scope line="195"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="205"/>
            </method>
            <javadoc line="209">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="212">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="215">
                Sets the mean.                
            </javadoc>
            <method name="setMean" type="void" line="218">
                <params>
                    <param name="mean" type="double"/>
                </params>
            </method>
            <javadoc line="221">
                Returns a random number from the distribution with the given mean.                
            </javadoc>
            <method name="staticNextInt" type="int" line="224">
                <params>
                    <param name="mean" type="double"/>
                </params>
                <scope line="225"/>
            </method>
            <javadoc line="230">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="233"/>
            <javadoc line="236">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <param>
                    randomGenerator the new uniform random number generator to be shared.                    
                </param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="240">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="241"/>
            </method>
        </class>
    </source>