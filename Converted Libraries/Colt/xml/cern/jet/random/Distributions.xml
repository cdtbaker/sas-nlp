<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="Distributions" line="3">
            <javadoc line="3">
                Contains methods for conveniently generating pseudo-random numbers from special distributions such as the Burr, Cauchy, Erlang, Geometric, Lambda, Laplace, Logistic, Weibull, etc.
                  &lt;p&gt;
                  &lt;b&gt;About this class:&lt;/b&gt;
                  &lt;dt&gt;All distributions are obtained by using a &lt;b&gt;uniform&lt;/b&gt; pseudo-random number generator.
                  followed by a transformation to the desired distribution.
                  &lt;p&gt;
                  &lt;b&gt;Example usage:&lt;/b&gt;&lt;pre&gt;
                  cern.jet.random.engine.RandomEngine generator;
                  generator = new cern.jet.random.engine.MersenneTwister(new java.util.Date());
                  //generator = new edu.cornell.lassp.houle.RngPack.Ranecu(new java.util.Date());
                  //generator = new edu.cornell.lassp.houle.RngPack.Ranmar(new java.util.Date());
                  //generator = new edu.cornell.lassp.houle.RngPack.Ranlux(new java.util.Date());
                  //generator = AbstractDistribution.makeDefaultGenerator();
                  for (int i=1000000; --i &gt;=0; ) {
                  int cauchy = Distributions.nextCauchy(generator);
                  ...
                  }
                  &lt;/pre&gt;                
                <see>
                    cern.jet.random.engine.MersenneTwister                    
                </see>
                <see>
                    java.util.Random                    
                </see>
                <see>
                    java.lang.Math                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <javadoc line="29">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Distributions" type="constructor" line="32"/>
            <javadoc line="35">
                Returns the probability distribution function of the discrete geometric distribution.
                  &lt;p&gt;
                  &lt;tt&gt;p(k) = p  (1-p)^k&lt;/tt&gt; for &lt;tt&gt; k &amp;gt;= 0&lt;/tt&gt;.
                  &lt;p&gt;                
                <param>
                    k the argument to the probability distribution function.                    
                </param>
                <param>
                    p the parameter of the probability distribution function.                    
                </param>
            </javadoc>
            <method name="geometricPdf" type="double" line="43">
                <params>
                    <param name="k" type="int"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="47">
                Returns a random number from the Burr II, VII, VIII, X Distributions.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;burr1.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  L. Devroye (1986): Non-Uniform Random Variate Generation, Springer Verlag, New York.                                      
                  &lt;p&gt;                
                <param>
                    r must be &gt; 0.                    
                </param>
                <param>
                    nr the number of the burr distribution (e.g. 2,7,8,10).                    
                </param>
            </javadoc>
            <method name="nextBurr1" type="double" line="59">
                <params>
                    <param name="r" type="double"/>
                    <param name="nr" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="y" type="double" line="60"/>
            </method>
            <javadoc line="74">
                Returns a random number from the Burr III, IV, V, VI, IX, XII distributions.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;burr2.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  L. Devroye (1986): Non-Uniform Random Variate Generation, Springer Verlag, New York.                                      
                  &lt;p&gt;                
                <param>
                    r must be &gt; 0.                    
                </param>
                <param>
                    k must be &gt; 0.                    
                </param>
                <param>
                    nr the number of the burr distribution (e.g. 3,4,5,6,9,12).                    
                </param>
            </javadoc>
            <method name="nextBurr2" type="double" line="87">
                <params>
                    <param name="r" type="double"/>
                    <param name="k" type="double"/>
                    <param name="nr" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="y" type="double" line="88"/>
            </method>
            <javadoc line="114">
                Returns a cauchy distributed random number from the standard Cauchy distribution C(0,1).  
                  &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node25.html#SECTION000250000000000000000&quot;&gt; math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosc.html#Cauchy Distribution&quot;&gt; animated definition&lt;/A&gt;. 
                  &lt;p&gt;
                  &lt;tt&gt;p(x) = 1/ (meanpi  (1+(x/mean)^2))&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  This is a port of &lt;tt&gt;cin.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  &lt;p&gt;                
                <returns>
                    a number in the open unit interval <code>(0.0,1.0)</code> (excluding 0.0 and 1.0).                    
                </returns>
            </javadoc>
            <method name="nextCauchy" type="double" line="126">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="129">
                Returns an erlang distributed random number with the given variance and mean.                
            </javadoc>
            <method name="nextErlang" type="double" line="132">
                <params>
                    <param name="variance" type="double"/>
                    <param name="mean" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="k" type="int" line="133"/>
                <declaration name="a" type="double" line="135"/>
                <declaration name="prod" type="double" line="136"/>
            </method>
            <javadoc line="140">
                Returns a discrete geometric distributed random number; &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosf.html#Geometric Distribution&quot;&gt;Definition&lt;/A&gt;.
                  &lt;p&gt;
                  &lt;tt&gt;p(k) = p  (1-p)^k&lt;/tt&gt; for &lt;tt&gt; k &amp;gt;= 0&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;geo.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.                
                <param>
                    p must satisfy <tt>0 &lt; p &lt; 1</tt>.
                      <p>                    
                </param>
            </javadoc>
            <method name="nextGeometric" type="int" line="150">
                <params>
                    <param name="p" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="u" type="double" line="151"/>
            </method>
            <javadoc line="154">
                Returns a lambda distributed random number with parameters l3 and l4.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;lamin.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  J.S. Ramberg, B:W. Schmeiser (1974): An approximate method for generating asymmetric variables, Communications ACM 17, 78-82.
                  &lt;p&gt;                
            </javadoc>
            <method name="nextLambda" type="double" line="164">
                <params>
                    <param name="l3" type="double"/>
                    <param name="l4" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="l_sign" type="double" line="165"/>
                <declaration name="u" type="double" line="168"/>
                <declaration name="x" type="double" line="169"/>
            </method>
            <javadoc line="172">
                Returns a Laplace (Double Exponential) distributed random number from the standard Laplace distribution L(0,1).  
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;lapin.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  &lt;p&gt;                
                <returns>
                    a number in the open unit interval <code>(0.0,1.0)</code> (excluding 0.0 and 1.0).                    
                </returns>
            </javadoc>
            <method name="nextLaplace" type="double" line="180">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="u" type="double" line="181"/>
            </method>
            <javadoc line="186">
                Returns a random number from the standard Logistic distribution Log(0,1).
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;login.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.                
            </javadoc>
            <method name="nextLogistic" type="double" line="192">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="u" type="double" line="193"/>
            </method>
            <javadoc line="196">
                Returns a power-law distributed random number with the given exponent and lower cutoff.                
                <param>
                    alpha the exponent                    
                </param>
                <param>
                    cut the lower cutoff                    
                </param>
            </javadoc>
            <method name="nextPowLaw" type="double" line="201">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="cut" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="204">
                Returns a random number from the standard Triangular distribution in (-1,1).
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;tra.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  &lt;p&gt;                
            </javadoc>
            <method name="nextTriangular" type="double" line="211">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="u" type="double" line="212"/>
            </method>
            <javadoc line="217">
                Returns a weibull distributed random number. 
                  Polar method.
                  See Simulation, Modelling &amp; Analysis by Law &amp; Kelton, pp259                
            </javadoc>
            <method name="nextWeibull" type="double" line="222">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="225">
                Returns a zipfian distributed random number with the given skew.
                  &lt;p&gt;
                  Algorithm from page 551 of:
                  Devroye, Luc (1986) `Non-uniform random variate generation&apos;,
                  Springer-Verlag: Berlin.   ISBN 3-540-96305-7 (also 0-387-96305-7)                
                <param>
                    z the skew of the distribution (must be &gt;1.0).                    
                </param>
                <returns>
                    a zipfian distributed number in the closed interval <tt>[1,Integer.MAX_VALUE]</tt>.                    
                </returns>
            </javadoc>
            <method name="nextZipfInt" type="int" line="234">
                <params>
                    <param name="z" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="b" type="double" line="235"/>
                <declaration name="constant" type="double" line="236"/>
                <declaration name="result" type="int" line="237"/>
                <scope line="238">
                    <declaration name="u" type="double" line="239"/>
                    <declaration name="v" type="double" line="240"/>
                    <declaration name="t" type="double" line="242"/>
                </scope>
            </method>
        </class>
    </source>