<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="Distributions" line="12">
            <javadoc line="12">
                Contains methods for conveniently generating pseudo-random numbers from special distributions such as the Burr, Cauchy, Erlang, Geometric, Lambda, Laplace, Logistic, Weibull, etc.
                  &lt;p&gt;
                  &lt;b&gt;About this class:&lt;/b&gt;
                  &lt;dt&gt;All distributions are obtained by using a &lt;b&gt;uniform&lt;/b&gt; pseudo-random number generator.
                  followed by a transformation to the desired distribution.
                  &lt;p&gt;
                  &lt;b&gt;Example usage:&lt;/b&gt;&lt;pre&gt;
                  cern.jet.random.engine.RandomEngine generator;
                  generator = new cern.jet.random.engine.MersenneTwister(new java.util.Date());
                  //generator = new edu.cornell.lassp.houle.RngPack.Ranecu(new java.util.Date());
                  //generator = new edu.cornell.lassp.houle.RngPack.Ranmar(new java.util.Date());
                  //generator = new edu.cornell.lassp.houle.RngPack.Ranlux(new java.util.Date());
                  //generator = AbstractDistribution.makeDefaultGenerator();
                  for (int i=1000000; --i &gt;=0; ) {
                  int cauchy = Distributions.nextCauchy(generator);
                  ...
                  }
                  &lt;/pre&gt;                
                <see>
                    cern.jet.random.engine.MersenneTwister                    
                </see>
                <see>
                    java.util.Random                    
                </see>
                <see>
                    java.lang.Math                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <javadoc line="39">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Distributions" type="constructor" line="42"/>
            <javadoc line="45">
                Returns the probability distribution function of the discrete geometric distribution.
                  &lt;p&gt;
                  &lt;tt&gt;p(k) = p  (1-p)^k&lt;/tt&gt; for &lt;tt&gt; k &amp;gt;= 0&lt;/tt&gt;.
                  &lt;p&gt;                
                <param>
                    k the argument to the probability distribution function.                    
                </param>
                <param>
                    p the parameter of the probability distribution function.                    
                </param>
            </javadoc>
            <method name="geometricPdf" type="double" line="53">
                <params>
                    <param name="k" type="int"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="57">
                Returns a random number from the Burr II, VII, VIII, X Distributions.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;burr1.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  L. Devroye (1986): Non-Uniform Random Variate Generation, Springer Verlag, New York.                                      
                  &lt;p&gt;                
                <param>
                    r must be &gt; 0.                    
                </param>
                <param>
                    nr the number of the burr distribution (e.g. 2,7,8,10).                    
                </param>
            </javadoc>
            <method name="nextBurr1" type="double" line="69">
                <params>
                    <param name="r" type="double"/>
                    <param name="nr" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="71">
                    Burr II, VII, VIII, X Distributions - Inversion         
                                                                                    
                    
                                                                                    
                     FUNCTION :   - burr1 samples a random number from one of the   
                                    Burr II, VII, VIII, X distributions with        
                                    parameter  r &gt; 0 , where the no. of the         
                                    distribution is indicated by a pointer          
                                    variable.                                       
                     REFERENCE :  - L. Devroye (1986): Non-Uniform Random Variate   
                                    Generation, Springer Verlag, New York.          
                     SUBPROGRAM : - drand(seed) ... (0,1)-uniform generator with    
                                    unsigned long integer seed.                    
                </comment>
                <comment line="90">
                                        
                </comment>
                <comment line="92">
                    BURR II                    
                </comment>
                <comment line="95">
                    BURR VII                    
                </comment>
                <comment line="98">
                    BURR VIII                    
                </comment>
                <comment line="101">
                    BURR X                    
                </comment>
                <declaration name="y" type="double" line="88"/>
            </method>
            <javadoc line="105">
                Returns a random number from the Burr III, IV, V, VI, IX, XII distributions.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;burr2.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  L. Devroye (1986): Non-Uniform Random Variate Generation, Springer Verlag, New York.                                      
                  &lt;p&gt;                
                <param>
                    r must be &gt; 0.                    
                </param>
                <param>
                    k must be &gt; 0.                    
                </param>
                <param>
                    nr the number of the burr distribution (e.g. 3,4,5,6,9,12).                    
                </param>
            </javadoc>
            <method name="nextBurr2" type="double" line="118">
                <params>
                    <param name="r" type="double"/>
                    <param name="k" type="double"/>
                    <param name="nr" type="int"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="120">
                    Burr III, IV, V, VI, IX, XII Distribution - Inversion     
                                                                                    
                    
                                                                                    
                     FUNCTION :   - burr2 samples a random number from one of the   
                                    Burr III, IV, V, VI, IX, XII distributions with 
                                    parameters r &gt; 0 and k &gt; 0, where the no. of    
                                    the distribution is indicated by a pointer      
                                    variable.                                       
                     REFERENCE :  - L. Devroye (1986): Non-Uniform Random Variate   
                                    Generation, Springer Verlag, New York.          
                     SUBPROGRAM : - drand(seed) ... (0,1)-Uniform generator with    
                                    unsigned long integer seed.                    
                </comment>
                <comment line="138">
                    U(0/1)                    
                </comment>
                <comment line="139">
                    u^(-1/r) - 1                    
                </comment>
                <comment line="141">
                    BURR III                    
                </comment>
                <comment line="142">
                    y^(-1/k)                    
                </comment>
                <comment line="144">
                    BURR IV                    
                </comment>
                <comment line="145">
                    y^k + 1                    
                </comment>
                <comment line="149">
                    BURR V                    
                </comment>
                <comment line="150">
                    arctan[log(y/k)]                    
                </comment>
                <comment line="153">
                    BURR VI                    
                </comment>
                <comment line="158">
                    BURR IX                    
                </comment>
                <comment line="160">
                    y^(1/r) -1                    
                </comment>
                <comment line="163">
                    BURR XII                    
                </comment>
                <comment line="164">
                    y^(1/k)                    
                </comment>
                <declaration name="y" type="double" line="136"/>
            </method>
            <javadoc line="167">
                Returns a cauchy distributed random number from the standard Cauchy distribution C(0,1).  
                  &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node25.html#SECTION000250000000000000000&quot;&gt; math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosc.html#Cauchy Distribution&quot;&gt; animated definition&lt;/A&gt;. 
                  &lt;p&gt;
                  &lt;tt&gt;p(x) = 1/ (meanpi  (1+(x/mean)^2))&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  This is a port of &lt;tt&gt;cin.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  &lt;p&gt;                
                <returns>
                    a number in the open unit interval <code>(0.0,1.0)</code> (excluding 0.0 and 1.0).                    
                </returns>
            </javadoc>
            <method name="nextCauchy" type="double" line="179">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="182">
                Returns an erlang distributed random number with the given variance and mean.                
            </javadoc>
            <method name="nextErlang" type="double" line="185">
                <params>
                    <param name="variance" type="double"/>
                    <param name="mean" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="k" type="int" line="186"/>
                <declaration name="a" type="double" line="188"/>
                <declaration name="prod" type="double" line="190"/>
            </method>
            <javadoc line="194">
                Returns a discrete geometric distributed random number; &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosf.html#Geometric Distribution&quot;&gt;Definition&lt;/A&gt;.
                  &lt;p&gt;
                  &lt;tt&gt;p(k) = p  (1-p)^k&lt;/tt&gt; for &lt;tt&gt; k &amp;gt;= 0&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;geo.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.                
                <param>
                    p must satisfy <tt>0 &lt; p &lt; 1</tt>.
                      <p>                    
                </param>
            </javadoc>
            <method name="nextGeometric" type="int" line="204">
                <params>
                    <param name="p" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="206">
                    Geometric Distribution - Inversion                
                                                                                    
                    
                                                                                    
                     On generating random numbers of a discrete distribution by     
                     Inversion normally sequential search is necessary, but in the  
                     case of the Geometric distribution a direct transformation is  
                     possible because of the special parallel to the continuous     
                     Exponential distribution Exp(t):                               
                        X - Exp(t): G(x)=1-exp(-tx)                                 
                            Geo(p): pk=G(k+1)-G(k)=exp(-tk)(1-exp(-t))             
                                    p=1-exp(-t)                                     
                     A random number of the Geometric distribution Geo(p) is        
                     obtained by k=(long int)x, where x is from Exp(t) with         
                     parameter t=-log(1-p).                                         
                                                                                    
                    
                                                                                    
                     FUNCTION:    - geo samples a random number from the Geometric  
                                    distribution with parameter 0&lt;p&lt;1.              
                     SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    
                                    unsigned long integer seed.                    
                </comment>
                <declaration name="u" type="double" line="231"/>
            </method>
            <javadoc line="234">
                Returns a lambda distributed random number with parameters l3 and l4.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;lamin.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  J.S. Ramberg, B:W. Schmeiser (1974): An approximate method for generating asymmetric variables, Communications ACM 17, 78-82.
                  &lt;p&gt;                
            </javadoc>
            <method name="nextLambda" type="double" line="244">
                <params>
                    <param name="l3" type="double"/>
                    <param name="l4" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="247">
                    sign(l)                    
                </comment>
                <comment line="250">
                    U(0/1)                    
                </comment>
                <declaration name="l_sign" type="double" line="245"/>
                <declaration name="u" type="double" line="249"/>
                <declaration name="x" type="double" line="250"/>
            </method>
            <javadoc line="253">
                Returns a Laplace (Double Exponential) distributed random number from the standard Laplace distribution L(0,1).  
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;lapin.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  &lt;p&gt;                
                <returns>
                    a number in the open unit interval <code>(0.0,1.0)</code> (excluding 0.0 and 1.0).                    
                </returns>
            </javadoc>
            <method name="nextLaplace" type="double" line="261">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="u" type="double" line="262"/>
            </method>
            <javadoc line="267">
                Returns a random number from the standard Logistic distribution Log(0,1).
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;login.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.                
            </javadoc>
            <method name="nextLogistic" type="double" line="273">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <declaration name="u" type="double" line="274"/>
            </method>
            <javadoc line="277">
                Returns a power-law distributed random number with the given exponent and lower cutoff.                
                <param>
                    alpha the exponent                    
                </param>
                <param>
                    cut the lower cutoff                    
                </param>
            </javadoc>
            <method name="nextPowLaw" type="double" line="282">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="cut" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="285">
                Returns a random number from the standard Triangular distribution in (-1,1).
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
                  This is a port of &lt;tt&gt;tra.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  &lt;p&gt;                
            </javadoc>
            <method name="nextTriangular" type="double" line="292">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="294">
                    Triangular Distribution - Inversion: x = +-(1-sqrt(u))     
                                                                                    
                    
                                                                                    
                     FUNCTION :   - tra samples a random number from the            
                                    standard Triangular distribution in (-1,1)      
                     SUBPROGRAM : - drand(seed) ... (0,1)-Uniform generator with    
                                    unsigned long integer seed.                    
                </comment>
                <comment line="309">
                                        
                </comment>
                <comment line="310">
                                        
                </comment>
                <declaration name="u" type="double" line="306"/>
            </method>
            <javadoc line="311">
                Returns a weibull distributed random number. 
                  Polar method.
                  See Simulation, Modelling &amp; Analysis by Law &amp; Kelton, pp259                
            </javadoc>
            <method name="nextWeibull" type="double" line="316">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="318">
                    Polar method.
                     See Simulation, Modelling &amp; Analysis by Law &amp; Kelton, pp259                    
                </comment>
            </method>
            <javadoc line="321">
                Returns a zipfian distributed random number with the given skew.
                  &lt;p&gt;
                  Algorithm from page 551 of:
                  Devroye, Luc (1986) `Non-uniform random variate generation&apos;,
                  Springer-Verlag: Berlin.   ISBN 3-540-96305-7 (also 0-387-96305-7)                
                <param>
                    z the skew of the distribution (must be &gt;1.0).                    
                </param>
                <returns>
                    a zipfian distributed number in the closed interval <tt>[1,Integer.MAX_VALUE]</tt>.                    
                </returns>
            </javadoc>
            <method name="nextZipfInt" type="int" line="331">
                <params>
                    <param name="z" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="333">
                    Algorithm from page 551 of:
                     Devroye, Luc (1986) `Non-uniform random variate generation&apos;,
                     Springer-Verlag: Berlin.   ISBN 3-540-96305-7 (also 0-387-96305-7)                    
                </comment>
                <declaration name="b" type="double" line="336"/>
                <declaration name="constant" type="double" line="337"/>
                <declaration name="result" type="int" line="339"/>
                <scope line="340">
                    <declaration name="u" type="double" line="341"/>
                    <declaration name="v" type="double" line="342"/>
                    <declaration name="t" type="double" line="344"/>
                </scope>
            </method>
        </class>
    </source>