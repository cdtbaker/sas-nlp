<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.math">
        <import package="cern.colt.function.IntFunction"/>
        <import package="cern.colt.function.IntIntFunction"/>
        <import package="cern.colt.function.IntIntProcedure"/>
        <import package="cern.colt.function.IntProcedure"/>
        <class name="IntFunctions" line="6">
            <extends class="Object"/>
            <javadoc line="6">
                Integer Function objects to be passed to generic methods.
                  Same as {@link Functions} except operating on integers.
                  &lt;p&gt;
                  For aliasing see {@link #intFunctions}.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="intFunctions" type="IntFunctions" line="15"/>
            <javadoc line="15">
                Little trick to allow for &quot;aliasing&quot;, that is, renaming this class.
                  Writing code like
                  &lt;p&gt;
                  &lt;tt&gt;IntFunctions.chain(IntFunctions.plus,IntFunctions.mult(3),IntFunctions.chain(IntFunctions.square,IntFunctions.div(2)));&lt;/tt&gt;
                  &lt;p&gt;
                  is a bit awkward, to say the least.
                  Using the aliasing you can instead write
                  &lt;p&gt;
                  &lt;tt&gt;IntFunctions F = IntFunctions.intFunctions; &lt;br&gt;
                  F.chain(F.plus,F.mult(3),F.chain(F.square,F.div(2)));&lt;/tt&gt;
                  &lt;p&gt;                
            </javadoc>
            <declaration name="abs" type="IntFunction" line="29"/>
            <javadoc line="29">
                Function that returns &lt;tt&gt;Math.abs(a) == (a &lt; 0) ? -a : a&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="32">
                <method name="apply" type="int" line="33">
                    <params>
                        <param name="a" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="dec" type="IntFunction" line="38"/>
            <javadoc line="38">
                Function that returns &lt;tt&gt;a--&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="41">
                <method name="apply" type="int" line="42">
                    <params>
                        <param name="a" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="factorial" type="IntFunction" line="47"/>
            <javadoc line="47">
                Function that returns &lt;tt&gt;(int) Arithmetic.factorial(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="50">
                <method name="apply" type="int" line="51">
                    <params>
                        <param name="a" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="identity" type="IntFunction" line="56"/>
            <javadoc line="56">
                Function that returns its argument.                
            </javadoc>
            <anonymous_class line="59">
                <method name="apply" type="int" line="60">
                    <params>
                        <param name="a" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="inc" type="IntFunction" line="65"/>
            <javadoc line="65">
                Function that returns &lt;tt&gt;a++&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="68">
                <method name="apply" type="int" line="69">
                    <params>
                        <param name="a" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="neg" type="IntFunction" line="74"/>
            <javadoc line="74">
                Function that returns &lt;tt&gt;-a&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="77">
                <method name="apply" type="int" line="78">
                    <params>
                        <param name="a" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="not" type="IntFunction" line="83"/>
            <javadoc line="83">
                Function that returns &lt;tt&gt;~a&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="86">
                <method name="apply" type="int" line="87">
                    <params>
                        <param name="a" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="sign" type="IntFunction" line="92"/>
            <javadoc line="92">
                Function that returns &lt;tt&gt;a &lt; 0 ? -1 : a &gt; 0 ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="95">
                <method name="apply" type="int" line="96">
                    <params>
                        <param name="a" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="square" type="IntFunction" line="101"/>
            <javadoc line="101">
                Function that returns &lt;tt&gt;a  a&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="104">
                <method name="apply" type="int" line="105">
                    <params>
                        <param name="a" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="and" type="IntIntFunction" line="110"/>
            <javadoc line="110">
                Function that returns &lt;tt&gt;a &amp; b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="113">
                <method name="apply" type="int" line="114">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="compare" type="IntIntFunction" line="119"/>
            <javadoc line="119">
                Function that returns &lt;tt&gt;a &lt; b ? -1 : a &gt; b ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="122">
                <method name="apply" type="int" line="123">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="div" type="IntIntFunction" line="128"/>
            <javadoc line="128">
                Function that returns &lt;tt&gt;a / b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="131">
                <method name="apply" type="int" line="132">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="equals" type="IntIntFunction" line="137"/>
            <javadoc line="137">
                Function that returns &lt;tt&gt;a == b ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="140">
                <method name="apply" type="int" line="141">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="isEqual" type="IntIntProcedure" line="146"/>
            <javadoc line="146">
                Function that returns &lt;tt&gt;a == b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="149">
                <method name="apply" type="boolean" line="150">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="isLess" type="IntIntProcedure" line="155"/>
            <javadoc line="155">
                Function that returns &lt;tt&gt;a &lt; b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="158">
                <method name="apply" type="boolean" line="159">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="isGreater" type="IntIntProcedure" line="164"/>
            <javadoc line="164">
                Function that returns &lt;tt&gt;a &gt; b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="167">
                <method name="apply" type="boolean" line="168">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="max" type="IntIntFunction" line="173"/>
            <javadoc line="173">
                Function that returns &lt;tt&gt;Math.max(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="176">
                <method name="apply" type="int" line="177">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="min" type="IntIntFunction" line="182"/>
            <javadoc line="182">
                Function that returns &lt;tt&gt;Math.min(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="185">
                <method name="apply" type="int" line="186">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="minus" type="IntIntFunction" line="191"/>
            <javadoc line="191">
                Function that returns &lt;tt&gt;a - b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="194">
                <method name="apply" type="int" line="195">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="mod" type="IntIntFunction" line="200"/>
            <javadoc line="200">
                Function that returns &lt;tt&gt;a % b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="203">
                <method name="apply" type="int" line="204">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="mult" type="IntIntFunction" line="209"/>
            <javadoc line="209">
                Function that returns &lt;tt&gt;a  b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="212">
                <method name="apply" type="int" line="213">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="or" type="IntIntFunction" line="218"/>
            <javadoc line="218">
                Function that returns &lt;tt&gt;a | b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="221">
                <method name="apply" type="int" line="222">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="plus" type="IntIntFunction" line="227"/>
            <javadoc line="227">
                Function that returns &lt;tt&gt;a + b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="230">
                <method name="apply" type="int" line="231">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="pow" type="IntIntFunction" line="236"/>
            <javadoc line="236">
                Function that returns &lt;tt&gt;(int) Math.pow(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="239">
                <method name="apply" type="int" line="240">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="shiftLeft" type="IntIntFunction" line="245"/>
            <javadoc line="245">
                Function that returns &lt;tt&gt;a &lt;&lt; b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="248">
                <method name="apply" type="int" line="249">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="shiftRightSigned" type="IntIntFunction" line="254"/>
            <javadoc line="254">
                Function that returns &lt;tt&gt;a &gt;&gt; b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="257">
                <method name="apply" type="int" line="258">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="shiftRightUnsigned" type="IntIntFunction" line="263"/>
            <javadoc line="263">
                Function that returns &lt;tt&gt;a &gt;&gt;&gt; b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="266">
                <method name="apply" type="int" line="267">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="xor" type="IntIntFunction" line="272"/>
            <javadoc line="272">
                Function that returns &lt;tt&gt;a ^ b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="275">
                <method name="apply" type="int" line="276">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="281">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="IntFunctions" type="constructor" line="284"/>
            <javadoc line="286">
                Constructs a function that returns &lt;tt&gt;a &amp; b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="and" type="IntFunction" line="290">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="291">
                    <method name="apply" type="int" line="292">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="298">
                Constructs a function that returns &lt;tt&gt;(from&lt;=a &amp;&amp; a&lt;=to) ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt; are fixed.                
            </javadoc>
            <method name="between" type="IntFunction" line="302">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <anonymous_class line="303">
                    <method name="apply" type="int" line="304">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="310">
                Constructs a unary function from a binary function with the first operand (argument) fixed to the given constant &lt;tt&gt;c&lt;/tt&gt;.
                  The second operand is variable (free).                
                <param>
                    function a binary function taking operands in the form <tt>function.apply(c,var)</tt>.                    
                </param>
                <return>
                    the unary function <tt>function(c,var)</tt>.                    
                </return>
            </javadoc>
            <method name="bindArg1" type="IntFunction" line="316">
                <params>
                    <param name="function" type="IntIntFunction"/>
                    <param name="c" type="int"/>
                </params>
                <anonymous_class line="317">
                    <method name="apply" type="int" line="318">
                        <params>
                            <param name="var" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="324">
                Constructs a unary function from a binary function with the second operand (argument) fixed to the given constant &lt;tt&gt;c&lt;/tt&gt;.
                  The first operand is variable (free).                
                <param>
                    function a binary function taking operands in the form <tt>function.apply(var,c)</tt>.                    
                </param>
                <return>
                    the unary function <tt>function(var,c)</tt>.                    
                </return>
            </javadoc>
            <method name="bindArg2" type="IntFunction" line="330">
                <params>
                    <param name="function" type="IntIntFunction"/>
                    <param name="c" type="int"/>
                </params>
                <anonymous_class line="331">
                    <method name="apply" type="int" line="332">
                        <params>
                            <param name="var" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="338">
                Constructs the function &lt;tt&gt;g( h(a) )&lt;/tt&gt;.                
                <param>
                    g a unary function.                    
                </param>
                <param>
                    h a unary function.                    
                </param>
                <return>
                    the unary function <tt>g( h(a) )</tt>.                    
                </return>
            </javadoc>
            <method name="chain" type="IntFunction" line="344">
                <params>
                    <param name="g" type="IntFunction"/>
                    <param name="h" type="IntFunction"/>
                </params>
                <anonymous_class line="345">
                    <method name="apply" type="int" line="346">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="352">
                Constructs the function &lt;tt&gt;g( h(a,b) )&lt;/tt&gt;.                
                <param>
                    g a unary function.                    
                </param>
                <param>
                    h a binary function.                    
                </param>
                <return>
                    the unary function <tt>g( h(a,b) )</tt>.                    
                </return>
            </javadoc>
            <method name="chain" type="IntIntFunction" line="358">
                <params>
                    <param name="g" type="IntFunction"/>
                    <param name="h" type="IntIntFunction"/>
                </params>
                <anonymous_class line="359">
                    <method name="apply" type="int" line="360">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="366">
                Constructs the function &lt;tt&gt;f( g(a), h(b) )&lt;/tt&gt;.                
                <param>
                    f a binary function.                    
                </param>
                <param>
                    g a unary function.                    
                </param>
                <param>
                    h a unary function.                    
                </param>
                <return>
                    the binary function <tt>f( g(a), h(b) )</tt>.                    
                </return>
            </javadoc>
            <method name="chain" type="IntIntFunction" line="373">
                <params>
                    <param name="f" type="IntIntFunction"/>
                    <param name="g" type="IntFunction"/>
                    <param name="h" type="IntFunction"/>
                </params>
                <anonymous_class line="374">
                    <method name="apply" type="int" line="375">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="381">
                Constructs a function that returns &lt;tt&gt;a &lt; b ? -1 : a &gt; b ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="compare" type="IntFunction" line="385">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="386">
                    <method name="apply" type="int" line="387">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="393">
                Constructs a function that returns the constant &lt;tt&gt;c&lt;/tt&gt;.                
            </javadoc>
            <method name="constant" type="IntFunction" line="396">
                <params>
                    <param name="c" type="int"/>
                </params>
                <anonymous_class line="397">
                    <method name="apply" type="int" line="398">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="404">
                Constructs a function that returns &lt;tt&gt;a / b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="div" type="IntFunction" line="408">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="409">
                    <method name="apply" type="int" line="410">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="416">
                Constructs a function that returns &lt;tt&gt;a == b ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="equals" type="IntFunction" line="420">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="421">
                    <method name="apply" type="int" line="422">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="428">
                Constructs a function that returns &lt;tt&gt;from&lt;=a &amp;&amp; a&lt;=to&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt; are fixed.                
            </javadoc>
            <method name="isBetween" type="IntProcedure" line="432">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <anonymous_class line="433">
                    <method name="apply" type="boolean" line="434">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="440">
                Constructs a function that returns &lt;tt&gt;a == b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="isEqual" type="IntProcedure" line="444">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="445">
                    <method name="apply" type="boolean" line="446">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="452">
                Constructs a function that returns &lt;tt&gt;a &gt; b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="isGreater" type="IntProcedure" line="456">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="457">
                    <method name="apply" type="boolean" line="458">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="464">
                Constructs a function that returns &lt;tt&gt;a &lt; b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="isLess" type="IntProcedure" line="468">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="469">
                    <method name="apply" type="boolean" line="470">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="476">
                Constructs a function that returns &lt;tt&gt;Math.max(a,b)&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="max" type="IntFunction" line="480">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="481">
                    <method name="apply" type="int" line="482">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="488">
                Constructs a function that returns &lt;tt&gt;Math.min(a,b)&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="min" type="IntFunction" line="492">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="493">
                    <method name="apply" type="int" line="494">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="500">
                Constructs a function that returns &lt;tt&gt;a - b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="minus" type="IntFunction" line="504">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="505">
                    <method name="apply" type="int" line="506">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="512">
                Constructs a function that returns &lt;tt&gt;a % b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="mod" type="IntFunction" line="516">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="517">
                    <method name="apply" type="int" line="518">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="524">
                Constructs a function that returns &lt;tt&gt;a  b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="mult" type="IntFunction" line="528">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="529">
                    <method name="apply" type="int" line="530">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="536">
                Constructs a function that returns &lt;tt&gt;a | b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="or" type="IntFunction" line="540">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="541">
                    <method name="apply" type="int" line="542">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="548">
                Constructs a function that returns &lt;tt&gt;a + b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="plus" type="IntFunction" line="552">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="553">
                    <method name="apply" type="int" line="554">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="560">
                Constructs a function that returns &lt;tt&gt;(int) Math.pow(a,b)&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="pow" type="IntFunction" line="564">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="565">
                    <method name="apply" type="int" line="566">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="572">
                Constructs a function that returns a 32 bit uniformly distributed random number in the closed interval &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; (including &lt;tt&gt;Integer.MIN_VALUE&lt;/tt&gt; and &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;).
                  Currently the engine is {@link cern.jet.random.engine.MersenneTwister}and is seeded with the current time.
                  &lt;p&gt;
                  Note that any random engine derived from {@link cern.jet.random.engine.RandomEngine} and any random distribution derived from {@link cern.jet.random.AbstractDistribution} are function objects, because they implement the proper interfaces.
                  Thus, if you are not happy with the default, just pass your favourite random generator to function evaluating methods.                
            </javadoc>
            <method name="random" type="IntFunction" line="579"/>
            <javadoc line="582">
                Constructs a function that returns &lt;tt&gt;a &lt;&lt; b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="shiftLeft" type="IntFunction" line="586">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="587">
                    <method name="apply" type="int" line="588">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="594">
                Constructs a function that returns &lt;tt&gt;a &gt;&gt; b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="shiftRightSigned" type="IntFunction" line="598">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="599">
                    <method name="apply" type="int" line="600">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="606">
                Constructs a function that returns &lt;tt&gt;a &gt;&gt;&gt; b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="shiftRightUnsigned" type="IntFunction" line="610">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="611">
                    <method name="apply" type="int" line="612">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="618">
                Constructs a function that returns &lt;tt&gt;function.apply(b,a)&lt;/tt&gt;, i.e. applies the function with the first operand as second operand and the second operand as first operand.                
                <param>
                    function a function taking operands in the form <tt>function.apply(a,b)</tt>.                    
                </param>
                <return>
                    the binary function <tt>function(b,a)</tt>.                    
                </return>
            </javadoc>
            <method name="swapArgs" type="IntIntFunction" line="623">
                <params>
                    <param name="function" type="IntIntFunction"/>
                </params>
                <anonymous_class line="624">
                    <method name="apply" type="int" line="625">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="631">
                Constructs a function that returns &lt;tt&gt;a | b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="xor" type="IntFunction" line="635">
                <params>
                    <param name="b" type="int"/>
                </params>
                <anonymous_class line="636">
                    <method name="apply" type="int" line="637">
                        <params>
                            <param name="a" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>