<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.math">
        <import package="cern.colt.function.DoubleDoubleFunction"/>
        <import package="cern.colt.function.DoubleDoubleProcedure"/>
        <import package="cern.colt.function.DoubleFunction"/>
        <import package="cern.colt.function.DoubleProcedure"/>
        <class name="Functions" line="6">
            <extends class="Object"/>
            <javadoc line="6">
                Function objects to be passed to generic methods. Contains the functions of {@link java.lang.Math} as function objects, as 
                  well as a few more basic functions.
                  &lt;p&gt;Function objects conveniently allow to express arbitrary functions in a generic 
                  manner. Essentially, a function object is an object that can perform a function 
                  on some arguments. It has a minimal interface: a method &lt;tt&gt;apply&lt;/tt&gt; that 
                  takes the arguments, computes something and returns some result value. Function 
                  objects are comparable to function pointers in C used for call-backs.
                  &lt;p&gt;Unary functions are of type {@link cern.colt.function.DoubleFunction}, binary functions 
                  of type {@link cern.colt.function.DoubleDoubleFunction}. All can be retrieved via &lt;tt&gt;public 
                  static final&lt;/tt&gt; variables named after the function. 
                  Unary predicates are of type {@link cern.colt.function.DoubleProcedure}, binary predicates 
                  of type {@link cern.colt.function.DoubleDoubleProcedure}. All can be retrieved via &lt;tt&gt;public 
                  static final&lt;/tt&gt; variables named &lt;tt&gt;isXXX&lt;/tt&gt;. 
                  &lt;p&gt; Binary functions and predicates also exist as unary functions with the second argument being 
                  fixed to a constant. These are generated and retrieved via factory methods (again 
                  with the same name as the function). Example: 
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;Functions.pow&lt;/tt&gt; gives the function &lt;tt&gt;a&lt;sup&gt;b&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.pow.apply(2,3)==8&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.pow(3)&lt;/tt&gt; gives the function &lt;tt&gt;a&lt;sup&gt;3&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.pow(3).apply(2)==8&lt;/tt&gt;.
                  &lt;/ul&gt;
                  More general, any binary function can be made an unary functions by fixing either 
                  the first or the second argument. See methods {@link #bindArg1(DoubleDoubleFunction,double)} 
                  and {@link #bindArg2(DoubleDoubleFunction,double)}. The order of arguments 
                  can be swapped so that the first argument becomes the second and vice-versa. See 
                  method {@link #swapArgs(DoubleDoubleFunction)}. Example: 
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;Functions.pow&lt;/tt&gt; gives the function &lt;tt&gt;a&lt;sup&gt;b&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.bindArg2(Functions.pow,3)&lt;/tt&gt; gives the function &lt;tt&gt;x&lt;sup&gt;3&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.bindArg1(Functions.pow,3)&lt;/tt&gt; gives the function &lt;tt&gt;3&lt;sup&gt;x&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.swapArgs(Functions.pow)&lt;/tt&gt; gives the function &lt;tt&gt;b&lt;sup&gt;a&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Even more general, functions can be chained (composed, assembled). Assume we have two unary 
                  functions &lt;tt&gt;g&lt;/tt&gt; and &lt;tt&gt;h&lt;/tt&gt;. The unary function &lt;tt&gt;g(h(a))&lt;/tt&gt; applying 
                  both in sequence can be generated via {@link #chain(DoubleFunction,DoubleFunction)}:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;Functions.chain(g,h);&lt;/tt&gt;
                  &lt;/ul&gt; 
                  Assume further we have a binary function &lt;tt&gt;f&lt;/tt&gt;. The binary function &lt;tt&gt;g(f(a,b))&lt;/tt&gt; 
                  can be generated via {@link #chain(DoubleFunction,DoubleDoubleFunction)}:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;Functions.chain(g,f);&lt;/tt&gt;
                  &lt;/ul&gt;
                  The binary function &lt;tt&gt;f(g(a),h(b))&lt;/tt&gt; 
                  can be generated via {@link #chain(DoubleDoubleFunction,DoubleFunction,DoubleFunction)}:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;Functions.chain(f,g,h);&lt;/tt&gt;
                  &lt;/ul&gt;
                  Arbitrarily complex functions can be composed from these building blocks. For example
                  &lt;tt&gt;sin(a) + cos&lt;sup&gt;2&lt;/sup&gt;(b)&lt;/tt&gt; can be specified as follows:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;chain(plus,sin,chain(square,cos));&lt;/tt&gt;
                  &lt;/ul&gt; 
                  or, of course, as 
                  &lt;pre&gt;
                  new DoubleDoubleFunction() {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;public final double apply(double a, double b) { return Math.sin(a) + Math.pow(Math.cos(b),2); }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  For aliasing see {@link #functions}.
                  Try this
                  &lt;table&gt;
                  &lt;td class=&quot;PRE&quot;&gt; 
                  &lt;pre&gt;
                  // should yield 1.4399560356056456 in all cases
                  double a = 0.5; 
                  double b = 0.2;
                  double v = Math.sin(a) + Math.pow(Math.cos(b),2);
                  System.out.println(v);
                  Functions F = Functions.functions;
                  DoubleDoubleFunction f = F.chain(F.plus,F.sin,F.chain(F.square,F.cos));
                  System.out.println(f.apply(a,b));
                  DoubleDoubleFunction g = new DoubleDoubleFunction() {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;public double apply(double a, double b) { return Math.sin(a) + Math.pow(Math.cos(b),2); }
                  };
                  System.out.println(g.apply(a,b));
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;/table&gt;
                  &lt;p&gt;
                  &lt;H3&gt;Performance&lt;/H3&gt;
                  Surprise. Using modern non-adaptive JITs such as SunJDK 1.2.2 (java -classic) 
                  there seems to be no or only moderate performance penalty in using function 
                  objects in a loop over traditional code in a loop. For complex nested function 
                  objects (e.g. &lt;tt&gt;F.chain(F.abs,F.chain(F.plus,F.sin,F.chain(F.square,F.cos)))&lt;/tt&gt;) 
                  the penalty is zero, for trivial functions (e.g. &lt;tt&gt;F.plus&lt;/tt&gt;) the penalty 
                  is often acceptable.
                  &lt;center&gt;
                  &lt;table border cellpadding=&quot;3&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#33CC66&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td nowrap colspan=&quot;7&quot;&gt; &lt;font size=&quot;+2&quot;&gt;Iteration Performance [million function 
                  evaluations per second]&lt;/font&gt;&lt;br&gt;
                  &lt;font size=&quot;-1&quot;&gt;Pentium Pro 200 Mhz, SunJDK 1.2.2, NT, java -classic, 
                  &lt;/font&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td nowrap bgcolor=&quot;#FF9966&quot; rowspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot; colspan=&quot;2&quot;&gt; 
                  &lt;p&gt; 30000000 iterations&lt;/p&gt;
                  &lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot; colspan=&quot;2&quot;&gt; 3000000 iterations (10 times less)&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot; colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt; &lt;tt&gt;F.plus&lt;/tt&gt;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt;&lt;tt&gt;a+b&lt;/tt&gt;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt; &lt;tt&gt;F.chain(F.abs,F.chain(F.plus,F.sin,F.chain(F.square,F.cos)))&lt;/tt&gt;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt; &lt;tt&gt;Math.abs(Math.sin(a) + Math.pow(Math.cos(b),2))&lt;/tt&gt;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td nowrap bgcolor=&quot;#FF9966&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td nowrap&gt;10.8&lt;/td&gt;
                  &lt;td nowrap&gt;29.6&lt;/td&gt;
                  &lt;td nowrap&gt;0.43&lt;/td&gt;
                  &lt;td nowrap&gt;0.35&lt;/td&gt;
                  &lt;td nowrap&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td nowrap&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;&lt;/center&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="functions" type="Functions" line="135"/>
            <javadoc line="135">
                Little trick to allow for &quot;aliasing&quot;, that is, renaming this class.
                  Writing code like
                  &lt;p&gt;
                  &lt;tt&gt;Functions.chain(Functions.plus,Functions.sin,Functions.chain(Functions.square,Functions.cos));&lt;/tt&gt;
                  &lt;p&gt;
                  is a bit awkward, to say the least.
                  Using the aliasing you can instead write
                  &lt;p&gt;
                  &lt;tt&gt;Functions F = Functions.functions; &lt;br&gt;
                  F.chain(F.plus,F.sin,F.chain(F.square,F.cos));&lt;/tt&gt;                
            </javadoc>
            <declaration name="abs" type="DoubleFunction" line="148"/>
            <javadoc line="148">
                Function that returns &lt;tt&gt;Math.abs(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="151">
                <method name="apply" type="double" line="152">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="acos" type="DoubleFunction" line="157"/>
            <javadoc line="157">
                Function that returns &lt;tt&gt;Math.acos(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="160">
                <method name="apply" type="double" line="161">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="asin" type="DoubleFunction" line="166"/>
            <javadoc line="166">
                Function that returns &lt;tt&gt;Math.asin(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="169">
                <method name="apply" type="double" line="170">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="atan" type="DoubleFunction" line="175"/>
            <javadoc line="175">
                Function that returns &lt;tt&gt;Math.atan(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="178">
                <method name="apply" type="double" line="179">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="ceil" type="DoubleFunction" line="184"/>
            <javadoc line="184">
                Function that returns &lt;tt&gt;Math.ceil(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="187">
                <method name="apply" type="double" line="188">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="cos" type="DoubleFunction" line="193"/>
            <javadoc line="193">
                Function that returns &lt;tt&gt;Math.cos(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="196">
                <method name="apply" type="double" line="197">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="exp" type="DoubleFunction" line="202"/>
            <javadoc line="202">
                Function that returns &lt;tt&gt;Math.exp(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="205">
                <method name="apply" type="double" line="206">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="floor" type="DoubleFunction" line="211"/>
            <javadoc line="211">
                Function that returns &lt;tt&gt;Math.floor(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="214">
                <method name="apply" type="double" line="215">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="identity" type="DoubleFunction" line="220"/>
            <javadoc line="220">
                Function that returns its argument.                
            </javadoc>
            <anonymous_class line="223">
                <method name="apply" type="double" line="224">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="inv" type="DoubleFunction" line="229"/>
            <javadoc line="229">
                Function that returns &lt;tt&gt;1.0 / a&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="232">
                <method name="apply" type="double" line="233">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="log" type="DoubleFunction" line="238"/>
            <javadoc line="238">
                Function that returns &lt;tt&gt;Math.log(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="241">
                <method name="apply" type="double" line="242">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="log2" type="DoubleFunction" line="247"/>
            <javadoc line="247">
                Function that returns &lt;tt&gt;Math.log(a) / Math.log(2)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="250">
                <method name="apply" type="double" line="251">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="neg" type="DoubleFunction" line="256"/>
            <javadoc line="256">
                Function that returns &lt;tt&gt;-a&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="259">
                <method name="apply" type="double" line="260">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="rint" type="DoubleFunction" line="265"/>
            <javadoc line="265">
                Function that returns &lt;tt&gt;Math.rint(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="268">
                <method name="apply" type="double" line="269">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="sign" type="DoubleFunction" line="274"/>
            <javadoc line="274">
                Function that returns &lt;tt&gt;a &lt; 0 ? -1 : a &gt; 0 ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="277">
                <method name="apply" type="double" line="278">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="sin" type="DoubleFunction" line="283"/>
            <javadoc line="283">
                Function that returns &lt;tt&gt;Math.sin(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="286">
                <method name="apply" type="double" line="287">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="sqrt" type="DoubleFunction" line="292"/>
            <javadoc line="292">
                Function that returns &lt;tt&gt;Math.sqrt(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="295">
                <method name="apply" type="double" line="296">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="square" type="DoubleFunction" line="301"/>
            <javadoc line="301">
                Function that returns &lt;tt&gt;a  a&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="304">
                <method name="apply" type="double" line="305">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="tan" type="DoubleFunction" line="310"/>
            <javadoc line="310">
                Function that returns &lt;tt&gt;Math.tan(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="313">
                <method name="apply" type="double" line="314">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="atan2" type="DoubleDoubleFunction" line="319"/>
            <javadoc line="319">
                Function that returns &lt;tt&gt;Math.atan2(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="322">
                <method name="apply" type="double" line="323">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="compare" type="DoubleDoubleFunction" line="328"/>
            <javadoc line="328">
                Function that returns &lt;tt&gt;a &lt; b ? -1 : a &gt; b ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="331">
                <method name="apply" type="double" line="332">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="div" type="DoubleDoubleFunction" line="337"/>
            <javadoc line="337">
                Function that returns &lt;tt&gt;a / b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="340">
                <method name="apply" type="double" line="341">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="equals" type="DoubleDoubleFunction" line="346"/>
            <javadoc line="346">
                Function that returns &lt;tt&gt;a == b ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="349">
                <method name="apply" type="double" line="350">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="greater" type="DoubleDoubleFunction" line="355"/>
            <javadoc line="355">
                Function that returns &lt;tt&gt;a &gt; b ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="358">
                <method name="apply" type="double" line="359">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="IEEEremainder" type="DoubleDoubleFunction" line="364"/>
            <javadoc line="364">
                Function that returns &lt;tt&gt;Math.IEEEremainder(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="367">
                <method name="apply" type="double" line="368">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="isEqual" type="DoubleDoubleProcedure" line="373"/>
            <javadoc line="373">
                Function that returns &lt;tt&gt;a == b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="376">
                <method name="apply" type="boolean" line="377">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="isLess" type="DoubleDoubleProcedure" line="382"/>
            <javadoc line="382">
                Function that returns &lt;tt&gt;a &lt; b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="385">
                <method name="apply" type="boolean" line="386">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="isGreater" type="DoubleDoubleProcedure" line="391"/>
            <javadoc line="391">
                Function that returns &lt;tt&gt;a &gt; b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="394">
                <method name="apply" type="boolean" line="395">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="less" type="DoubleDoubleFunction" line="400"/>
            <javadoc line="400">
                Function that returns &lt;tt&gt;a &lt; b ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="403">
                <method name="apply" type="double" line="404">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="lg" type="DoubleDoubleFunction" line="409"/>
            <javadoc line="409">
                Function that returns &lt;tt&gt;Math.log(a) / Math.log(b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="412">
                <method name="apply" type="double" line="413">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="max" type="DoubleDoubleFunction" line="418"/>
            <javadoc line="418">
                Function that returns &lt;tt&gt;Math.max(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="421">
                <method name="apply" type="double" line="422">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="min" type="DoubleDoubleFunction" line="427"/>
            <javadoc line="427">
                Function that returns &lt;tt&gt;Math.min(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="430">
                <method name="apply" type="double" line="431">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="minus" type="DoubleDoubleFunction" line="436"/>
            <javadoc line="436">
                Function that returns &lt;tt&gt;a - b&lt;/tt&gt;.                
            </javadoc>
            <declaration name="mod" type="DoubleDoubleFunction" line="440"/>
            <javadoc line="440">
                Function that returns &lt;tt&gt;a % b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="443">
                <method name="apply" type="double" line="444">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="mult" type="DoubleDoubleFunction" line="449"/>
            <javadoc line="449">
                Function that returns &lt;tt&gt;a  b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="452">
                <method name="apply" type="double" line="453">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="plus" type="DoubleDoubleFunction" line="458"/>
            <javadoc line="458">
                Function that returns &lt;tt&gt;a + b&lt;/tt&gt;.                
            </javadoc>
            <declaration name="plusAbs" type="DoubleDoubleFunction" line="462"/>
            <javadoc line="462">
                Function that returns &lt;tt&gt;Math.abs(a) + Math.abs(b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="465">
                <method name="apply" type="double" line="466">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="pow" type="DoubleDoubleFunction" line="471"/>
            <javadoc line="471">
                Function that returns &lt;tt&gt;Math.pow(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="474">
                <method name="apply" type="double" line="475">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="480">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Functions" type="constructor" line="483"/>
            <javadoc line="485">
                Constructs a function that returns &lt;tt&gt;(from&lt;=a &amp;&amp; a&lt;=to) ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt; are fixed.                
            </javadoc>
            <method name="between" type="DoubleFunction" line="489">
                <params>
                    <param name="from" type="double"/>
                    <param name="to" type="double"/>
                </params>
                <anonymous_class line="490">
                    <method name="apply" type="double" line="491">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="497">
                Constructs a unary function from a binary function with the first operand (argument) fixed to the given constant &lt;tt&gt;c&lt;/tt&gt;.
                  The second operand is variable (free).                
                <param>
                    function a binary function taking operands in the form <tt>function.apply(c,var)</tt>.                    
                </param>
                <return>
                    the unary function <tt>function(c,var)</tt>.                    
                </return>
            </javadoc>
            <method name="bindArg1" type="DoubleFunction" line="503">
                <params>
                    <param name="function" type="DoubleDoubleFunction"/>
                    <param name="c" type="double"/>
                </params>
                <anonymous_class line="504">
                    <method name="apply" type="double" line="505">
                        <params>
                            <param name="var" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="511">
                Constructs a unary function from a binary function with the second operand (argument) fixed to the given constant &lt;tt&gt;c&lt;/tt&gt;.
                  The first operand is variable (free).                
                <param>
                    function a binary function taking operands in the form <tt>function.apply(var,c)</tt>.                    
                </param>
                <return>
                    the unary function <tt>function(var,c)</tt>.                    
                </return>
            </javadoc>
            <method name="bindArg2" type="DoubleFunction" line="517">
                <params>
                    <param name="function" type="DoubleDoubleFunction"/>
                    <param name="c" type="double"/>
                </params>
                <anonymous_class line="518">
                    <method name="apply" type="double" line="519">
                        <params>
                            <param name="var" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="525">
                Constructs the function &lt;tt&gt;f( g(a), h(b) )&lt;/tt&gt;.                
                <param>
                    f a binary function.                    
                </param>
                <param>
                    g a unary function.                    
                </param>
                <param>
                    h a unary function.                    
                </param>
                <return>
                    the binary function <tt>f( g(a), h(b) )</tt>.                    
                </return>
            </javadoc>
            <method name="chain" type="DoubleDoubleFunction" line="532">
                <params>
                    <param name="f" type="DoubleDoubleFunction"/>
                    <param name="g" type="DoubleFunction"/>
                    <param name="h" type="DoubleFunction"/>
                </params>
                <anonymous_class line="533">
                    <method name="apply" type="double" line="534">
                        <params>
                            <param name="a" type="double"/>
                            <param name="b" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="540">
                Constructs the function &lt;tt&gt;g( h(a,b) )&lt;/tt&gt;.                
                <param>
                    g a unary function.                    
                </param>
                <param>
                    h a binary function.                    
                </param>
                <return>
                    the unary function <tt>g( h(a,b) )</tt>.                    
                </return>
            </javadoc>
            <method name="chain" type="DoubleDoubleFunction" line="546">
                <params>
                    <param name="g" type="DoubleFunction"/>
                    <param name="h" type="DoubleDoubleFunction"/>
                </params>
                <anonymous_class line="547">
                    <method name="apply" type="double" line="548">
                        <params>
                            <param name="a" type="double"/>
                            <param name="b" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="554">
                Constructs the function &lt;tt&gt;g( h(a) )&lt;/tt&gt;.                
                <param>
                    g a unary function.                    
                </param>
                <param>
                    h a unary function.                    
                </param>
                <return>
                    the unary function <tt>g( h(a) )</tt>.                    
                </return>
            </javadoc>
            <method name="chain" type="DoubleFunction" line="560">
                <params>
                    <param name="g" type="DoubleFunction"/>
                    <param name="h" type="DoubleFunction"/>
                </params>
                <anonymous_class line="561">
                    <method name="apply" type="double" line="562">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="568">
                Constructs a function that returns &lt;tt&gt;a &lt; b ? -1 : a &gt; b ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="compare" type="DoubleFunction" line="572">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="573">
                    <method name="apply" type="double" line="574">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="580">
                Constructs a function that returns the constant &lt;tt&gt;c&lt;/tt&gt;.                
            </javadoc>
            <method name="constant" type="DoubleFunction" line="583">
                <params>
                    <param name="c" type="double"/>
                </params>
                <anonymous_class line="584">
                    <method name="apply" type="double" line="585">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="591">
                Demonstrates usage of this class.                
            </javadoc>
            <method name="demo1" type="void" line="594">
                <declaration name="F" type="cern.jet.math.Functions" line="595"/>
                <declaration name="a" type="double" line="596"/>
                <declaration name="b" type="double" line="597"/>
                <declaration name="v" type="double" line="598"/>
                <declaration name="f" type="DoubleDoubleFunction" line="600"/>
                <anonymous_class line="602">
                    <method name="apply" type="double" line="603">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="g" type="DoubleDoubleFunction" line="602"/>
                <declaration name="m" type="DoubleFunction" line="609"/>
                <declaration name="n" type="DoubleFunction" line="610"/>
            </method>
            <javadoc line="614">
                Benchmarks and demonstrates usage of trivial and complex functions.                
            </javadoc>
            <method name="demo2" type="void" line="617">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="F" type="cern.jet.math.Functions" line="618"/>
                <declaration name="a" type="double" line="620"/>
                <declaration name="b" type="double" line="621"/>
                <declaration name="v" type="double" line="622"/>
                <declaration name="f" type="DoubleDoubleFunction" line="624"/>
                <anonymous_class line="626">
                    <method name="apply" type="double" line="627">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="g" type="DoubleDoubleFunction" line="626"/>
                <declaration name="emptyLoop" type="cern.colt.Timer" line="633"/>
                <declaration name="sum" type="double" line="636"/>
                <scope line="637"/>
                <declaration name="timer" type="cern.colt.Timer" line="644"/>
                <scope line="648"/>
                <scope line="660"/>
                <scope line="672"/>
            </method>
            <javadoc line="681">
                Constructs a function that returns &lt;tt&gt;a / b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="div" type="DoubleFunction" line="685">
                <params>
                    <param name="b" type="double"/>
                </params>
            </method>
            <javadoc line="688">
                Constructs a function that returns &lt;tt&gt;a == b ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="equals" type="DoubleFunction" line="692">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="693">
                    <method name="apply" type="double" line="694">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="700">
                Constructs a function that returns &lt;tt&gt;a &gt; b ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="greater" type="DoubleFunction" line="704">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="705">
                    <method name="apply" type="double" line="706">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="712">
                Constructs a function that returns &lt;tt&gt;Math.IEEEremainder(a,b)&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="IEEEremainder" type="DoubleFunction" line="716">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="717">
                    <method name="apply" type="double" line="718">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="724">
                Constructs a function that returns &lt;tt&gt;from&lt;=a &amp;&amp; a&lt;=to&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt; are fixed.                
            </javadoc>
            <method name="isBetween" type="DoubleProcedure" line="728">
                <params>
                    <param name="from" type="double"/>
                    <param name="to" type="double"/>
                </params>
                <anonymous_class line="729">
                    <method name="apply" type="boolean" line="730">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="736">
                Constructs a function that returns &lt;tt&gt;a == b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="isEqual" type="DoubleProcedure" line="740">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="741">
                    <method name="apply" type="boolean" line="742">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="748">
                Constructs a function that returns &lt;tt&gt;a &gt; b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="isGreater" type="DoubleProcedure" line="752">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="753">
                    <method name="apply" type="boolean" line="754">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="760">
                Constructs a function that returns &lt;tt&gt;a &lt; b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="isLess" type="DoubleProcedure" line="764">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="765">
                    <method name="apply" type="boolean" line="766">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="772">
                Constructs a function that returns &lt;tt&gt;a &lt; b ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="less" type="DoubleFunction" line="776">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="777">
                    <method name="apply" type="double" line="778">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="784">
                Constructs a function that returns &lt;tt&gt;&lt;tt&gt;Math.log(a) / Math.log(b)&lt;/tt&gt;&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="lg" type="DoubleFunction" line="788">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="789">
                    <declaration name="logInv" type="double" line="790"/>
                    <method name="apply" type="double" line="791">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="797">
                Tests various methods of this class.                
            </javadoc>
            <method name="main" type="void" line="800">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="size" type="int" line="801"/>
            </method>
            <javadoc line="804">
                Constructs a function that returns &lt;tt&gt;Math.max(a,b)&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="max" type="DoubleFunction" line="808">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="809">
                    <method name="apply" type="double" line="810">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="816">
                Constructs a function that returns &lt;tt&gt;Math.min(a,b)&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="min" type="DoubleFunction" line="820">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="821">
                    <method name="apply" type="double" line="822">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="828">
                Constructs a function that returns &lt;tt&gt;a - b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="minus" type="DoubleFunction" line="832">
                <params>
                    <param name="b" type="double"/>
                </params>
            </method>
            <javadoc line="835">
                Constructs a function that returns &lt;tt&gt;a - bconstant&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt; are variables, &lt;tt&gt;constant&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="minusMult" type="DoubleDoubleFunction" line="839">
                <params>
                    <param name="constant" type="double"/>
                </params>
            </method>
            <javadoc line="842">
                Constructs a function that returns &lt;tt&gt;a % b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="mod" type="DoubleFunction" line="846">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="847">
                    <method name="apply" type="double" line="848">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="854">
                Constructs a function that returns &lt;tt&gt;a  b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="mult" type="DoubleFunction" line="858">
                <params>
                    <param name="b" type="double"/>
                </params>
            </method>
            <javadoc line="861">
                Constructs a function that returns &lt;tt&gt;a + b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="plus" type="DoubleFunction" line="865">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="866">
                    <method name="apply" type="double" line="867">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="873">
                Constructs a function that returns &lt;tt&gt;a + bconstant&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt; are variables, &lt;tt&gt;constant&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="plusMult" type="DoubleDoubleFunction" line="877">
                <params>
                    <param name="constant" type="double"/>
                </params>
            </method>
            <javadoc line="880">
                Constructs a function that returns &lt;tt&gt;Math.pow(a,b)&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="pow" type="DoubleFunction" line="884">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="885">
                    <method name="apply" type="double" line="886">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="892">
                Constructs a function that returns a new uniform random number in the open unit interval &lt;code&gt;(0.0,1.0)&lt;/code&gt; (excluding 0.0 and 1.0).
                  Currently the engine is {@link cern.jet.random.engine.MersenneTwister}and is seeded with the current time.
                  &lt;p&gt;
                  Note that any random engine derived from {@link cern.jet.random.engine.RandomEngine} and any random distribution derived from {@link cern.jet.random.AbstractDistribution} are function objects, because they implement the proper interfaces.
                  Thus, if you are not happy with the default, just pass your favourite random generator to function evaluating methods.                
            </javadoc>
            <method name="random" type="DoubleFunction" line="899"/>
            <javadoc line="902">
                Constructs a function that returns the number rounded to the given precision; &lt;tt&gt;Math.rint(a/precision)precision&lt;/tt&gt;.
                  Examples:
                  &lt;pre&gt;
                  precision = 0.01 rounds 0.012 --&gt; 0.01, 0.018 --&gt; 0.02
                  precision = 10   rounds 123   --&gt; 120 , 127   --&gt; 130
                  &lt;/pre&gt;                
            </javadoc>
            <method name="round" type="DoubleFunction" line="910">
                <params>
                    <param name="precision" type="double"/>
                </params>
                <anonymous_class line="911">
                    <method name="apply" type="double" line="912">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="918">
                Constructs a function that returns &lt;tt&gt;function.apply(b,a)&lt;/tt&gt;, i.e. applies the function with the first operand as second operand and the second operand as first operand.                
                <param>
                    function a function taking operands in the form <tt>function.apply(a,b)</tt>.                    
                </param>
                <return>
                    the binary function <tt>function(b,a)</tt>.                    
                </return>
            </javadoc>
            <method name="swapArgs" type="DoubleDoubleFunction" line="923">
                <params>
                    <param name="function" type="DoubleDoubleFunction"/>
                </params>
                <anonymous_class line="924">
                    <method name="apply" type="double" line="925">
                        <params>
                            <param name="a" type="double"/>
                            <param name="b" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>