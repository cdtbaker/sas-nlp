<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.math">
        <class name="Arithmetic" line="2">
            <extends class="Constants"/>
            <javadoc line="2">
                Arithmetic functions.                
            </javadoc>
            <declaration name="stirlingCorrection" type="double[]" line="6"/>
            <declaration name="logFactorials" type="double[]" line="7"/>
            <declaration name="longFactorials" type="long[]" line="8"/>
            <declaration name="doubleFactorials" type="double[]" line="9"/>
            <javadoc line="10">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Arithmetic" type="constructor" line="13"/>
            <javadoc line="15">
                Efficiently returns the binomial coefficient, often also referred to as &quot;n over k&quot; or &quot;n choose k&quot;.
                  The binomial coefficient is defined as &lt;tt&gt;(n  n-1  ...  n-k+1 ) / ( 1  2  ...  k )&lt;/tt&gt;.
                  &lt;ul&gt;
                  &lt;li&gt;k&lt;0&lt;tt&gt;: &lt;tt&gt;0&lt;/tt&gt;.
                  &lt;li&gt;k==0&lt;tt&gt;: &lt;tt&gt;1&lt;/tt&gt;.
                  &lt;li&gt;k==1&lt;tt&gt;: &lt;tt&gt;n&lt;/tt&gt;.
                  &lt;li&gt;else: &lt;tt&gt;(n  n-1  ...  n-k+1 ) / ( 1  2  ...  k )&lt;/tt&gt;.
                  &lt;/ul&gt;                
                <return>
                    the binomial coefficient.                    
                </return>
            </javadoc>
            <method name="binomial" type="double" line="26">
                <params>
                    <param name="n" type="double"/>
                    <param name="k" type="long"/>
                </params>
                <declaration name="a" type="double" line="30"/>
                <declaration name="b" type="double" line="31"/>
                <declaration name="binomial" type="double" line="32"/>
                <scope line="33"/>
            </method>
            <javadoc line="38">
                Efficiently returns the binomial coefficient, often also referred to as &quot;n over k&quot; or &quot;n choose k&quot;.
                  The binomial coefficient is defined as
                  &lt;ul&gt;
                  &lt;li&gt;k&lt;0&lt;tt&gt;: &lt;tt&gt;0&lt;/tt&gt;.
                  &lt;li&gt;k==0 || k==n&lt;tt&gt;: &lt;tt&gt;1&lt;/tt&gt;.
                  &lt;li&gt;k==1 || k==n-1&lt;tt&gt;: &lt;tt&gt;n&lt;/tt&gt;.
                  &lt;li&gt;else: &lt;tt&gt;(n  n-1  ...  n-k+1 ) / ( 1  2  ...  k )&lt;/tt&gt;.
                  &lt;/ul&gt;                
                <return>
                    the binomial coefficient.                    
                </return>
            </javadoc>
            <method name="binomial" type="double" line="49">
                <params>
                    <param name="n" type="long"/>
                    <param name="k" type="long"/>
                </params>
                <scope line="53">
                    <declaration name="max" type="int" line="54"/>
                    <scope line="55">
                        <declaration name="n_fac" type="double" line="56"/>
                        <declaration name="k_fac" type="double" line="57"/>
                        <declaration name="n_minus_k_fac" type="double" line="58"/>
                        <declaration name="nk" type="double" line="59"/>
                        <scope line="60"/>
                    </scope>
                </scope>
                <declaration name="a" type="long" line="66"/>
                <declaration name="b" type="long" line="67"/>
                <declaration name="binomial" type="double" line="68"/>
                <scope line="69"/>
            </method>
            <javadoc line="74">
                Returns the smallest &lt;code&gt;long &amp;gt;= value&lt;/code&gt;.
                  &lt;dt&gt;Examples: &lt;code&gt;1.0 -&gt; 1, 1.2 -&gt; 2, 1.9 -&gt; 2&lt;/code&gt;.
                  This method is safer than using (long) Math.ceil(value), because of possible rounding error.                
            </javadoc>
            <method name="ceil" type="long" line="79">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="82">
                Evaluates the series of Chebyshev polynomials Ti at argument x/2.
                  The series is given by
                  &lt;pre&gt;
                  N-1
                  - &apos;
                  y  =   &gt;   coef[i] T (x/2)
                  -            i
                  i=0
                  &lt;/pre&gt;
                  Coefficients are stored in reverse order, i.e. the zero
                  order term is last in the array.  Note N is the number of
                  coefficients, not the order.
                  &lt;p&gt;
                  If coefficients are for the interval a to b, x must
                  have been transformed to x -&gt; 2(2x - b - a)/(b-a) before
                  entering the routine.  This maps x from (a, b) to (-1, 1),
                  over which the Chebyshev polynomials are defined.
                  &lt;p&gt;
                  If the coefficients are for the inverted interval, in
                  which (a, b) is mapped to (1/b, 1/a), the transformation
                  required is x -&gt; 2(2ab/x - b - a)/(b-a).  If b is infinity,
                  this becomes x -&gt; 4a/x - 1.
                  &lt;p&gt;
                  SPEED:
                  &lt;p&gt;
                  Taking advantage of the recurrence properties of the
                  Chebyshev polynomials, the routine requires one more
                  addition per loop than evaluating a nested polynomial of
                  the same degree.                
                <param>
                    x argument to the polynomial.                    
                </param>
                <param>
                    coef the coefficients of the polynomial.                    
                </param>
                <param>
                    N the number of coefficients.                    
                </param>
            </javadoc>
            <method name="chbevl" type="double" line="116">
                <params>
                    <param name="x" type="double"/>
                    <param name="coef" type="double"/>
                    <param name="N" type="int"/>
                </params>
                <declaration name="b0" type="double" line="117"/>
                <declaration name="p" type="int" line="118"/>
                <declaration name="i" type="int" line="119"/>
                <scope line="123"/>
            </method>
            <javadoc line="131">
                Returns the factorial of the argument.                
            </javadoc>
            <method name="fac1" type="long" line="134">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="i" type="long" line="135"/>
                <declaration name="d" type="long" line="138"/>
            </method>
            <javadoc line="143">
                Returns the factorial of the argument.                
            </javadoc>
            <method name="fac2" type="double" line="146">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="i" type="long" line="147"/>
                <declaration name="d" type="double" line="149"/>
            </method>
            <javadoc line="154">
                Instantly returns the factorial &lt;tt&gt;k!&lt;/tt&gt;.                
                <param>
                    k must hold <tt>k &gt;= 0</tt>.                    
                </param>
            </javadoc>
            <method name="factorial" type="double" line="158">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="length1" type="int" line="160"/>
                <declaration name="length2" type="int" line="162"/>
            </method>
            <javadoc line="166">
                Returns the largest &lt;code&gt;long &amp;lt;= value&lt;/code&gt;.
                  &lt;dt&gt;Examples: &lt;code&gt;
                  1.0 -&gt; 1, 1.2 -&gt; 1, 1.9 -&gt; 1 &lt;dt&gt;
                  2.0 -&gt; 2, 2.2 -&gt; 2, 2.9 -&gt; 2 &lt;/code&gt;&lt;dt&gt;
                  This method is safer than using (long) Math.floor(value), because of possible rounding error.                
            </javadoc>
            <method name="floor" type="long" line="173">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="176">
                Returns &lt;tt&gt;log&lt;sub&gt;base&lt;/sub&gt;value&lt;/tt&gt;.                
            </javadoc>
            <method name="log" type="double" line="179">
                <params>
                    <param name="base" type="double"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="182">
                Returns &lt;tt&gt;log&lt;sub&gt;10&lt;/sub&gt;value&lt;/tt&gt;.                
            </javadoc>
            <method name="log10" type="double" line="185">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="188">
                Returns &lt;tt&gt;log&lt;sub&gt;2&lt;/sub&gt;value&lt;/tt&gt;.                
            </javadoc>
            <method name="log2" type="double" line="191">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="194">
                Returns &lt;tt&gt;log(k!)&lt;/tt&gt;.
                  Tries to avoid overflows.
                  For &lt;tt&gt;k&lt;30&lt;/tt&gt; simply looks up a table in O(1).
                  For &lt;tt&gt;k&gt;=30&lt;/tt&gt; uses stirlings approximation.                
                <param>
                    k must hold <tt>k &gt;= 0</tt>.                    
                </param>
            </javadoc>
            <method name="logFactorial" type="double" line="201">
                <params>
                    <param name="k" type="int"/>
                </params>
                <scope line="202">
                    <declaration name="r" type="double" line="203"/>
                    <declaration name="C0" type="double" line="204"/>
                    <declaration name="C1" type="double" line="205"/>
                    <declaration name="C3" type="double" line="206"/>
                    <declaration name="C5" type="double" line="207"/>
                    <declaration name="C7" type="double" line="208"/>
                </scope>
            </method>
            <javadoc line="215">
                Instantly returns the factorial &lt;tt&gt;k!&lt;/tt&gt;.                
                <param>
                    k must hold <tt>k &gt;= 0 && k &lt; 21</tt>.                    
                </param>
            </javadoc>
            <method name="longFactorial" type="long" line="219">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="224">
                Returns the StirlingCorrection.                 
                  &lt;p&gt;                                                                      
                  Correction term of the Stirling approximation for &lt;tt&gt;log(k!)&lt;/tt&gt;
                  (series in 1/k, or table values for small k)                         
                  with int parameter k.                                            
                  &lt;p&gt;                                                                                                                              
                  &lt;tt&gt;
                  log k! = (k + 1/2)log(k + 1) - (k + 1) + (1/2)log(2Pi) +
                  stirlingCorrection(k + 1)                                    
                  &lt;p&gt;                                                                      
                  log k! = (k + 1/2)log(k)     -  k      + (1/2)log(2Pi) +              
                  stirlingCorrection(k)
                  &lt;/tt&gt;                
            </javadoc>
            <method name="stirlingCorrection" type="double" line="239">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="C1" type="double" line="240"/>
                <declaration name="C3" type="double" line="241"/>
                <declaration name="C5" type="double" line="242"/>
                <declaration name="C7" type="double" line="243"/>
                <declaration name="r" type="double" line="244"/>
                <scope line="245"/>
            </method>
            <javadoc line="252">
                Equivalent to &lt;tt&gt;Math.round(binomial(n,k))&lt;/tt&gt;.                
            </javadoc>
            <method name="xlongBinomial" type="long" line="255">
                <params>
                    <param name="n" type="long"/>
                    <param name="k" type="long"/>
                </params>
            </method>
        </class>
    </source>