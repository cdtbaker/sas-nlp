<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.math">
        <import package="cern.colt.function.DoubleDoubleFunction"/>
        <import package="cern.colt.function.DoubleDoubleProcedure"/>
        <import package="cern.colt.function.DoubleFunction"/>
        <import package="cern.colt.function.DoubleProcedure"/>
        <class name="Functions" line="17">
            <extends class="Object"/>
            <comment line="167">
                &lt;H3&gt;Unary functions&lt;H3&gt;                
            </comment>
            <comment line="184">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.acosh(a)&lt;tt&gt;.                
            </comment>
            <comment line="187">
                public static final DoubleFunction acosh = new DoubleFunction() {
                public final double apply(double a) { return Sfun.acosh(a); }
                };                
            </comment>
            <comment line="200">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.asinh(a)&lt;tt&gt;.                
            </comment>
            <comment line="203">
                public static final DoubleFunction asinh = new DoubleFunction() {
                public final double apply(double a) { return Sfun.asinh(a); }
                };                
            </comment>
            <comment line="216">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.atanh(a)&lt;tt&gt;.                
            </comment>
            <comment line="219">
                public static final DoubleFunction atanh = new DoubleFunction() {
                public final double apply(double a) { return Sfun.atanh(a); }
                };                
            </comment>
            <comment line="239">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.cosh(a)&lt;tt&gt;.                
            </comment>
            <comment line="242">
                public static final DoubleFunction cosh = new DoubleFunction() {
                public final double apply(double a) { return Sfun.cosh(a); }
                };                
            </comment>
            <comment line="248">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.cot(a)&lt;tt&gt;.                
            </comment>
            <comment line="251">
                public static final DoubleFunction cot = new DoubleFunction() {
                public final double apply(double a) { return Sfun.cot(a); }
                };                
            </comment>
            <comment line="257">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.erf(a)&lt;tt&gt;.                
            </comment>
            <comment line="260">
                public static final DoubleFunction erf = new DoubleFunction() {
                public final double apply(double a) { return Sfun.erf(a); }
                };                
            </comment>
            <comment line="266">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.erfc(a)&lt;tt&gt;.                
            </comment>
            <comment line="269">
                public static final DoubleFunction erfc = new DoubleFunction() {
                public final double apply(double a) { return Sfun.erfc(a); }
                };                
            </comment>
            <comment line="289">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.gamma(a)&lt;tt&gt;.                
            </comment>
            <comment line="292">
                public static final DoubleFunction gamma = new DoubleFunction() {
                public final double apply(double a) { return Sfun.gamma(a); }
                };                
            </comment>
            <comment line="319">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.log10(a)&lt;tt&gt;.                
            </comment>
            <comment line="322">
                public static final DoubleFunction log10 = new DoubleFunction() {
                public final double apply(double a) { return Sfun.log10(a); }
                };                
            </comment>
            <comment line="336">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.logGamma(a)&lt;tt&gt;.                
            </comment>
            <comment line="339">
                public static final DoubleFunction logGamma = new DoubleFunction() {
                public final double apply(double a) { return Sfun.logGamma(a); }
                };                
            </comment>
            <comment line="373">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.sinh(a)&lt;tt&gt;.                
            </comment>
            <comment line="376">
                public static final DoubleFunction sinh = new DoubleFunction() {
                public final double apply(double a) { return Sfun.sinh(a); }
                };                
            </comment>
            <comment line="403">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.tanh(a)&lt;tt&gt;.                
            </comment>
            <comment line="406">
                public static final DoubleFunction tanh = new DoubleFunction() {
                public final double apply(double a) { return Sfun.tanh(a); }
                };                
            </comment>
            <comment line="412">
                Function that returns &lt;tt&gt;Math.toDegrees(a)&lt;tt&gt;.                
            </comment>
            <comment line="415">
                public static final DoubleFunction toDegrees = new DoubleFunction() {
                public final double apply(double a) { return Math.toDegrees(a); }
                };                
            </comment>
            <comment line="421">
                Function that returns &lt;tt&gt;Math.toRadians(a)&lt;tt&gt;.                
            </comment>
            <comment line="424">
                public static final DoubleFunction toRadians = new DoubleFunction() {
                public final double apply(double a) { return Math.toRadians(a); }
                };                
            </comment>
            <comment line="432">
                &lt;H3&gt;Binary functions&lt;H3&gt;                
            </comment>
            <comment line="443">
                Function that returns &lt;tt&gt;com.imsl.math.Sfun.logBeta(a,b)&lt;tt&gt;.                
            </comment>
            <comment line="446">
                public static final DoubleDoubleFunction logBeta = new DoubleDoubleFunction() {
                public final double apply(double a, double b) { return Sfun.logBeta(a,b); }
                };                
            </comment>
            <comment line="541">
                new DoubleDoubleFunction() {
                public final double apply(double a, double b) { return a - b; }
                };                
            </comment>
            <comment line="565">
                new DoubleDoubleFunction() {
                public final double apply(double a, double b) { return a + b; }
                };                
            </comment>
            <javadoc line="17">
                Function objects to be passed to generic methods. Contains the functions of {@link java.lang.Math} as function objects, as 
                  well as a few more basic functions.
                  &lt;p&gt;Function objects conveniently allow to express arbitrary functions in a generic 
                  manner. Essentially, a function object is an object that can perform a function 
                  on some arguments. It has a minimal interface: a method &lt;tt&gt;apply&lt;/tt&gt; that 
                  takes the arguments, computes something and returns some result value. Function 
                  objects are comparable to function pointers in C used for call-backs.
                  &lt;p&gt;Unary functions are of type {@link cern.colt.function.DoubleFunction}, binary functions 
                  of type {@link cern.colt.function.DoubleDoubleFunction}. All can be retrieved via &lt;tt&gt;public 
                  static final&lt;/tt&gt; variables named after the function. 
                  Unary predicates are of type {@link cern.colt.function.DoubleProcedure}, binary predicates 
                  of type {@link cern.colt.function.DoubleDoubleProcedure}. All can be retrieved via &lt;tt&gt;public 
                  static final&lt;/tt&gt; variables named &lt;tt&gt;isXXX&lt;/tt&gt;. 
                  &lt;p&gt; Binary functions and predicates also exist as unary functions with the second argument being 
                  fixed to a constant. These are generated and retrieved via factory methods (again 
                  with the same name as the function). Example: 
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;Functions.pow&lt;/tt&gt; gives the function &lt;tt&gt;a&lt;sup&gt;b&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.pow.apply(2,3)==8&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.pow(3)&lt;/tt&gt; gives the function &lt;tt&gt;a&lt;sup&gt;3&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.pow(3).apply(2)==8&lt;/tt&gt;.
                  &lt;/ul&gt;
                  More general, any binary function can be made an unary functions by fixing either 
                  the first or the second argument. See methods {@link #bindArg1(DoubleDoubleFunction,double)} 
                  and {@link #bindArg2(DoubleDoubleFunction,double)}. The order of arguments 
                  can be swapped so that the first argument becomes the second and vice-versa. See 
                  method {@link #swapArgs(DoubleDoubleFunction)}. Example: 
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;Functions.pow&lt;/tt&gt; gives the function &lt;tt&gt;a&lt;sup&gt;b&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.bindArg2(Functions.pow,3)&lt;/tt&gt; gives the function &lt;tt&gt;x&lt;sup&gt;3&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.bindArg1(Functions.pow,3)&lt;/tt&gt; gives the function &lt;tt&gt;3&lt;sup&gt;x&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Functions.swapArgs(Functions.pow)&lt;/tt&gt; gives the function &lt;tt&gt;b&lt;sup&gt;a&lt;/sup&gt;&lt;/tt&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Even more general, functions can be chained (composed, assembled). Assume we have two unary 
                  functions &lt;tt&gt;g&lt;/tt&gt; and &lt;tt&gt;h&lt;/tt&gt;. The unary function &lt;tt&gt;g(h(a))&lt;/tt&gt; applying 
                  both in sequence can be generated via {@link #chain(DoubleFunction,DoubleFunction)}:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;Functions.chain(g,h);&lt;/tt&gt;
                  &lt;/ul&gt; 
                  Assume further we have a binary function &lt;tt&gt;f&lt;/tt&gt;. The binary function &lt;tt&gt;g(f(a,b))&lt;/tt&gt; 
                  can be generated via {@link #chain(DoubleFunction,DoubleDoubleFunction)}:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;Functions.chain(g,f);&lt;/tt&gt;
                  &lt;/ul&gt;
                  The binary function &lt;tt&gt;f(g(a),h(b))&lt;/tt&gt; 
                  can be generated via {@link #chain(DoubleDoubleFunction,DoubleFunction,DoubleFunction)}:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;Functions.chain(f,g,h);&lt;/tt&gt;
                  &lt;/ul&gt;
                  Arbitrarily complex functions can be composed from these building blocks. For example
                  &lt;tt&gt;sin(a) + cos&lt;sup&gt;2&lt;/sup&gt;(b)&lt;/tt&gt; can be specified as follows:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;chain(plus,sin,chain(square,cos));&lt;/tt&gt;
                  &lt;/ul&gt; 
                  or, of course, as 
                  &lt;pre&gt;
                  new DoubleDoubleFunction() {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;public final double apply(double a, double b) { return Math.sin(a) + Math.pow(Math.cos(b),2); }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  For aliasing see {@link #functions}.
                  Try this
                  &lt;table&gt;
                  &lt;td class=&quot;PRE&quot;&gt; 
                  &lt;pre&gt;
                  // should yield 1.4399560356056456 in all cases
                  double a = 0.5; 
                  double b = 0.2;
                  double v = Math.sin(a) + Math.pow(Math.cos(b),2);
                  System.out.println(v);
                  Functions F = Functions.functions;
                  DoubleDoubleFunction f = F.chain(F.plus,F.sin,F.chain(F.square,F.cos));
                  System.out.println(f.apply(a,b));
                  DoubleDoubleFunction g = new DoubleDoubleFunction() {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;public double apply(double a, double b) { return Math.sin(a) + Math.pow(Math.cos(b),2); }
                  };
                  System.out.println(g.apply(a,b));
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;/table&gt;
                  &lt;p&gt;
                  &lt;H3&gt;Performance&lt;/H3&gt;
                  Surprise. Using modern non-adaptive JITs such as SunJDK 1.2.2 (java -classic) 
                  there seems to be no or only moderate performance penalty in using function 
                  objects in a loop over traditional code in a loop. For complex nested function 
                  objects (e.g. &lt;tt&gt;F.chain(F.abs,F.chain(F.plus,F.sin,F.chain(F.square,F.cos)))&lt;/tt&gt;) 
                  the penalty is zero, for trivial functions (e.g. &lt;tt&gt;F.plus&lt;/tt&gt;) the penalty 
                  is often acceptable.
                  &lt;center&gt;
                  &lt;table border cellpadding=&quot;3&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#33CC66&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td nowrap colspan=&quot;7&quot;&gt; &lt;font size=&quot;+2&quot;&gt;Iteration Performance [million function 
                  evaluations per second]&lt;/font&gt;&lt;br&gt;
                  &lt;font size=&quot;-1&quot;&gt;Pentium Pro 200 Mhz, SunJDK 1.2.2, NT, java -classic, 
                  &lt;/font&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td nowrap bgcolor=&quot;#FF9966&quot; rowspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot; colspan=&quot;2&quot;&gt; 
                  &lt;p&gt; 30000000 iterations&lt;/p&gt;
                  &lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot; colspan=&quot;2&quot;&gt; 3000000 iterations (10 times less)&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot; colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt; &lt;tt&gt;F.plus&lt;/tt&gt;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt;&lt;tt&gt;a+b&lt;/tt&gt;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt; &lt;tt&gt;F.chain(F.abs,F.chain(F.plus,F.sin,F.chain(F.square,F.cos)))&lt;/tt&gt;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt; &lt;tt&gt;Math.abs(Math.sin(a) + Math.pow(Math.cos(b),2))&lt;/tt&gt;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td nowrap bgcolor=&quot;#FF9966&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td nowrap&gt;10.8&lt;/td&gt;
                  &lt;td nowrap&gt;29.6&lt;/td&gt;
                  &lt;td nowrap&gt;0.43&lt;/td&gt;
                  &lt;td nowrap&gt;0.35&lt;/td&gt;
                  &lt;td nowrap&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td nowrap&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;&lt;/center&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="functions" type="Functions" line="152"/>
            <javadoc line="152">
                Little trick to allow for &quot;aliasing&quot;, that is, renaming this class.
                  Writing code like
                  &lt;p&gt;
                  &lt;tt&gt;Functions.chain(Functions.plus,Functions.sin,Functions.chain(Functions.square,Functions.cos));&lt;/tt&gt;
                  &lt;p&gt;
                  is a bit awkward, to say the least.
                  Using the aliasing you can instead write
                  &lt;p&gt;
                  &lt;tt&gt;Functions F = Functions.functions; &lt;br&gt;
                  F.chain(F.plus,F.sin,F.chain(F.square,F.cos));&lt;/tt&gt;                
            </javadoc>
            <declaration name="abs" type="DoubleFunction" line="169"/>
            <javadoc line="169">
                Function that returns &lt;tt&gt;Math.abs(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="172">
                <method name="apply" type="double" line="173">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="acos" type="DoubleFunction" line="176"/>
            <javadoc line="176">
                Function that returns &lt;tt&gt;Math.acos(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="179">
                <method name="apply" type="double" line="180">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="asin" type="DoubleFunction" line="192"/>
            <javadoc line="192">
                Function that returns &lt;tt&gt;Math.asin(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="195">
                <method name="apply" type="double" line="196">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="atan" type="DoubleFunction" line="208"/>
            <javadoc line="208">
                Function that returns &lt;tt&gt;Math.atan(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="211">
                <method name="apply" type="double" line="212">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="ceil" type="DoubleFunction" line="224"/>
            <javadoc line="224">
                Function that returns &lt;tt&gt;Math.ceil(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="227">
                <method name="apply" type="double" line="228">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="cos" type="DoubleFunction" line="231"/>
            <javadoc line="231">
                Function that returns &lt;tt&gt;Math.cos(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="234">
                <method name="apply" type="double" line="235">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="exp" type="DoubleFunction" line="274"/>
            <javadoc line="274">
                Function that returns &lt;tt&gt;Math.exp(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="277">
                <method name="apply" type="double" line="278">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="floor" type="DoubleFunction" line="281"/>
            <javadoc line="281">
                Function that returns &lt;tt&gt;Math.floor(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="284">
                <method name="apply" type="double" line="285">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="identity" type="DoubleFunction" line="297"/>
            <javadoc line="297">
                Function that returns its argument.                
            </javadoc>
            <anonymous_class line="300">
                <method name="apply" type="double" line="301">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="inv" type="DoubleFunction" line="304"/>
            <javadoc line="304">
                Function that returns &lt;tt&gt;1.0 / a&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="307">
                <method name="apply" type="double" line="308">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="log" type="DoubleFunction" line="311"/>
            <javadoc line="311">
                Function that returns &lt;tt&gt;Math.log(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="314">
                <method name="apply" type="double" line="315">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="log2" type="DoubleFunction" line="327"/>
            <javadoc line="327">
                Function that returns &lt;tt&gt;Math.log(a) / Math.log(2)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="330">
                <method name="apply" type="double" line="332">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="neg" type="DoubleFunction" line="344"/>
            <javadoc line="344">
                Function that returns &lt;tt&gt;-a&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="347">
                <method name="apply" type="double" line="348">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="rint" type="DoubleFunction" line="351"/>
            <javadoc line="351">
                Function that returns &lt;tt&gt;Math.rint(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="354">
                <method name="apply" type="double" line="355">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="sign" type="DoubleFunction" line="358"/>
            <javadoc line="358">
                Function that returns &lt;tt&gt;a &lt; 0 ? -1 : a &gt; 0 ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="361">
                <method name="apply" type="double" line="362">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="sin" type="DoubleFunction" line="365"/>
            <javadoc line="365">
                Function that returns &lt;tt&gt;Math.sin(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="368">
                <method name="apply" type="double" line="369">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="sqrt" type="DoubleFunction" line="381"/>
            <javadoc line="381">
                Function that returns &lt;tt&gt;Math.sqrt(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="384">
                <method name="apply" type="double" line="385">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="square" type="DoubleFunction" line="388"/>
            <javadoc line="388">
                Function that returns &lt;tt&gt;a  a&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="391">
                <method name="apply" type="double" line="392">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="tan" type="DoubleFunction" line="395"/>
            <javadoc line="395">
                Function that returns &lt;tt&gt;Math.tan(a)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="398">
                <method name="apply" type="double" line="399">
                    <params>
                        <param name="a" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="atan2" type="DoubleDoubleFunction" line="435"/>
            <javadoc line="435">
                Function that returns &lt;tt&gt;Math.atan2(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="438">
                <method name="apply" type="double" line="439">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="compare" type="DoubleDoubleFunction" line="452"/>
            <javadoc line="452">
                Function that returns &lt;tt&gt;a &lt; b ? -1 : a &gt; b ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="455">
                <method name="apply" type="double" line="456">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="div" type="DoubleDoubleFunction" line="459"/>
            <javadoc line="459">
                Function that returns &lt;tt&gt;a / b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="462">
                <method name="apply" type="double" line="463">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="equals" type="DoubleDoubleFunction" line="466"/>
            <javadoc line="466">
                Function that returns &lt;tt&gt;a == b ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="469">
                <method name="apply" type="double" line="470">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="greater" type="DoubleDoubleFunction" line="473"/>
            <javadoc line="473">
                Function that returns &lt;tt&gt;a &gt; b ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="476">
                <method name="apply" type="double" line="477">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="IEEEremainder" type="DoubleDoubleFunction" line="480"/>
            <javadoc line="480">
                Function that returns &lt;tt&gt;Math.IEEEremainder(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="483">
                <method name="apply" type="double" line="484">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="isEqual" type="DoubleDoubleProcedure" line="487"/>
            <javadoc line="487">
                Function that returns &lt;tt&gt;a == b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="490">
                <method name="apply" type="boolean" line="491">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="isLess" type="DoubleDoubleProcedure" line="494"/>
            <javadoc line="494">
                Function that returns &lt;tt&gt;a &lt; b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="497">
                <method name="apply" type="boolean" line="498">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="isGreater" type="DoubleDoubleProcedure" line="501"/>
            <javadoc line="501">
                Function that returns &lt;tt&gt;a &gt; b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="504">
                <method name="apply" type="boolean" line="505">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="less" type="DoubleDoubleFunction" line="508"/>
            <javadoc line="508">
                Function that returns &lt;tt&gt;a &lt; b ? 1 : 0&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="511">
                <method name="apply" type="double" line="512">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="lg" type="DoubleDoubleFunction" line="515"/>
            <javadoc line="515">
                Function that returns &lt;tt&gt;Math.log(a) / Math.log(b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="518">
                <method name="apply" type="double" line="519">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="max" type="DoubleDoubleFunction" line="522"/>
            <javadoc line="522">
                Function that returns &lt;tt&gt;Math.max(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="525">
                <method name="apply" type="double" line="526">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="min" type="DoubleDoubleFunction" line="529"/>
            <javadoc line="529">
                Function that returns &lt;tt&gt;Math.min(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="532">
                <method name="apply" type="double" line="533">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="minus" type="DoubleDoubleFunction" line="536"/>
            <javadoc line="536">
                Function that returns &lt;tt&gt;a - b&lt;/tt&gt;.                
            </javadoc>
            <declaration name="mod" type="DoubleDoubleFunction" line="546"/>
            <javadoc line="546">
                Function that returns &lt;tt&gt;a % b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="549">
                <method name="apply" type="double" line="550">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="mult" type="DoubleDoubleFunction" line="553"/>
            <javadoc line="553">
                Function that returns &lt;tt&gt;a  b&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="556">
                <method name="apply" type="double" line="557">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="plus" type="DoubleDoubleFunction" line="560"/>
            <javadoc line="560">
                Function that returns &lt;tt&gt;a + b&lt;/tt&gt;.                
            </javadoc>
            <declaration name="plusAbs" type="DoubleDoubleFunction" line="570"/>
            <javadoc line="570">
                Function that returns &lt;tt&gt;Math.abs(a) + Math.abs(b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="573">
                <method name="apply" type="double" line="574">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="pow" type="DoubleDoubleFunction" line="577"/>
            <javadoc line="577">
                Function that returns &lt;tt&gt;Math.pow(a,b)&lt;/tt&gt;.                
            </javadoc>
            <anonymous_class line="580">
                <method name="apply" type="double" line="581">
                    <params>
                        <param name="a" type="double"/>
                        <param name="b" type="double"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="583">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Functions" type="constructor" line="586"/>
            <javadoc line="587">
                Constructs a function that returns &lt;tt&gt;(from&lt;=a &amp;&amp; a&lt;=to) ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt; are fixed.                
            </javadoc>
            <method name="between" type="DoubleFunction" line="591">
                <params>
                    <param name="from" type="double"/>
                    <param name="to" type="double"/>
                </params>
                <anonymous_class line="592">
                    <method name="apply" type="double" line="593">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="596">
                Constructs a unary function from a binary function with the first operand (argument) fixed to the given constant &lt;tt&gt;c&lt;/tt&gt;.
                  The second operand is variable (free).                
                <param>
                    function a binary function taking operands in the form &lt;tt&gt;function.apply(c,var)&lt;/tt&gt;.                    
                </param>
                <return>
                    the unary function &lt;tt&gt;function(c,var)&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="bindArg1" type="DoubleFunction" line="603">
                <params>
                    <param name="function" type="DoubleDoubleFunction"/>
                    <param name="c" type="double"/>
                </params>
                <anonymous_class line="604">
                    <method name="apply" type="double" line="605">
                        <params>
                            <param name="var" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="608">
                Constructs a unary function from a binary function with the second operand (argument) fixed to the given constant &lt;tt&gt;c&lt;/tt&gt;.
                  The first operand is variable (free).                
                <param>
                    function a binary function taking operands in the form &lt;tt&gt;function.apply(var,c)&lt;/tt&gt;.                    
                </param>
                <return>
                    the unary function &lt;tt&gt;function(var,c)&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="bindArg2" type="DoubleFunction" line="615">
                <params>
                    <param name="function" type="DoubleDoubleFunction"/>
                    <param name="c" type="double"/>
                </params>
                <anonymous_class line="616">
                    <method name="apply" type="double" line="617">
                        <params>
                            <param name="var" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="620">
                Constructs the function &lt;tt&gt;f( g(a), h(b) )&lt;/tt&gt;.                
                <param>
                    f a binary function.                    
                </param>
                <param>
                    g a unary function.                    
                </param>
                <param>
                    h a unary function.                    
                </param>
                <return>
                    the binary function &lt;tt&gt;f( g(a), h(b) )&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="chain" type="DoubleDoubleFunction" line="628">
                <params>
                    <param name="f" type="DoubleDoubleFunction"/>
                    <param name="g" type="DoubleFunction"/>
                    <param name="h" type="DoubleFunction"/>
                </params>
                <anonymous_class line="629">
                    <method name="apply" type="double" line="630">
                        <params>
                            <param name="a" type="double"/>
                            <param name="b" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="633">
                Constructs the function &lt;tt&gt;g( h(a,b) )&lt;/tt&gt;.                
                <param>
                    g a unary function.                    
                </param>
                <param>
                    h a binary function.                    
                </param>
                <return>
                    the unary function &lt;tt&gt;g( h(a,b) )&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="chain" type="DoubleDoubleFunction" line="640">
                <params>
                    <param name="g" type="DoubleFunction"/>
                    <param name="h" type="DoubleDoubleFunction"/>
                </params>
                <anonymous_class line="641">
                    <method name="apply" type="double" line="642">
                        <params>
                            <param name="a" type="double"/>
                            <param name="b" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="645">
                Constructs the function &lt;tt&gt;g( h(a) )&lt;/tt&gt;.                
                <param>
                    g a unary function.                    
                </param>
                <param>
                    h a unary function.                    
                </param>
                <return>
                    the unary function &lt;tt&gt;g( h(a) )&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="chain" type="DoubleFunction" line="652">
                <params>
                    <param name="g" type="DoubleFunction"/>
                    <param name="h" type="DoubleFunction"/>
                </params>
                <anonymous_class line="653">
                    <method name="apply" type="double" line="654">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="657">
                Constructs a function that returns &lt;tt&gt;a &lt; b ? -1 : a &gt; b ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="compare" type="DoubleFunction" line="661">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="662">
                    <method name="apply" type="double" line="663">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="666">
                Constructs a function that returns the constant &lt;tt&gt;c&lt;/tt&gt;.                
            </javadoc>
            <method name="constant" type="DoubleFunction" line="669">
                <params>
                    <param name="c" type="double"/>
                </params>
                <anonymous_class line="670">
                    <method name="apply" type="double" line="671">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="674">
                Demonstrates usage of this class.                
            </javadoc>
            <method name="demo1" type="void" line="677">
                <comment line="685">
                    DoubleDoubleFunction f = F.chain(plus,sin,F.chain(square,cos));                    
                </comment>
                <declaration name="F" type="cern.jet.math.Functions" line="678"/>
                <declaration name="a" type="double" line="679"/>
                <declaration name="b" type="double" line="680"/>
                <declaration name="v" type="double" line="681"/>
                <declaration name="f" type="DoubleDoubleFunction" line="683"/>
                <anonymous_class line="686">
                    <method name="apply" type="double" line="687">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="g" type="DoubleDoubleFunction" line="686"/>
                <declaration name="m" type="DoubleFunction" line="690"/>
                <declaration name="n" type="DoubleFunction" line="691"/>
            </method>
            <javadoc line="695">
                Benchmarks and demonstrates usage of trivial and complex functions.                
            </javadoc>
            <method name="demo2" type="void" line="698">
                <params>
                    <param name="size" type="int"/>
                </params>
                <comment line="705">
                    double v = Math.sin(a) + Math.pow(Math.cos(b),2);
                    double v = a + b;                    
                </comment>
                <comment line="709">
                    DoubleDoubleFunction f = F.chain(F.plus,F.identity,F.identity);                    
                </comment>
                <comment line="711">
                    DoubleDoubleFunction f = F.chain(F.plus,F.sin,F.chain(F.square,F.cos));
                    DoubleDoubleFunction f = F.plus;                    
                </comment>
                <comment line="717">
                    public final double apply(double x, double y) { return x+y; }                    
                </comment>
                <comment line="721">
                    emptyLoop                    
                </comment>
                <comment line="738">
                    sum += a + b;                    
                </comment>
                <declaration name="F" type="cern.jet.math.Functions" line="699"/>
                <declaration name="a" type="double" line="701"/>
                <declaration name="b" type="double" line="702"/>
                <declaration name="v" type="double" line="703"/>
                <declaration name="f" type="DoubleDoubleFunction" line="709"/>
                <anonymous_class line="714">
                    <method name="apply" type="double" line="715">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="g" type="DoubleDoubleFunction" line="714"/>
                <declaration name="emptyLoop" type="cern.colt.Timer" line="721"/>
                <declaration name="sum" type="double" line="723"/>
                <scope line="724"/>
                <declaration name="timer" type="cern.colt.Timer" line="732"/>
                <scope line="735"/>
                <scope line="747"/>
                <scope line="758"/>
            </method>
            <javadoc line="767">
                Constructs a function that returns &lt;tt&gt;a / b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="div" type="DoubleFunction" line="771">
                <params>
                    <param name="b" type="double"/>
                </params>
            </method>
            <javadoc line="774">
                Constructs a function that returns &lt;tt&gt;a == b ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="equals" type="DoubleFunction" line="778">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="779">
                    <method name="apply" type="double" line="780">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="783">
                Constructs a function that returns &lt;tt&gt;a &gt; b ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="greater" type="DoubleFunction" line="787">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="788">
                    <method name="apply" type="double" line="789">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="792">
                Constructs a function that returns &lt;tt&gt;Math.IEEEremainder(a,b)&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="IEEEremainder" type="DoubleFunction" line="796">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="797">
                    <method name="apply" type="double" line="798">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="801">
                Constructs a function that returns &lt;tt&gt;from&lt;=a &amp;&amp; a&lt;=to&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt; are fixed.                
            </javadoc>
            <method name="isBetween" type="DoubleProcedure" line="805">
                <params>
                    <param name="from" type="double"/>
                    <param name="to" type="double"/>
                </params>
                <anonymous_class line="806">
                    <method name="apply" type="boolean" line="807">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="810">
                Constructs a function that returns &lt;tt&gt;a == b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="isEqual" type="DoubleProcedure" line="814">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="815">
                    <method name="apply" type="boolean" line="816">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="819">
                Constructs a function that returns &lt;tt&gt;a &gt; b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="isGreater" type="DoubleProcedure" line="823">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="824">
                    <method name="apply" type="boolean" line="825">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="828">
                Constructs a function that returns &lt;tt&gt;a &lt; b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="isLess" type="DoubleProcedure" line="832">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="833">
                    <method name="apply" type="boolean" line="834">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="837">
                Constructs a function that returns &lt;tt&gt;a &lt; b ? 1 : 0&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="less" type="DoubleFunction" line="841">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="842">
                    <method name="apply" type="double" line="843">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="846">
                Constructs a function that returns &lt;tt&gt;&lt;tt&gt;Math.log(a) / Math.log(b)&lt;/tt&gt;&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="lg" type="DoubleFunction" line="850">
                <params>
                    <param name="b" type="double"/>
                </params>
                <comment line="853">
                    cached for speed                    
                </comment>
                <anonymous_class line="851">
                    <declaration name="logInv" type="double" line="852"/>
                    <method name="apply" type="double" line="853">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="856">
                Tests various methods of this class.                
            </javadoc>
            <method name="main" type="void" line="859">
                <params>
                    <param name="args" type="String"/>
                </params>
                <comment line="863">
                    demo1();                    
                </comment>
                <declaration name="size" type="int" line="860"/>
            </method>
            <javadoc line="864">
                Constructs a function that returns &lt;tt&gt;Math.max(a,b)&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="max" type="DoubleFunction" line="868">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="869">
                    <method name="apply" type="double" line="870">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="873">
                Constructs a function that returns &lt;tt&gt;Math.min(a,b)&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="min" type="DoubleFunction" line="877">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="878">
                    <method name="apply" type="double" line="879">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="882">
                Constructs a function that returns &lt;tt&gt;a - b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="minus" type="DoubleFunction" line="886">
                <params>
                    <param name="b" type="double"/>
                </params>
            </method>
            <javadoc line="889">
                Constructs a function that returns &lt;tt&gt;a - bconstant&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt; are variables, &lt;tt&gt;constant&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="minusMult" type="DoubleDoubleFunction" line="893">
                <params>
                    <param name="constant" type="double"/>
                </params>
            </method>
            <javadoc line="896">
                Constructs a function that returns &lt;tt&gt;a % b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="mod" type="DoubleFunction" line="900">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="901">
                    <method name="apply" type="double" line="902">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="905">
                Constructs a function that returns &lt;tt&gt;a  b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="mult" type="DoubleFunction" line="909">
                <params>
                    <param name="b" type="double"/>
                </params>
                <comment line="912">
                    return new DoubleFunction() {
                    public final double apply(double a) { return a  b; }
                    };                    
                </comment>
            </method>
            <javadoc line="917">
                Constructs a function that returns &lt;tt&gt;a + b&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="plus" type="DoubleFunction" line="921">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="922">
                    <method name="apply" type="double" line="923">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="926">
                Constructs a function that returns &lt;tt&gt;a + bconstant&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt; are variables, &lt;tt&gt;constant&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="plusMult" type="DoubleDoubleFunction" line="930">
                <params>
                    <param name="constant" type="double"/>
                </params>
                <comment line="933">
                    return new DoubleDoubleFunction() {
                    public final double apply(double a, double b) { return a + bconstant; }
                    };                    
                </comment>
            </method>
            <javadoc line="938">
                Constructs a function that returns &lt;tt&gt;Math.pow(a,b)&lt;/tt&gt;.
                  &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.                
            </javadoc>
            <method name="pow" type="DoubleFunction" line="942">
                <params>
                    <param name="b" type="double"/>
                </params>
                <anonymous_class line="943">
                    <method name="apply" type="double" line="944">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="947">
                Constructs a function that returns a new uniform random number in the open unit interval &lt;code&gt;(0.0,1.0)&lt;/code&gt; (excluding 0.0 and 1.0).
                  Currently the engine is {@link cern.jet.random.engine.MersenneTwister}and is seeded with the current time.
                  &lt;p&gt;
                  Note that any random engine derived from {@link cern.jet.random.engine.RandomEngine} and any random distribution derived from {@link cern.jet.random.AbstractDistribution} are function objects, because they implement the proper interfaces.
                  Thus, if you are not happy with the default, just pass your favourite random generator to function evaluating methods.                
            </javadoc>
            <method name="random" type="DoubleFunction" line="955"/>
            <javadoc line="958">
                Constructs a function that returns the number rounded to the given precision; &lt;tt&gt;Math.rint(a/precision)precision&lt;/tt&gt;.
                  Examples:
                  &lt;pre&gt;
                  precision = 0.01 rounds 0.012 --&gt; 0.01, 0.018 --&gt; 0.02
                  precision = 10   rounds 123   --&gt; 120 , 127   --&gt; 130
                  &lt;/pre&gt;                
            </javadoc>
            <method name="round" type="DoubleFunction" line="966">
                <params>
                    <param name="precision" type="double"/>
                </params>
                <anonymous_class line="967">
                    <method name="apply" type="double" line="968">
                        <params>
                            <param name="a" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="971">
                Constructs a function that returns &lt;tt&gt;function.apply(b,a)&lt;/tt&gt;, i.e. applies the function with the first operand as second operand and the second operand as first operand.                
                <param>
                    function a function taking operands in the form &lt;tt&gt;function.apply(a,b)&lt;/tt&gt;.                    
                </param>
                <return>
                    the binary function &lt;tt&gt;function(b,a)&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="swapArgs" type="DoubleDoubleFunction" line="977">
                <params>
                    <param name="function" type="DoubleDoubleFunction"/>
                </params>
                <anonymous_class line="978">
                    <method name="apply" type="double" line="979">
                        <params>
                            <param name="a" type="double"/>
                            <param name="b" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>