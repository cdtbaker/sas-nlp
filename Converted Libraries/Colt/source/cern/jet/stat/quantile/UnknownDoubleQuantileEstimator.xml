<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.colt.list.ObjectArrayList"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.random.sampling.WeightedRandomSampler"/>
        <class name="UnknownDoubleQuantileEstimator" line="15">
            <extends class="DoubleQuantileEstimator"/>
            <javadoc line="15">
                Approximate quantile finding algorithm for unknown &lt;tt&gt;N&lt;/tt&gt; requiring only one pass and little main memory; computes quantiles over a sequence of &lt;tt&gt;double&lt;/tt&gt; elements.
                  This algorithm requires at most two times the memory of a corresponding approx. quantile finder knowing &lt;tt&gt;N&lt;/tt&gt;.
                  &lt;p&gt;Needs as input the following parameters:&lt;p&gt;
                  &lt;dt&gt;1. &lt;tt&gt;quantiles&lt;/tt&gt; - the number of quantiles to be computed.
                  &lt;dt&gt;2. &lt;tt&gt;epsilon&lt;/tt&gt; - the allowed approximation error on quantiles. The approximation guarantee of this algorithm is explicit.
                  &lt;p&gt;It is also possible to couple the approximation algorithm with random sampling to further reduce memory requirements. 
                  With sampling, the approximation guarantees are explicit but probabilistic, i.e. they apply with respect to a (user controlled) confidence parameter &quot;delta&quot;.
                  &lt;dt&gt;3. &lt;tt&gt;delta&lt;/tt&gt; - the probability allowed that the approximation error fails to be smaller than epsilon. Set &lt;tt&gt;delta&lt;/tt&gt; to zero for explicit non probabilistic guarantees.
                  You usually don&apos;t instantiate quantile finders by using the constructor. Instead use the factory &lt;tt&gt;QuantileFinderFactor&lt;/tt&gt; to do so. It will set up the right parametrization for you.
                  &lt;p&gt;After Gurmeet Singh Manku, Sridhar Rajagopalan and Bruce G. Lindsay,
                  Random Sampling Techniques for Space Efficient Online Computation of Order Statistics of Large Datasets.
                  Accepted for Proc. of the 1999 ACM SIGMOD Int. Conf. on Management of Data,
                  Paper (soon) available &lt;A HREF=&quot;http://www-cad.eecs.berkeley.edu/~manku&quot;&gt; here&lt;/A&gt;.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    QuantileFinderFactory                    
                </see>
                <see>
                    KnownApproximateDoubleQuantileFinder                    
                </see>
            </javadoc>
            <declaration name="currentTreeHeight" type="int" line="41"/>
            <declaration name="treeHeightStartingSampling" type="int" line="42"/>
            <declaration name="sampler" type="WeightedRandomSampler" line="43"/>
            <declaration name="precomputeEpsilon" type="double" line="44"/>
            <javadoc line="45">
                Constructs an approximate quantile finder with b buffers, each having k elements.                
                <param>
                    b the number of buffers                    
                </param>
                <param>
                    k the number of elements per buffer                    
                </param>
                <param>
                    h the tree height at which sampling shall start.                    
                </param>
                <param>
                    precomputeEpsilon the epsilon for which quantiles shall be precomputed; set this value &lt;=0.0 if nothing shall be precomputed.                    
                </param>
                <param>
                    generator a uniform random number generator.                    
                </param>
            </javadoc>
            <method name="UnknownDoubleQuantileEstimator" type="constructor" line="53">
                <params>
                    <param name="b" type="int"/>
                    <param name="k" type="int"/>
                    <param name="h" type="int"/>
                    <param name="precomputeEpsilon" type="double"/>
                    <param name="generator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="60">
                Not yet commented.                
            </javadoc>
            <method name="buffersToCollapse" type="DoubleBuffer[]" line="63">
                <comment line="69">
                    if there is only one buffer at the lowest level, then increase its level so that there are at least two at the lowest level.                    
                </comment>
                <declaration name="fullBuffers" type="DoubleBuffer[]" line="64"/>
                <declaration name="minLevel" type="int" line="69"/>
                <scope line="70"/>
            </method>
            <javadoc line="76">
                Removes all elements from the receiver.  The receiver will
                  be empty after this call returns, and its memory requirements will be close to zero.                
            </javadoc>
            <method name="clear" type="void" line="80"/>
            <javadoc line="85">
                Returns a deep copy of the receiver.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="90">
                <declaration name="copy" type="UnknownDoubleQuantileEstimator" line="91"/>
            </method>
            <javadoc line="95">
                Not yet commented.                
            </javadoc>
            <method name="newBuffer" type="void" line="98"/>
            <javadoc line="105">
                Not yet commented.                
            </javadoc>
            <method name="postCollapse" type="void" line="108">
                <params>
                    <param name="toCollapse" type="DoubleBuffer[]"/>
                </params>
                <comment line="110">
                    delta for unknown finder                    
                </comment>
                <scope line="109">
                    <scope line="111"/>
                </scope>
            </method>
            <javadoc line="116">
                Computes the specified quantile elements over the values previously added.                
                <param>
                    phis the quantiles for which elements are to be computed. Each phi must be in the interval (0.0,1.0]. &lt;tt&gt;phis&lt;/tt&gt; must be sorted ascending.                    
                </param>
                <return>
                    the approximate quantile elements.                    
                </return>
            </javadoc>
            <method name="quantileElements" type="DoubleArrayList" line="121">
                <params>
                    <param name="phis" type="DoubleArrayList"/>
                </params>
                <comment line="126">
                    if (phis.size() &gt; quantilesToPrecompute) {
                     illegal use case!
                     we compute results, but loose explicit approximation guarantees.
                    return super.quantileElements(phis);
                    }                    
                </comment>
                <comment line="134">
                    select that quantile from the precomputed set that corresponds to a position closest to phi.                    
                </comment>
                <comment line="139">
                    finds closest                    
                </comment>
                <declaration name="quantilesToPrecompute" type="int" line="124"/>
                <declaration name="e" type="double" line="135"/>
                <scope line="136">
                    <declaration name="phi" type="double" line="137"/>
                    <declaration name="i" type="int" line="138"/>
                    <declaration name="augmentedPhi" type="double" line="140"/>
                </scope>
            </method>
            <javadoc line="146">
                Not yet commented.                
            </javadoc>
            <method name="sampleNextElement" type="boolean" line="149"/>
            <javadoc line="152">
                To do. This could faster be done without sorting (min and second min).                
            </javadoc>
            <method name="sortAscendingByLevel" type="void" line="155">
                <params>
                    <param name="fullBuffers" type="DoubleBuffer[]"/>
                </params>
                <anonymous_class line="157">
                    <method name="compare" type="int" line="158">
                        <params>
                            <param name="o1" type="Object"/>
                            <param name="o2" type="Object"/>
                        </params>
                        <declaration name="l1" type="int" line="159"/>
                        <declaration name="l2" type="int" line="160"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="166">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="169">
                <declaration name="buf" type="StringBuffer" line="170"/>
            </method>
        </class>
    </source>