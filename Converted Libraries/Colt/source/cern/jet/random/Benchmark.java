package cern.jet.random;
import cern.colt.list.DoubleArrayList;
import cern.colt.list.IntArrayList;
import cern.jet.random.engine.RandomEngine;
/** 
 * Benchmarks random number generation from various distributions as well as PDF and CDF lookups.
 * @author wolfgang.hoschek@cern.ch
 * @version 1.0, 09/24/99
 */
public class Benchmark extends cern.colt.PersistentObject {
  protected RandomEngine randomGenerator;
  /** 
 * Makes this class non instantiable, but still let's others inherit from it.
 */
  protected Benchmark(){
    throw new RuntimeException("Non instantiable");
  }
  /** 
 * Prints the first <tt>size</tt> random numbers generated by the distribution.
 */
  public static void demo1(){
    double mean=5;
    double variance=1.5;
    double alpha=mean * mean / variance;
    double lambda=1 / (variance / mean);
    cern.jet.random.engine.RandomEngine engine=new cern.jet.random.engine.MersenneTwister();
    cern.jet.random.AbstractDistribution dist=new cern.jet.random.Gamma(alpha,lambda,engine);
    int size=100000;
    cern.colt.list.DoubleArrayList numbers=new cern.colt.list.DoubleArrayList(size);
    for (int i=0; i < size; i++)     numbers.add(dist.nextDouble());
    hep.aida.bin.DynamicBin1D bin=new hep.aida.bin.DynamicBin1D();
    bin.addAllOf(numbers);
    System.out.println(bin);
  }
  /** 
 * Benchmarks all subclasses
 * @param args[0] the number of random numbers to be generated per subclass.
 * @param args[1] <tt>true</tt> prints each generated number, <tt>false</tt> does not print generated numbers (use this setting for benchmarking).
 */
  public static void main(  String args[]){
    int size=Integer.parseInt(args[0]);
    boolean print=new Boolean(args[1]).booleanValue();
    double mean=new Double(args[2]).doubleValue();
    String generatorName=args[3];
    random(size,print,mean,generatorName);
  }
  /** 
 * Benchmarks all subclasses
 * @param size the number of random numbers to be generated per subclass.
 * @param print <tt>true</tt> prints each generated number, <tt>false</tt> does not print generated numbers (use this setting for benchmarking).
 * @param mean the mean for distributions that require a mean.
 */
  public static void random(  int size,  boolean print,  double mean,  String generatorName){
    System.out.println("Generating " + size + " random numbers per distribution...\n");
    int largeVariance=100;
    RandomEngine gen;
    try {
      gen=(RandomEngine)Class.forName(generatorName).newInstance();
    }
 catch (    Exception exc) {
      throw new InternalError(exc.getMessage());
    }
    randomInstance(size,print,new Poisson(mean,(RandomEngine)gen.clone()));
  }
  /** 
 * generates <size> random numbers from <dist>
 */
  public static void randomInstance(  int size,  boolean print,  AbstractDistribution dist){
    System.out.print("\n" + dist + " ...");
    cern.colt.Timer timer=new cern.colt.Timer().start();
    for (int i=size; --i >= 0; ) {
      double rand=dist.nextDouble();
      if (print) {
        if ((size - i - 1) % 8 == 0)         System.out.println();
        System.out.print((float)rand + ", ");
      }
    }
    timer.stop();
    System.out.println("\n" + timer);
  }
  /** 
 * Prints the first <tt>size</tt> random numbers generated by the distribution.
 */
  public static void test(  int size,  AbstractDistribution distribution){
    for (int j=0, i=size; --i >= 0; j++) {
      System.out.print(" " + distribution.nextDouble());
      if (j % 8 == 7)       System.out.println();
    }
    System.out.println("\n\nGood bye.\n");
  }
  /** 
 * Prints the first <tt>size</tt> random numbers generated by the distribution.
 */
  public static void test2(  int size,  AbstractDistribution distribution){
    hep.aida.bin.DynamicBin1D bin=new hep.aida.bin.DynamicBin1D();
    for (int j=0, i=size; --i >= 0; j++) {
      bin.add(distribution.nextDouble());
    }
    System.out.println(bin);
    System.out.println("\n\nGood bye.\n");
  }
  /** 
 * Prints the first <tt>size</tt> random numbers generated by the distribution.
 */
  public static void test2(  int size,  AbstractDistribution a,  AbstractDistribution b){
    hep.aida.bin.DynamicBin1D binA=new hep.aida.bin.DynamicBin1D();
    hep.aida.bin.DynamicBin1D binB=new hep.aida.bin.DynamicBin1D();
    for (int j=0, i=size; --i >= 0; j++) {
      binA.add(a.nextDouble());
      binB.add(b.nextDouble());
    }
    System.out.println("\n\nBenchmarking frequencies...\n");
    IntArrayList freq=new IntArrayList();
    DoubleArrayList distinct=new DoubleArrayList();
    cern.colt.Timer timer=new cern.colt.Timer();
    timer.reset();
    timer.start();
    binA.frequencies(distinct,freq);
    timer.stop().display();
    System.out.println("\n\nGood bye.\n");
  }
}
