<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.list">
        <import package="cern.colt.function.ObjectProcedure"/>
        <class name="ObjectArrayList" line="12">
            <extends class="AbstractList"/>
            <javadoc line="12">
                Resizable list holding &lt;code&gt;Object&lt;/code&gt; elements; implemented with arrays.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.                
            </javadoc>
            <declaration name="elements" type="Object[]" line="17"/>
            <javadoc line="17">
                The array buffer into which the elements of the list are stored.
                  The capacity of the list is the length of this array buffer.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="size" type="int" line="24"/>
            <javadoc line="24">
                The size of the list.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="29">
                Constructs an empty list.                
            </javadoc>
            <method name="ObjectArrayList" type="constructor" line="32"/>
            <javadoc line="35">
                Constructs a list containing the specified elements. 
                  The initial size and capacity of the list is the length of the array.
                  &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                  So if subsequently you modify the specified array directly via the [] operator, be sure you know what you&apos;re doing.                
                <param>
                    elements the array to be backed by the the constructed list                    
                </param>
            </javadoc>
            <method name="ObjectArrayList" type="constructor" line="44">
                <params>
                    <param name="elements" type="Object[]"/>
                </params>
            </method>
            <javadoc line="47">
                Constructs an empty list with the specified initial capacity.                
                <param>
                    initialCapacity   the number of elements the receiver can hold without auto-expanding itself by allocating new internal memory.                    
                </param>
            </javadoc>
            <method name="ObjectArrayList" type="constructor" line="52">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="56">
                Appends the specified element to the end of this list.                
                <param>
                    element element to be appended to this list.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="61">
                <params>
                    <param name="element" type="Object"/>
                </params>
            </method>
            <javadoc line="65">
                Appends the part of the specified list between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive) to the receiver.                
                <param>
                    other the list to be added to the receiver.                    
                </param>
                <param>
                    from the index of the first element to be appended (inclusive).                    
                </param>
                <param>
                    to the index of the last element to be appended (inclusive).                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;other.size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=other.size())&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="addAllOfFromTo" type="void" line="73">
                <params>
                    <param name="other" type="ObjectArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
            </method>
            <javadoc line="76">
                Inserts the specified element before the specified position into the receiver. 
                  Shifts the element currently at that position (if any) and
                  any subsequent elements to the right.                
                <param>
                    index index before which the specified element is to be inserted (must be in [0,size]).                    
                </param>
                <param>
                    element element to be inserted.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;index &amp;lt; 0 || index &amp;gt; size()&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="beforeInsert" type="void" line="85">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="Object"/>
                </params>
                <comment line="87">
                    overridden for performance only.                    
                </comment>
            </method>
            <javadoc line="94">
                Inserts the part of the specified list between &lt;code&gt;otherFrom&lt;/code&gt; (inclusive) and &lt;code&gt;otherTo&lt;/code&gt; (inclusive) before the specified position into the receiver. 
                  Shifts the element currently at that position (if any) and
                  any subsequent elements to the right.                
                <param>
                    index index before which to insert first element from the specified list (must be in [0,size])..                    
                </param>
                <param>
                    other list of which a part is to be inserted into the receiver.                    
                </param>
                <param>
                    from the index of the first element to be inserted (inclusive).                    
                </param>
                <param>
                    to the index of the last element to be inserted (inclusive).                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;other.size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=other.size())&lt;/tt&gt;).                    
                </exception>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;index &amp;lt; 0 || index &amp;gt; size()&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="beforeInsertAllOfFromTo" type="void" line="106">
                <params>
                    <param name="index" type="int"/>
                    <param name="other" type="ObjectArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="length" type="int" line="107"/>
            </method>
            <javadoc line="111">
                Inserts length dummies before the specified position into the receiver. 
                  Shifts the element currently at that position (if any) and
                  any subsequent elements to the right.                
                <param>
                    index index before which to insert dummies (must be in [0,size])..                    
                </param>
                <param>
                    length number of dummies to be inserted.                    
                </param>
            </javadoc>
            <method name="beforeInsertDummies" type="void" line="119">
                <params>
                    <param name="index" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="122"/>
            </method>
            <javadoc line="128">
                Searches the receiver for the specified value using
                  the binary search algorithm. The receiver must be sorted into ascending order
                  according to the &lt;i&gt;natural ordering&lt;/i&gt; of its elements (as by the sort method)
                  prior to making this call.  
                  If it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the receiver contains multiple elements
                  equal to the specified object, there is no guarantee which instance
                  will be found.                
                <param>
                    key the value to be searched for.                    
                </param>
                <return>
                    index of the search key, if it is contained in the receiver;
                      otherwise, &lt;tt&gt;(-(&lt;i&gt;insertion point&lt;/i&gt;) - 1)&lt;/tt&gt;.  The &lt;i&gt;insertion
                      point&lt;/i&gt; is defined as the the point at which the value would
                      be inserted into the receiver: the index of the first
                      element greater than the key, or &lt;tt&gt;receiver.size()&lt;/tt&gt;, if all
                      elements in the receiver are less than the specified key.  Note
                      that this guarantees that the return value will be &amp;gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    Comparable                    
                </see>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearch" type="int" line="150">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="153">
                Searches the receiver for the specified value using
                  the binary search algorithm. The receiver must be sorted into ascending order
                  according to the &lt;i&gt;natural ordering&lt;/i&gt; of its elements (as by the sort method)
                  prior to making this call.  
                  If it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the receiver contains multiple elements
                  equal to the specified object, there is no guarantee which instance
                  will be found.                
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    index of the search key, if it is contained in the receiver;
                      otherwise, &lt;tt&gt;(-(&lt;i&gt;insertion point&lt;/i&gt;) - 1)&lt;/tt&gt;.  The &lt;i&gt;insertion
                      point&lt;/i&gt; is defined as the the point at which the value would
                      be inserted into the receiver: the index of the first
                      element greater than the key, or &lt;tt&gt;receiver.size()&lt;/tt&gt;, if all
                      elements in the receiver are less than the specified key.  Note
                      that this guarantees that the return value will be &amp;gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    Comparable                    
                </see>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="178">
                <params>
                    <param name="key" type="Object"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <comment line="190">
                    key found                    
                </comment>
                <comment line="192">
                    key not found.                    
                </comment>
                <declaration name="low" type="int" line="179"/>
                <declaration name="high" type="int" line="180"/>
                <scope line="182">
                    <declaration name="mid" type="int" line="183"/>
                    <declaration name="midVal" type="Object" line="184"/>
                    <declaration name="cmp" type="int" line="185"/>
                </scope>
            </method>
            <javadoc line="193">
                Searches the receiver for the specified value using
                  the binary search algorithm. The receiver must be sorted into ascending order
                  according to the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  If the receiver is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the receiver contains multiple elements
                  equal to the specified object, there is no guarantee which instance
                  will be found.                
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <param>
                    comparator the comparator by which the receiver is sorted.                    
                </param>
                <throws>
                    ClassCastException if the receiver contains elements that are not
                      &lt;i&gt;mutually comparable&lt;/i&gt; using the specified comparator.                    
                </throws>
                <return>
                    index of the search key, if it is contained in the receiver;
                      otherwise, &lt;tt&gt;(-(&lt;i&gt;insertion point&lt;/i&gt;) - 1)&lt;/tt&gt;.  The &lt;i&gt;insertion
                      point&lt;/i&gt; is defined as the the point at which the value would
                      be inserted into the receiver: the index of the first
                      element greater than the key, or &lt;tt&gt;receiver.size()&lt;/tt&gt;, if all
                      elements in the receiver are less than the specified key.  Note
                      that this guarantees that the return value will be &amp;gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    cern.colt.Sorting                    
                </see>
                <see>
                    java.util.Arrays                    
                </see>
                <see>
                    java.util.Comparator                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="226">
                <params>
                    <param name="key" type="Object"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="comparator" type="java.util.Comparator"/>
                </params>
            </method>
            <javadoc line="229">
                Returns a copy of the receiver such that the copy and the receiver &lt;i&gt;share&lt;/i&gt; the same elements, but do not share the same array to index them;
                  So modifying an object in the copy modifies the object in the receiver and vice versa;
                  However, structurally modifying the copy (for example changing its size, setting other objects at indexes, etc.) does not affect the receiver and vice versa.                
                <return>
                    a copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="236">
                <declaration name="v" type="ObjectArrayList" line="237"/>
            </method>
            <javadoc line="241">
                Returns true if the receiver contains the specified element.
                  Tests for equality or identity as specified by testForEquality.                
                <param>
                    element element to search for.                    
                </param>
                <param>
                    testForEquality if true -&gt; test for equality, otherwise for identity.                    
                </param>
            </javadoc>
            <method name="contains" type="boolean" line="248">
                <params>
                    <param name="elem" type="Object"/>
                    <param name="testForEquality" type="boolean"/>
                </params>
            </method>
            <javadoc line="251">
                Returns a copy of the receiver; call &lt;code&gt;clone()&lt;/code&gt; and casts the result.
                  Returns a copy such that the copy and the receiver &lt;i&gt;share&lt;/i&gt; the same elements, but do not share the same array to index them;
                  So modifying an object in the copy modifies the object in the receiver and vice versa;
                  However, structurally modifying the copy (for example changing its size, setting other objects at indexes, etc.) does not affect the receiver and vice versa.                
                <return>
                    a copy of the receiver.                    
                </return>
            </javadoc>
            <method name="copy" type="ObjectArrayList" line="259"/>
            <javadoc line="262">
                Deletes the first element from the receiver that matches the specified element.
                  Does nothing, if no such matching element is contained.
                  Tests elements for equality or identity as specified by &lt;tt&gt;testForEquality&lt;/tt&gt;.
                  When testing for equality, two elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; are &lt;i&gt;equal&lt;/i&gt; if &lt;tt&gt;(e1==null ? e2==null :
                  e1.equals(e2))&lt;/tt&gt;.)                
                <param>
                    testForEquality if true -&gt; tests for equality, otherwise for identity.                    
                </param>
                <param>
                    element the element to be deleted.                    
                </param>
            </javadoc>
            <method name="delete" type="void" line="274">
                <params>
                    <param name="element" type="Object"/>
                    <param name="testForEquality" type="boolean"/>
                </params>
                <declaration name="index" type="int" line="275"/>
            </method>
            <javadoc line="278">
                Returns the elements currently stored, including invalid elements between size and capacity, if any.
                  &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                  So if subsequently you modify the returned array directly via the [] operator, be sure you know what you&apos;re doing.                
                <return>
                    the elements currently stored.                    
                </return>
            </javadoc>
            <method name="elements" type="Object[]" line="286"/>
            <javadoc line="289">
                Sets the receiver&apos;s elements to be the specified array (not a copy of it).
                  The size and capacity of the list is the length of the array.
                  &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                  So if subsequently you modify the specified array directly via the [] operator, be sure you know what you&apos;re doing.                
                <param>
                    elements the new elements to be stored.                    
                </param>
                <return>
                    the receiver itself.                    
                </return>
            </javadoc>
            <method name="elements" type="ObjectArrayList" line="299">
                <params>
                    <param name="elements" type="Object[]"/>
                </params>
            </method>
            <javadoc line="304">
                Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
                  If necessary, allocates new internal memory and increases the capacity of the receiver.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="310">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="313">
                Compares the specified Object with the receiver for equality.
                  Returns true if and only if the specified Object is also an ObjectArrayList, both lists have the
                  same size, and all corresponding pairs of elements in the two lists are equal.
                  In other words, two lists are defined to be equal if they contain the
                  same elements in the same order.
                  Two elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; are &lt;i&gt;equal&lt;/i&gt; if &lt;tt&gt;(e1==null ? e2==null :
                  e1.equals(e2))&lt;/tt&gt;.)                
                <param>
                    otherObj the Object to be compared for equality with the receiver.                    
                </param>
                <return>
                    true if the specified Object is equal to the receiver.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="326">
                <params>
                    <param name="otherObj" type="Object"/>
                </params>
                <comment line="327">
                    delta                    
                </comment>
            </method>
            <javadoc line="329">
                Compares the specified Object with the receiver for equality.
                  Returns true if and only if the specified Object is also an ObjectArrayList, both lists have the
                  same size, and all corresponding pairs of elements in the two lists are the same.
                  In other words, two lists are defined to be equal if they contain the
                  same elements in the same order.
                  Tests elements for equality or identity as specified by &lt;tt&gt;testForEquality&lt;/tt&gt;.
                  When testing for equality, two elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; are &lt;i&gt;equal&lt;/i&gt; if &lt;tt&gt;(e1==null ? e2==null :
                  e1.equals(e2))&lt;/tt&gt;.)                
                <param>
                    otherObj the Object to be compared for equality with the receiver.                    
                </param>
                <param>
                    testForEquality if true -&gt; tests for equality, otherwise for identity.                    
                </param>
                <return>
                    true if the specified Object is equal to the receiver.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="344">
                <params>
                    <param name="otherObj" type="Object"/>
                    <param name="testForEquality" type="boolean"/>
                </params>
                <comment line="345">
                    delta                    
                </comment>
                <scope line="345"/>
                <declaration name="other" type="ObjectArrayList" line="348"/>
                <declaration name="otherElements" type="Object[]" line="352"/>
                <declaration name="theElements" type="Object[]" line="353"/>
                <scope line="354">
                    <scope line="355"/>
                </scope>
                <scope line="359">
                    <scope line="360"/>
                </scope>
            </method>
            <javadoc line="368">
                Sets the specified range of elements in the specified array to the specified value.                
                <param>
                    from the index of the first element (inclusive) to be filled with the specified value.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be filled with the specified value.                    
                </param>
                <param>
                    val the value to be stored in the specified elements of the receiver.                    
                </param>
            </javadoc>
            <method name="fillFromToWith" type="void" line="375">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="val" type="Object"/>
                </params>
            </method>
            <javadoc line="379">
                Applies a procedure to each element of the receiver, if any.
                  Starts at index 0, moving rightwards.                
                <param>
                    procedure    the procedure to be applied. Stops iteration if the procedure returns &lt;tt&gt;false&lt;/tt&gt;, otherwise continues.                    
                </param>
                <return>
                    &lt;tt&gt;false&lt;/tt&gt; if the procedure stopped before all elements where iterated over, &lt;tt&gt;true&lt;/tt&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="forEach" type="boolean" line="385">
                <params>
                    <param name="procedure" type="ObjectProcedure"/>
                </params>
                <declaration name="theElements" type="Object[]" line="386"/>
                <declaration name="theSize" type="int" line="387"/>
            </method>
            <javadoc line="392">
                Returns the element at the specified position in the receiver.                
                <param>
                    index index of element to return.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (index &amp;lt; 0 || index &amp;gt;= size()).                    
                </exception>
            </javadoc>
            <method name="get" type="Object" line="398">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="403">
                Returns the element at the specified position in the receiver; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
                  Provided with invalid parameters this method may return invalid elements without throwing any exception!
                  &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <param>
                    index index of element to return.                    
                </param>
            </javadoc>
            <method name="getQuick" type="Object" line="411">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="414">
                Returns the index of the first occurrence of the specified
                  element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                  Tests for equality or identity as specified by testForEquality.                
                <param>
                    testForEquality if &lt;code&gt;true&lt;/code&gt; -&gt; test for equality, otherwise for identity.                    
                </param>
                <return>
                    the index of the first occurrence of the element in the receiver; returns &lt;code&gt;-1&lt;/code&gt; if the element is not found.                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="423">
                <params>
                    <param name="element" type="Object"/>
                    <param name="testForEquality" type="boolean"/>
                </params>
            </method>
            <javadoc line="426">
                Returns the index of the first occurrence of the specified
                  element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                  Searches between &lt;code&gt;from&lt;/code&gt;, inclusive and &lt;code&gt;to&lt;/code&gt;, inclusive.
                  Tests for equality or identity as specified by &lt;code&gt;testForEquality&lt;/code&gt;.                
                <param>
                    element element to search for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <param>
                    testForEquality if &lt;/code&gt;true&lt;/code&gt; -&gt; test for equality, otherwise for identity.                    
                </param>
                <return>
                    the index of the first occurrence of the element in the receiver; returns &lt;code&gt;-1&lt;/code&gt; if the element is not found.                    
                </return>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=size())&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="indexOfFromTo" type="int" line="440">
                <params>
                    <param name="element" type="Object"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="testForEquality" type="boolean"/>
                </params>
                <comment line="448">
                    found                    
                </comment>
                <comment line="454">
                    found                    
                </comment>
                <comment line="457">
                    not found                    
                </comment>
                <declaration name="theElements" type="Object[]" line="444"/>
                <scope line="445">
                    <scope line="446">
                        <scope line="447"/>
                    </scope>
                </scope>
                <scope line="451">
                    <scope line="452">
                        <scope line="453"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="458">
                Determines whether the receiver is sorted ascending, according to the &lt;i&gt;natural ordering&lt;/i&gt; of its
                  elements.  All elements in this range must implement the
                  &lt;tt&gt;Comparable&lt;/tt&gt; interface.  Furthermore, all elements in this range
                  must be &lt;i&gt;mutually comparable&lt;/i&gt; (that is, &lt;tt&gt;e1.compareTo(e2)&lt;/tt&gt;
                  must not throw a &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements
                  &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; in the array).&lt;p&gt;                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the receiver is sorted ascending, &lt;tt&gt;false&lt;/tt&gt; otherwise.                    
                </return>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=size())&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="isSortedFromTo" type="boolean" line="471">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="theElements" type="Object[]" line="475"/>
                <scope line="476"/>
            </method>
            <javadoc line="481">
                Returns the index of the last occurrence of the specified
                  element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                  Tests for equality or identity as specified by &lt;code&gt;testForEquality&lt;/code&gt;.                
                <param>
                    element   the element to be searched for.                    
                </param>
                <param>
                    testForEquality if &lt;code&gt;true&lt;/code&gt; -&gt; test for equality, otherwise for identity.                    
                </param>
                <return>
                    the index of the last occurrence of the element in the receiver; returns &lt;code&gt;-1&lt;/code&gt; if the element is not found.                    
                </return>
            </javadoc>
            <method name="lastIndexOf" type="int" line="490">
                <params>
                    <param name="element" type="Object"/>
                    <param name="testForEquality" type="boolean"/>
                </params>
            </method>
            <javadoc line="493">
                Returns the index of the last occurrence of the specified
                  element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                  Searches beginning at &lt;code&gt;to&lt;/code&gt;, inclusive until &lt;code&gt;from&lt;/code&gt;, inclusive.
                  Tests for equality or identity as specified by &lt;code&gt;testForEquality&lt;/code&gt;.                
                <param>
                    element element to search for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <param>
                    testForEquality if &lt;code&gt;true&lt;/code&gt; -&gt; test for equality, otherwise for identity.                    
                </param>
                <return>
                    the index of the last occurrence of the element in the receiver; returns &lt;code&gt;-1&lt;/code&gt; if the element is not found.                    
                </return>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=size())&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="lastIndexOfFromTo" type="int" line="506">
                <params>
                    <param name="element" type="Object"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="testForEquality" type="boolean"/>
                </params>
                <comment line="514">
                    found                    
                </comment>
                <comment line="520">
                    found                    
                </comment>
                <comment line="523">
                    not found                    
                </comment>
                <declaration name="theElements" type="Object[]" line="510"/>
                <scope line="511">
                    <scope line="512">
                        <scope line="513"/>
                    </scope>
                </scope>
                <scope line="517">
                    <scope line="518">
                        <scope line="519"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="524">
                Sorts the specified range of the receiver into
                  ascending order, according to the &lt;i&gt;natural ordering&lt;/i&gt; of its
                  elements.  All elements in this range must implement the
                  &lt;tt&gt;Comparable&lt;/tt&gt; interface.  Furthermore, all elements in this range
                  must be &lt;i&gt;mutually comparable&lt;/i&gt; (that is, &lt;tt&gt;e1.compareTo(e2)&lt;/tt&gt;
                  must not throw a &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements
                  &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; in the array).&lt;p&gt;
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.
                  &lt;p&gt;&lt;b&gt;You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set.&lt;/b&gt;
                  It is generally better to call &lt;tt&gt;sort()&lt;/tt&gt; or &lt;tt&gt;sortFromTo(...)&lt;/tt&gt; instead, because those methods automatically choose the best sorting algorithm.                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=size())&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="mergeSortFromTo" type="void" line="549">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
            </method>
            <javadoc line="554">
                Sorts the receiver according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    from the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the receiver.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      &lt;i&gt;mutually comparable&lt;/i&gt; using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;fromIndex &amp;gt; toIndex&lt;/tt&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;tt&gt;fromIndex &amp;lt; 0&lt;/tt&gt; or
                      &lt;tt&gt;toIndex &amp;gt; a.length&lt;/tt&gt;                    
                </throws>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=size())&lt;/tt&gt;).                    
                </exception>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="mergeSortFromTo" type="void" line="583">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="c" type="java.util.Comparator"/>
                </params>
            </method>
            <javadoc line="588">
                Returns a new list of the part of the receiver between &lt;code&gt;from&lt;/code&gt;, inclusive, and &lt;code&gt;to&lt;/code&gt;, inclusive.                
                <param>
                    from the index of the first element (inclusive).                    
                </param>
                <param>
                    to the index of the last element (inclusive).                    
                </param>
                <return>
                    a new list                    
                </return>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=size())&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="partFromTo" type="ObjectArrayList" line="595">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="part" type="Object[]" line="600"/>
            </method>
            <javadoc line="604">
                Sorts the specified range of the receiver into
                  ascending order, according to the &lt;i&gt;natural ordering&lt;/i&gt; of its
                  elements.  All elements in this range must implement the
                  &lt;tt&gt;Comparable&lt;/tt&gt; interface.  Furthermore, all elements in this range
                  must be &lt;i&gt;mutually comparable&lt;/i&gt; (that is, &lt;tt&gt;e1.compareTo(e2)&lt;/tt&gt;
                  must not throw a &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements
                  &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; in the array).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.
                  &lt;p&gt;&lt;b&gt;You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set.&lt;/b&gt;
                  It is generally better to call &lt;tt&gt;sort()&lt;/tt&gt; or &lt;tt&gt;sortFromTo(...)&lt;/tt&gt; instead, because those methods automatically choose the best sorting algorithm.                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=size())&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="quickSortFromTo" type="void" line="627">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
            </method>
            <javadoc line="632">
                Sorts the receiver according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the receiver.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      &lt;i&gt;mutually comparable&lt;/i&gt; using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;fromIndex &amp;gt; toIndex&lt;/tt&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;tt&gt;fromIndex &amp;lt; 0&lt;/tt&gt; or
                      &lt;tt&gt;toIndex &amp;gt; a.length&lt;/tt&gt;                    
                </throws>
                <see>
                    Comparator                    
                </see>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=size())&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="quickSortFromTo" type="void" line="658">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="c" type="java.util.Comparator"/>
                </params>
            </method>
            <javadoc line="663">
                Removes from the receiver all elements that are contained in the specified list.
                  Tests for equality or identity as specified by &lt;code&gt;testForEquality&lt;/code&gt;.                
                <param>
                    other the other list.                    
                </param>
                <param>
                    testForEquality if &lt;code&gt;true&lt;/code&gt; -&gt; test for equality, otherwise for identity.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the receiver changed as a result of the call.                    
                </return>
            </javadoc>
            <method name="removeAll" type="boolean" line="671">
                <params>
                    <param name="other" type="ObjectArrayList"/>
                    <param name="testForEquality" type="boolean"/>
                </params>
                <comment line="673">
                    nothing to do                    
                </comment>
                <declaration name="limit" type="int" line="673"/>
                <declaration name="j" type="int" line="674"/>
                <declaration name="theElements" type="Object[]" line="675"/>
                <scope line="676"/>
                <declaration name="modified" type="boolean" line="680"/>
            </method>
            <javadoc line="684">
                Removes from the receiver all elements whose index is between
                  &lt;code&gt;from&lt;/code&gt;, inclusive and &lt;code&gt;to&lt;/code&gt;, inclusive.  Shifts any succeeding
                  elements to the left (reduces their index).
                  This call shortens the list by &lt;tt&gt;(to - from + 1)&lt;/tt&gt; elements.                
                <param>
                    from index of first element to be removed.                    
                </param>
                <param>
                    to index of last element to be removed.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=size())&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="removeFromTo" type="void" line="694">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <comment line="700">
                    delta                    
                </comment>
                <declaration name="numMoved" type="int" line="696"/>
                <scope line="697"/>
                <declaration name="width" type="int" line="701"/>
            </method>
            <javadoc line="704">
                Replaces a number of elements in the receiver with the same number of elements of another list.
                  Replaces elements in the receiver, between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive),
                  with elements of &lt;code&gt;other&lt;/code&gt;, starting from &lt;code&gt;otherFrom&lt;/code&gt; (inclusive).                
                <param>
                    from the position of the first element to be replaced in the receiver                    
                </param>
                <param>
                    to the position of the last element to be replaced in the receiver                    
                </param>
                <param>
                    other list holding elements to be copied into the receiver.                    
                </param>
                <param>
                    otherFrom position of first element within other list to be copied.                    
                </param>
            </javadoc>
            <method name="replaceFromToWithFrom" type="void" line="714">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="other" type="ObjectArrayList"/>
                    <param name="otherFrom" type="int"/>
                </params>
                <declaration name="length" type="int" line="715"/>
                <scope line="716"/>
            </method>
            <javadoc line="722">
                Replaces the part between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive) with the other list&apos;s
                  part between &lt;code&gt;otherFrom&lt;/code&gt; and &lt;code&gt;otherTo&lt;/code&gt;. 
                  Powerful (and tricky) method!
                  Both parts need not be of the same size (part A can both be smaller or larger than part B).
                  Parts may overlap.
                  Receiver and other list may (but most not) be identical.
                  If &lt;code&gt;from &amp;gt; to&lt;/code&gt;, then inserts other part before &lt;code&gt;from&lt;/code&gt;.                
                <param>
                    from the first element of the receiver (inclusive)                    
                </param>
                <param>
                    to the last element of the receiver (inclusive)                    
                </param>
                <param>
                    other the other list (may be identical with receiver)                    
                </param>
                <param>
                    otherFrom the first element of the other list (inclusive)                    
                </param>
                <param>
                    otherTo the last element of the other list (inclusive)
                      &lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;pre&gt;
                      a=[0, 1, 2, 3, 4, 5, 6, 7]
                      b=[50, 60, 70, 80, 90]
                      a.R(...)=a.replaceFromToWithFromTo(...)
                      a.R(3,5,b,0,4)--&gt;[0, 1, 2, 50, 60, 70, 80, 90, 6, 7]
                      a.R(1,6,b,0,4)--&gt;[0, 50, 60, 70, 80, 90, 7]
                      a.R(0,6,b,0,4)--&gt;[50, 60, 70, 80, 90, 7]
                      a.R(3,5,b,1,2)--&gt;[0, 1, 2, 60, 70, 6, 7]
                      a.R(1,6,b,1,2)--&gt;[0, 60, 70, 7]
                      a.R(0,6,b,1,2)--&gt;[60, 70, 7]
                      a.R(5,3,b,0,4)--&gt;[0, 1, 2, 3, 4, 50, 60, 70, 80, 90, 5, 6, 7]
                      a.R(5,0,b,0,4)--&gt;[0, 1, 2, 3, 4, 50, 60, 70, 80, 90, 5, 6, 7]
                      a.R(5,3,b,1,2)--&gt;[0, 1, 2, 3, 4, 60, 70, 5, 6, 7]
                      a.R(5,0,b,1,2)--&gt;[0, 1, 2, 3, 4, 60, 70, 5, 6, 7]
                      Extreme cases:
                      a.R(5,3,b,0,0)--&gt;[0, 1, 2, 3, 4, 50, 5, 6, 7]
                      a.R(5,3,b,4,4)--&gt;[0, 1, 2, 3, 4, 90, 5, 6, 7]
                      a.R(3,5,a,0,1)--&gt;[0, 1, 2, 0, 1, 6, 7]
                      a.R(3,5,a,3,5)--&gt;[0, 1, 2, 3, 4, 5, 6, 7]
                      a.R(3,5,a,4,4)--&gt;[0, 1, 2, 4, 6, 7]
                      a.R(5,3,a,0,4)--&gt;[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7]
                      a.R(0,-1,b,0,4)--&gt;[50, 60, 70, 80, 90, 0, 1, 2, 3, 4, 5, 6, 7]
                      a.R(0,-1,a,0,4)--&gt;[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7]
                      a.R(8,0,a,0,4)--&gt;[0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4]
                      &lt;/pre&gt;                    
                </param>
            </javadoc>
            <method name="replaceFromToWithFromTo" type="void" line="765">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="other" type="ObjectArrayList"/>
                    <param name="otherFrom" type="int"/>
                    <param name="otherTo" type="int"/>
                </params>
                <comment line="770">
                    avoid stumbling over my own feet                    
                </comment>
                <comment line="779">
                    System.out.println(&quot;from=&quot;+from);
                    System.out.println(&quot;to=&quot;+to);
                    System.out.println(&quot;diff=&quot;+diff);                    
                </comment>
                <scope line="766"/>
                <scope line="769"/>
                <declaration name="length" type="int" line="774"/>
                <declaration name="diff" type="int" line="775"/>
                <declaration name="theLast" type="int" line="776"/>
                <scope line="782"/>
                <scope line="787"/>
                <scope line="790">
                    <scope line="791"/>
                </scope>
                <scope line="796"/>
            </method>
            <javadoc line="800">
                Replaces the part of the receiver starting at &lt;code&gt;from&lt;/code&gt; (inclusive) with all the elements of the specified collection.
                  Does not alter the size of the receiver.
                  Replaces exactly &lt;tt&gt;Math.max(0,Math.min(size()-from, other.size()))&lt;/tt&gt; elements.                
                <param>
                    from the index at which to copy the first element from the specified collection.                    
                </param>
                <param>
                    other Collection to replace part of the receiver                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (index &amp;lt; 0 || index &amp;gt;= size()).                    
                </exception>
            </javadoc>
            <method name="replaceFromWith" type="void" line="809">
                <params>
                    <param name="from" type="int"/>
                    <param name="other" type="java.util.Collection"/>
                </params>
                <comment line="816">
                    delta                    
                </comment>
                <declaration name="e" type="java.util.Iterator" line="811"/>
                <declaration name="index" type="int" line="812"/>
                <declaration name="limit" type="int" line="813"/>
            </method>
            <javadoc line="817">
                Retains (keeps) only the elements in the receiver that are contained in the specified other list.
                  In other words, removes from the receiver all of its elements that are not contained in the
                  specified other list. 
                  Tests for equality or identity as specified by &lt;code&gt;testForEquality&lt;/code&gt;.                
                <param>
                    other the other list to test against.                    
                </param>
                <param>
                    testForEquality if &lt;code&gt;true&lt;/code&gt; -&gt; test for equality, otherwise for identity.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the receiver changed as a result of the call.                    
                </return>
            </javadoc>
            <method name="retainAll" type="boolean" line="826">
                <params>
                    <param name="other" type="ObjectArrayList"/>
                    <param name="testForEquality" type="boolean"/>
                </params>
                <scope line="827"/>
                <declaration name="limit" type="int" line="833"/>
                <declaration name="j" type="int" line="834"/>
                <declaration name="theElements" type="Object[]" line="835"/>
                <scope line="837"/>
                <declaration name="modified" type="boolean" line="841"/>
            </method>
            <javadoc line="845">
                Reverses the elements of the receiver.
                  Last becomes first, second last becomes second first, and so on.                
            </javadoc>
            <method name="reverse" type="void" line="849">
                <comment line="856">
                    swap                    
                </comment>
                <declaration name="tmp" type="Object" line="850"/>
                <declaration name="limit" type="int" line="851"/>
                <declaration name="j" type="int" line="852"/>
                <declaration name="theElements" type="Object[]" line="854"/>
                <scope line="855"/>
            </method>
            <javadoc line="861">
                Replaces the element at the specified position in the receiver with the specified element.                
                <param>
                    index index of element to replace.                    
                </param>
                <param>
                    element element to be stored at the specified position.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (index
                      &amp;lt; 0 || index &amp;gt;= size()).                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="869">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="Object"/>
                </params>
            </method>
            <javadoc line="874">
                Replaces the element at the specified position in the receiver with the specified element; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions.
                  Provided with invalid parameters this method may access invalid indexes without throwing any exception!
                  &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <param>
                    index index of element to replace.                    
                </param>
                <param>
                    element element to be stored at the specified position.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="883">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="Object"/>
                </params>
            </method>
            <javadoc line="886">
                Randomly permutes the part of the receiver between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive).                
                <param>
                    from the index of the first element (inclusive) to be permuted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be permuted.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (&lt;tt&gt;size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=size())&lt;/tt&gt;).                    
                </exception>
            </javadoc>
            <method name="shuffleFromTo" type="void" line="892">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <comment line="904">
                    swap(i, random)                    
                </comment>
                <declaration name="gen" type="cern.jet.random.Uniform" line="896"/>
                <declaration name="tmpElement" type="Object" line="897"/>
                <declaration name="theElements" type="Object[]" line="898"/>
                <declaration name="random" type="int" line="899"/>
                <scope line="900"/>
            </method>
            <javadoc line="909">
                Returns the number of elements contained in the receiver.                
                <returns>
                    the number of elements contained in the receiver.                    
                </returns>
            </javadoc>
            <method name="size" type="int" line="914"/>
            <javadoc line="917">
                Returns a list which is a concatenation of &lt;code&gt;times&lt;/code&gt; times the receiver.                
                <param>
                    times the number of times the receiver shall be copied.                    
                </param>
            </javadoc>
            <method name="times" type="ObjectArrayList" line="921">
                <params>
                    <param name="times" type="int"/>
                </params>
                <declaration name="newList" type="ObjectArrayList" line="922"/>
                <scope line="923"/>
            </method>
            <javadoc line="928">
                Returns an array containing all of the elements in the receiver in the
                  correct order.  The runtime type of the returned array is that of the
                  specified array.  If the receiver fits in the specified array, it is
                  returned therein.  Otherwise, a new array is allocated with the runtime
                  type of the specified array and the size of the receiver.
                  &lt;p&gt;
                  If the receiver fits in the specified array with room to spare
                  (i.e., the array has more elements than the receiver),
                  the element in the array immediately following the end of the
                  receiver is set to null.  This is useful in determining the length
                  of the receiver &lt;em&gt;only&lt;/em&gt; if the caller knows that the receiver
                  does not contain any null elements.                
                <param>
                    array the array into which the elements of the receiver are to
                      be stored, if it is big enough; otherwise, a new array of the
                      same runtime type is allocated for this purpose.                    
                </param>
                <return>
                    an array containing the elements of the receiver.                    
                </return>
                <exception>
                    ArrayStoreException the runtime type of &lt;tt&gt;array&lt;/tt&gt; is not a supertype
                      of the runtime type of every element in the receiver.                    
                </exception>
            </javadoc>
            <method name="toArray" type="Object[]" line="949">
                <params>
                    <param name="array" type="Object"/>
                </params>
                <declaration name="theElements" type="Object[]" line="953"/>
            </method>
            <javadoc line="960">
                Returns a &lt;code&gt;java.util.ArrayList&lt;/code&gt; containing all the elements in the receiver.                
            </javadoc>
            <method name="toList" type="java.util.ArrayList" line="963">
                <declaration name="mySize" type="int" line="964"/>
                <declaration name="theElements" type="Object[]" line="965"/>
                <declaration name="list" type="java.util.ArrayList" line="966"/>
            </method>
            <javadoc line="970">
                Returns a string representation of the receiver, containing
                  the String representation of each element.                
            </javadoc>
            <method name="toString" type="String" line="974"/>
            <javadoc line="977">
                Trims the capacity of the receiver to be the receiver&apos;s current 
                  size. Releases any superfluos internal memory. An application can use this operation to minimize the 
                  storage of the receiver.                
            </javadoc>
            <method name="trimToSize" type="void" line="982"/>
        </class>
    </source>