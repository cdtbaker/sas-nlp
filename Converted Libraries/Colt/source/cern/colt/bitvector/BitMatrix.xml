<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.bitvector">
        <import package="java.awt.Rectangle"/>
        <class name="BitMatrix" line="12">
            <extends class="cern.colt.PersistentObject"/>
            <comment line="42">
                The bits of this matrix.
                 bits are stored in row major, i.e.
                 bitIndex==rowcolumns + column
                 columnOf(bitIndex)==bitIndex%columns
                 rowOf(bitIndex)==bitIndexcolumns                
            </comment>
            <javadoc line="12">
                Fixed sized (non resizable) nm bit matrix.
                  A bit matrix has a number of columns and rows, which are assigned upon instance construction - The matrix&apos;s size is then &lt;tt&gt;columns()rows()&lt;/tt&gt;.
                  Bits are accessed via &lt;tt&gt;(column,row)&lt;/tt&gt; coordinates.
                  &lt;p&gt;
                  Individual bits can be examined, set, or cleared.
                  Rectangular parts (boxes) can quickly be extracted, copied and replaced.
                  Quick iteration over boxes is provided by optimized internal iterators (&lt;tt&gt;forEach()&lt;/tt&gt; methods).
                  One &lt;code&gt;BitMatrix&lt;/code&gt; may be used to modify the contents of another 
                  &lt;code&gt;BitMatrix&lt;/code&gt; through logical AND, OR, XOR and other similar operations.
                  &lt;p&gt;
                  Legal coordinates range from &lt;tt&gt;[0,0]&lt;/tt&gt; to &lt;tt&gt;[columns()-1,rows()-1]&lt;/tt&gt;.
                  Any attempt to access a bit at a coordinate &lt;tt&gt;column&amp;lt;0 || column&amp;gt;=columns() || row&amp;lt;0 || row&amp;gt;=rows()&lt;/tt&gt; will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.
                  Operations involving two bit matrices (like AND, OR, XOR, etc.) will throw an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; if both bit matrices do not have the same number of columns and rows.
                  &lt;p&gt;
                  If you need extremely quick access to individual bits: Although getting and setting individual bits with methods &lt;tt&gt;get(...)&lt;/tt&gt; and &lt;tt&gt;put(...)&lt;/tt&gt; is quick, it is even quicker (&lt;b&gt;but not safe&lt;/b&gt;) to use &lt;tt&gt;getQuick(...)&lt;/tt&gt; and &lt;tt&gt;putQuick(...)&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt; that this implementation is not synchronized.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    BitVector                    
                </see>
                <see>
                    QuickBitVector                    
                </see>
                <see>
                    java.util.BitSet                    
                </see>
            </javadoc>
            <declaration name="columns" type="int" line="38"/>
            <declaration name="rows" type="int" line="39"/>
            <declaration name="bits" type="long" line="48"/>
            <javadoc line="49">
                Constructs a bit matrix with a given number of columns and rows. All bits are initially &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;columns &amp;lt; 0 || rows &amp;lt; 0&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="BitMatrix" type="constructor" line="55">
                <params>
                    <param name="columns" type="int"/>
                    <param name="rows" type="int"/>
                </params>
            </method>
            <javadoc line="58">
                Performs a logical &lt;b&gt;AND&lt;/b&gt; of the receiver with another bit matrix.
                  The receiver is modified so that a bit in it has the
                  value &lt;code&gt;true&lt;/code&gt; if and only if it already had the 
                  value &lt;code&gt;true&lt;/code&gt; and the corresponding bit in the other bit matrix
                  argument has the value &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    other   a bit matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;columns() != other.columns() || rows() != other.rows()&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="and" type="void" line="68">
                <params>
                    <param name="other" type="BitMatrix"/>
                </params>
            </method>
            <javadoc line="72">
                Clears all of the bits in receiver whose corresponding
                  bit is set in the other bit matrix.
                  In other words, determines the difference (A\B) between two bit matrices.                
                <param>
                    other   a bit matrix with which to mask the receiver.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;columns() != other.columns() || rows() != other.rows()&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="andNot" type="void" line="80">
                <params>
                    <param name="other" type="BitMatrix"/>
                </params>
            </method>
            <javadoc line="84">
                Returns the number of bits currently in the &lt;tt&gt;true&lt;/tt&gt; state.
                  Optimized for speed. Particularly quick if the receiver is either sparse or dense.                
            </javadoc>
            <method name="cardinality" type="int" line="88"/>
            <javadoc line="91">
                Sanity check for operations requiring matrices with the same number of columns and rows.                
            </javadoc>
            <method name="checkDimensionCompatibility" type="void" line="94">
                <params>
                    <param name="other" type="BitMatrix"/>
                </params>
            </method>
            <javadoc line="97">
                Clears all bits of the receiver.                
            </javadoc>
            <method name="clear" type="void" line="100"/>
            <javadoc line="103">
                Cloning this &lt;code&gt;BitMatrix&lt;/code&gt; produces a new &lt;code&gt;BitMatrix&lt;/code&gt; 
                  that is equal to it.
                  The clone of the bit matrix is another bit matrix that has exactly the 
                  same bits set to &lt;code&gt;true&lt;/code&gt; as this bit matrix and the same 
                  number of columns and rows.                
                <return>
                    a clone of this bit matrix.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="112">
                <declaration name="clone" type="BitMatrix" line="113"/>
            </method>
            <javadoc line="117">
                Returns the number of columns of the receiver.                
            </javadoc>
            <method name="columns" type="int" line="120"/>
            <javadoc line="123">
                Checks whether the receiver contains the given box.                
            </javadoc>
            <method name="containsBox" type="void" line="126">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="129">
                Returns a shallow clone of the receiver; calls &lt;code&gt;clone()&lt;/code&gt; and casts the result.                
                <return>
                    a shallow clone of the receiver.                    
                </return>
            </javadoc>
            <method name="copy" type="BitMatrix" line="134"/>
            <method name="elements" type="long[]" line="137"/>
            <javadoc line="140">
                You normally need not use this method. Use this method only if performance is critical. 
                  Sets the bit matrix&apos;s backing bits, columns and rows.
                  &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                  So if subsequently you modify the specified array directly via the [] operator, be sure you know what you&apos;re doing.                
                <throws>
                    IllegalArgumentException if &lt;tt&gt;columns &amp;lt; 0 || rows &amp;lt; 0 || columnsrows &amp;gt; bits.length64&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="elements" type="void" line="147">
                <params>
                    <param name="bits" type="long[]"/>
                    <param name="columns" type="int"/>
                    <param name="rows" type="int"/>
                </params>
            </method>
            <javadoc line="153">
                Compares this object against the specified object.
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is 
                  not &lt;code&gt;null&lt;/code&gt; and is a &lt;code&gt;BitMatrix&lt;/code&gt; object
                  that has the same number of columns and rows as the receiver and 
                  that has exactly the same bits set to &lt;code&gt;true&lt;/code&gt; as the receiver.                
                <param>
                    obj   the object to compare with.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the objects are the same;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="163">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="other" type="BitMatrix" line="169"/>
            </method>
            <javadoc line="174">
                Applies a procedure to each coordinate that holds a bit in the given state.
                  Iterates rowwise downwards from [columns()-1,rows()-1] to [0,0].
                  Useful, for example, if you want to copy bits into an image or somewhere else.
                  Optimized for speed. Particularly quick if one of the following conditions holds
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;state==true&lt;/tt&gt; and the receiver is sparse (&lt;tt&gt;cardinality()&lt;/tt&gt; is small compared to &lt;tt&gt;size()&lt;/tt&gt;).
                  &lt;li&gt;&lt;tt&gt;state==false&lt;/tt&gt; and the receiver is dense (&lt;tt&gt;cardinality()&lt;/tt&gt; is large compared to &lt;tt&gt;size()&lt;/tt&gt;).
                  &lt;/ul&gt;                
                <param>
                    state element to search for.                    
                </param>
                <param>
                    procedure a procedure object taking as first argument the current column and as second argument the current row. Stops iteration if the procedure returns &lt;tt&gt;false&lt;/tt&gt;, otherwise continues.                    
                </param>
                <return>
                    &lt;tt&gt;false&lt;/tt&gt; if the procedure stopped before all elements where iterated over, &lt;tt&gt;true&lt;/tt&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="forEachCoordinateInState" type="boolean" line="188">
                <params>
                    <param name="state" type="boolean"/>
                    <param name="procedure" type="cern.colt.function.IntIntProcedure"/>
                </params>
                <comment line="190">
                    this is equivalent to the low level version below, apart from that it iterates in the reverse oder and is slower.
                    if (size()==0) return true;
                    BitVector vector = toBitVector();
                    return vector.forEachIndexFromToInState(0,size()-1,state,
                    new cern.colt.function.IntFunction() {
                    public boolean apply(int index) {
                    return function.apply(index%columns, indexcolumns);
                    }
                    }
                    );                    
                </comment>
                <comment line="203">
                    low level implementation for speed.                    
                </comment>
                <comment line="212">
                    for each coordinate of bits of partial unit                    
                </comment>
                <comment line="226">
                    for each coordinate of bits of full units                    
                </comment>
                <comment line="230">
                    all 64 bits set                    
                </comment>
                <comment line="235">
                    at least one element within current unit matches.
                     iterate over all bits within current unit.                    
                </comment>
                <comment line="248">
                    unrolled comparison for speed.                    
                </comment>
                <comment line="261">
                    no element within current unit matches --&gt; skip unit                    
                </comment>
                <comment line="264">
                    avoid implementation with *, /, %                    
                </comment>
                <declaration name="vector" type="BitVector" line="204"/>
                <declaration name="theBits" type="long[]" line="206"/>
                <declaration name="column" type="int" line="208"/>
                <declaration name="row" type="int" line="209"/>
                <declaration name="val" type="long" line="212"/>
                <scope line="213">
                    <declaration name="mask" type="long" line="214"/>
                    <scope line="215"/>
                    <scope line="218"/>
                </scope>
                <declaration name="bitsPerUnit" type="int" line="226"/>
                <declaration name="comparator" type="long" line="227"/>
                <scope line="231">
                    <scope line="233">
                        <scope line="236">
                            <scope line="237">
                                <scope line="238"/>
                                <scope line="241"/>
                            </scope>
                        </scope>
                        <scope line="247">
                            <scope line="248">
                                <scope line="249"/>
                                <scope line="252"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="260">
                        <scope line="262">
                            <scope line="265">
                                <scope line="266"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="279">
                Returns from the receiver the value of the bit at the specified coordinate.
                  The value is &lt;tt&gt;true&lt;/tt&gt; if this bit is currently set; otherwise, returns &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <return>
                    the value of the bit at the specified coordinate.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if &lt;tt&gt;column&amp;lt;0 || column&amp;gt;=columns() || row&amp;lt;0 || row&amp;gt;=rows()&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="get" type="boolean" line="288">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="292">
                Returns from the receiver the value of the bit at the specified coordinate; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions.
                  The value is &lt;tt&gt;true&lt;/tt&gt; if this bit is currently set; otherwise, returns &lt;tt&gt;false&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid values without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;column&amp;gt;=0 &amp;&amp; column&amp;lt;columns() &amp;&amp; row&amp;gt;=0 &amp;&amp; row&amp;lt;rows()&lt;/tt&gt;.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <return>
                    the value of the bit at the specified coordinate.                    
                </return>
            </javadoc>
            <method name="getQuick" type="boolean" line="304">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="307">
                Returns a hash code value for the receiver.                
            </javadoc>
            <method name="hashCode" type="int" line="310"/>
            <javadoc line="313">
                Performs a logical &lt;b&gt;NOT&lt;/b&gt; on the bits of the receiver.                
            </javadoc>
            <method name="not" type="void" line="316"/>
            <javadoc line="319">
                Performs a logical &lt;b&gt;OR&lt;/b&gt; of the receiver with another bit matrix.
                  The receiver is modified so that a bit in it has the
                  value &lt;code&gt;true&lt;/code&gt; if and only if it either already had the 
                  value &lt;code&gt;true&lt;/code&gt; or the corresponding bit in the other bit matrix
                  argument has the value &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    other   a bit matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;columns() != other.columns() || rows() != other.rows()&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="or" type="void" line="329">
                <params>
                    <param name="other" type="BitMatrix"/>
                </params>
            </method>
            <javadoc line="333">
                Constructs and returns a new matrix with &lt;tt&gt;width&lt;/tt&gt; columns and &lt;tt&gt;height&lt;/tt&gt; rows which is a copy of the contents of the given box.
                  The box ranges from &lt;tt&gt;[column,row]&lt;/tt&gt; to &lt;tt&gt;[column+width-1,row+height-1]&lt;/tt&gt;, all inclusive.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    width   the width of the box.                    
                </param>
                <param>
                    height   the height of the box.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if &lt;tt&gt;column&amp;lt;0 || column+width&amp;gt;columns() || row&amp;lt;0 || row+height&amp;gt;rows()&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="part" type="BitMatrix" line="342">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="subMatrix" type="BitMatrix" line="346"/>
            </method>
            <javadoc line="350">
                Sets the bit at the specified coordinate to the state specified by &lt;tt&gt;value&lt;/tt&gt;.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    value the value of the bit to be copied into the specified coordinate.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if &lt;tt&gt;column&amp;lt;0 || column&amp;gt;=columns() || row&amp;lt;0 || row&amp;gt;=rows()&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="358">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="362">
                Sets the bit at the specified coordinate to the state specified by &lt;tt&gt;value&lt;/tt&gt;; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid values without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;column&amp;gt;=0 &amp;&amp; column&amp;lt;columns() &amp;&amp; row&amp;gt;=0 &amp;&amp; row&amp;lt;rows()&lt;/tt&gt;.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    value the value of the bit to be copied into the specified coordinate.                    
                </param>
            </javadoc>
            <method name="putQuick" type="void" line="373">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="376">
                Replaces a box of the receiver with the contents of another matrix&apos;s box.
                  The source box ranges from &lt;tt&gt;[sourceColumn,sourceRow]&lt;/tt&gt; to &lt;tt&gt;[sourceColumn+width-1,sourceRow+height-1]&lt;/tt&gt;, all inclusive.
                  The destination box ranges from &lt;tt&gt;[column,row]&lt;/tt&gt; to &lt;tt&gt;[column+width-1,row+height-1]&lt;/tt&gt;, all inclusive.
                  Does nothing if &lt;tt&gt;width &amp;lt;= 0 || height &amp;lt;= 0&lt;/tt&gt;.
                  If &lt;tt&gt;source==this&lt;/tt&gt; and the source and destination box intersect in an ambiguous way, then replaces as if using an intermediate auxiliary copy of the receiver.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    width   the width of the box.                    
                </param>
                <param>
                    height   the height of the box.                    
                </param>
                <param>
                    source   the source matrix to copy from(may be identical to the receiver).                    
                </param>
                <param>
                    sourceColumn   the index of the source column-coordinate.                    
                </param>
                <param>
                    sourceRow   the index of the source row-coordinate.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if &lt;tt&gt;column&amp;lt;0 || column+width&amp;gt;columns() || row&amp;lt;0 || row+height&amp;gt;rows()&lt;/tt&gt;                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if &lt;tt&gt;sourceColumn&amp;lt;0 || sourceColumn+width&amp;gt;source.columns() || sourceRow&amp;lt;0 || sourceRow+height&amp;gt;source.rows()&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="replaceBoxWith" type="void" line="393">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="source" type="BitMatrix"/>
                    <param name="sourceColumn" type="int"/>
                    <param name="sourceRow" type="int"/>
                </params>
                <comment line="402">
                    dangerous intersection                    
                </comment>
                <scope line="398">
                    <declaration name="destRect" type="Rectangle" line="399"/>
                    <declaration name="sourceRect" type="Rectangle" line="400"/>
                    <scope line="401"/>
                </scope>
                <declaration name="sourceVector" type="BitVector" line="406"/>
                <declaration name="destVector" type="BitVector" line="407"/>
                <declaration name="sourceColumns" type="int" line="408"/>
                <scope line="409">
                    <declaration name="offset" type="int" line="410"/>
                    <declaration name="sourceOffset" type="int" line="411"/>
                </scope>
            </method>
            <javadoc line="415">
                Sets the bits in the given box to the state specified by &lt;tt&gt;value&lt;/tt&gt;.
                  The box ranges from &lt;tt&gt;[column,row]&lt;/tt&gt; to &lt;tt&gt;[column+width-1,row+height-1]&lt;/tt&gt;, all inclusive.
                  (Does nothing if &lt;tt&gt;width &amp;lt;= 0 || height &amp;lt;= 0&lt;/tt&gt;).                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    width   the width of the box.                    
                </param>
                <param>
                    height   the height of the box.                    
                </param>
                <param>
                    value the value of the bit to be copied into the bits of the specified box.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if &lt;tt&gt;column&amp;lt;0 || column+width&amp;gt;columns() || row&amp;lt;0 || row+height&amp;gt;rows()&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="replaceBoxWith" type="void" line="426">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="value" type="boolean"/>
                </params>
                <declaration name="destVector" type="BitVector" line="430"/>
                <scope line="431">
                    <declaration name="offset" type="int" line="432"/>
                </scope>
            </method>
            <javadoc line="436">
                Returns the number of rows of the receiver.                
            </javadoc>
            <method name="rows" type="int" line="439"/>
            <javadoc line="442">
                Returns the size of the receiver which is &lt;tt&gt;columns()rows()&lt;/tt&gt;.                
            </javadoc>
            <method name="size" type="int" line="445"/>
            <javadoc line="448">
                Converts the receiver to a bitvector. 
                  In many cases this method only makes sense on one-dimensional matrices.
                  &lt;b&gt;WARNING:&lt;/b&gt; The returned bitvector and the receiver share the &lt;b&gt;same&lt;/b&gt; backing bits.
                  Modifying either of them will affect the other.
                  If this behaviour is not what you want, you should first use &lt;tt&gt;copy()&lt;/tt&gt; to make sure both objects use separate internal storage.                
            </javadoc>
            <method name="toBitVector" type="BitVector" line="455"/>
            <javadoc line="458">
                Returns a (very crude) string representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="461"/>
            <javadoc line="464">
                Performs a logical &lt;b&gt;XOR&lt;/b&gt; of the receiver with another bit matrix.
                  The receiver is modified so that a bit in it has the
                  value &lt;code&gt;true&lt;/code&gt; if and only if one of the following statements holds:
                  &lt;ul&gt;
                  &lt;li&gt;The bit initially has the value &lt;code&gt;true&lt;/code&gt;, and the 
                  corresponding bit in the argument has the value &lt;code&gt;false&lt;/code&gt;.
                  &lt;li&gt;The bit initially has the value &lt;code&gt;false&lt;/code&gt;, and the 
                  corresponding bit in the argument has the value &lt;code&gt;true&lt;/code&gt;. 
                  &lt;/ul&gt;                
                <param>
                    other   a bit matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;columns() != other.columns() || rows() != other.rows()&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="xor" type="void" line="478">
                <params>
                    <param name="other" type="BitMatrix"/>
                </params>
            </method>
        </class>
    </source>