<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.map.AbstractIntObjectMap"/>
        <import package="cern.colt.map.OpenIntObjectHashMap"/>
        <import package="cern.colt.matrix.ObjectMatrix1D"/>
        <import package="cern.colt.matrix.ObjectMatrix2D"/>
        <class name="SparseObjectMatrix1D" line="15">
            <extends class="ObjectMatrix1D"/>
            <comment line="53">
                The elements of the matrix.                
            </comment>
            <javadoc line="15">
                Sparse hashed 1-d matrix (aka &lt;i&gt;vector&lt;/i&gt;) holding &lt;tt&gt;Object&lt;/tt&gt; elements.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  &lt;p&gt;
                  Note that this implementation is not synchronized.
                  Uses a {@link cern.colt.map.OpenIntObjectHashMap}, which is a compact and performant hashing technique.
                  &lt;p&gt;
                  &lt;b&gt;Memory requirements:&lt;/b&gt;
                  &lt;p&gt;
                  Cells that
                  &lt;ul&gt;
                  &lt;li&gt;are never set to non-zero values do not use any memory.
                  &lt;li&gt;switch from zero to non-zero state do use memory.
                  &lt;li&gt;switch back from non-zero to zero state also do use memory. However, their memory is automatically reclaimed from time to time. It can also manually be reclaimed by calling {@link #trimToSize()}.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  worst case: &lt;tt&gt;memory [bytes] = (1/minLoadFactor)  nonZeros  13&lt;/tt&gt;.
                  &lt;br&gt;best  case: &lt;tt&gt;memory [bytes] = (1/maxLoadFactor)  nonZeros  13&lt;/tt&gt;.
                  &lt;br&gt;Where &lt;tt&gt;nonZeros = cardinality()&lt;/tt&gt; is the number of non-zero cells.
                  Thus, a 1000000 matrix with minLoadFactor=0.25 and maxLoadFactor=0.5 and 1000000 non-zero cells consumes between 25 MB and 50 MB.
                  The same 1000000 matrix with 1000 non-zero cells consumes between 25 and 50 KB.
                  &lt;p&gt;
                  &lt;b&gt;Time complexity:&lt;/b&gt;
                  &lt;p&gt;
                  This class offers &lt;i&gt;expected&lt;/i&gt; time complexity &lt;tt&gt;O(1)&lt;/tt&gt; (i.e. constant time) for the basic operations
                  &lt;tt&gt;get&lt;/tt&gt;, &lt;tt&gt;getQuick&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;, &lt;tt&gt;setQuick&lt;/tt&gt; and &lt;tt&gt;size&lt;/tt&gt;
                  assuming the hash function disperses the elements properly among the buckets.
                  Otherwise, pathological cases, although highly improbable, can occur, degrading performance to &lt;tt&gt;O(N)&lt;/tt&gt; in the worst case.
                  As such this sparse class is expected to have no worse time complexity than its dense counterpart {@link DenseObjectMatrix1D}.
                  However, constant factors are considerably larger.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="elements" type="AbstractIntObjectMap" line="55"/>
            <javadoc line="56">
                Constructs a matrix with a copy of the given values.
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values The values to be filled into the new matrix.                    
                </param>
            </javadoc>
            <method name="SparseObjectMatrix1D" type="constructor" line="62">
                <params>
                    <param name="values" type="Object[]"/>
                </params>
            </method>
            <javadoc line="66">
                Constructs a matrix with a given number of cells.
                  All entries are initially &lt;tt&gt;null&lt;/tt&gt;.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;size&lt;0&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="SparseObjectMatrix1D" type="constructor" line="72">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="75">
                Constructs a matrix with a given number of parameters.
                  All entries are initially &lt;tt&gt;null&lt;/tt&gt;.
                  For details related to memory usage see {@link cern.colt.map.OpenIntObjectHashMap}.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <param>
                    initialCapacity   the initial capacity of the hash map.
                      If not known, set &lt;tt&gt;initialCapacity=0&lt;/tt&gt; or small.                    
                </param>
                <param>
                    minLoadFactor        the minimum load factor of the hash map.                    
                </param>
                <param>
                    maxLoadFactor        the maximum load factor of the hash map.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;initialCapacity &lt; 0 || (minLoadFactor &lt; 0.0 || minLoadFactor &gt;= 1.0) || (maxLoadFactor &lt;= 0.0 || maxLoadFactor &gt;= 1.0) || (minLoadFactor &gt;= maxLoadFactor)&lt;/tt&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;size&lt;0&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="SparseObjectMatrix1D" type="constructor" line="88">
                <params>
                    <param name="size" type="int"/>
                    <param name="initialCapacity" type="int"/>
                    <param name="minLoadFactor" type="double"/>
                    <param name="maxLoadFactor" type="double"/>
                </params>
            </method>
            <javadoc line="92">
                Constructs a matrix view with a given number of parameters.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <param>
                    elements the cells.                    
                </param>
                <param>
                    offset the index of the first element.                    
                </param>
                <param>
                    stride the number of indexes between any two elements, i.e. &lt;tt&gt;index(i+1)-index(i)&lt;/tt&gt;.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;size&lt;0&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="SparseObjectMatrix1D" type="constructor" line="101">
                <params>
                    <param name="size" type="int"/>
                    <param name="elements" type="AbstractIntObjectMap"/>
                    <param name="offset" type="int"/>
                    <param name="stride" type="int"/>
                </params>
            </method>
            <javadoc line="106">
                Returns the number of cells having non-zero values.                
            </javadoc>
            <method name="cardinality" type="int" line="109"/>
            <javadoc line="113">
                Ensures that the receiver can hold at least the specified number of non-zero cells without needing to allocate new internal memory.
                  If necessary, allocates new internal memory and increases the capacity of the receiver.
                  &lt;p&gt;
                  This method never need be called; it is for performance tuning only.
                  Calling this method before tt&gt;set()&lt;/tt&gt;ing a large number of non-zero values boosts performance,
                  because the receiver will grow only once instead of potentially many times and hash collisions get less probable.                
                <param>
                    minNonZeros   the desired minimum number of non-zero cells.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="123">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="126">
                Returns the matrix cell value at coordinate &lt;tt&gt;index&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.                
                <param>
                    index   the index of the cell.                    
                </param>
                <return>
                    the value of the specified cell.                    
                </return>
            </javadoc>
            <method name="getQuick" type="Object" line="136">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="138">
                    if (debug) if (index&lt;0 || index&gt;=size) checkIndex(index);
                    return this.elements.get(index(index));
                     manually inlined:                    
                </comment>
            </method>
            <javadoc line="142">
                Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share at least one identical cell.                
            </javadoc>
            <method name="haveSharedCellsRaw" type="boolean" line="145">
                <params>
                    <param name="other" type="ObjectMatrix1D"/>
                </params>
                <scope line="146">
                    <declaration name="otherMatrix" type="SelectedSparseObjectMatrix1D" line="147"/>
                </scope>
                <scope line="150">
                    <declaration name="otherMatrix" type="SparseObjectMatrix1D" line="151"/>
                </scope>
            </method>
            <javadoc line="156">
                Returns the position of the element with the given relative rank within the (virtual or non-virtual) internal 1-dimensional array.
                  You may want to override this method for performance.                
                <param>
                    rank   the rank of the element.                    
                </param>
            </javadoc>
            <method name="index" type="int" line="162">
                <params>
                    <param name="rank" type="int"/>
                </params>
                <comment line="164">
                    overriden for manual inlining only
                    return _offset(_rank(rank));                    
                </comment>
            </method>
            <javadoc line="167">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified size.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseObjectMatrix1D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseObjectMatrix1D&lt;/tt&gt;, etc.
                  In general, the new matrix should have internal parametrization as similar as possible.                
                <param>
                    size the number of cell the matrix shall have.                    
                </param>
                <return>
                    a new empty matrix of the same dynamic type.                    
                </return>
            </javadoc>
            <method name="like" type="ObjectMatrix1D" line="176">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="179">
                Construct and returns a new 2-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt;, etc.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <method name="like2D" type="ObjectMatrix2D" line="188">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="191">
                Sets the matrix cell at coordinate &lt;tt&gt;index&lt;/tt&gt; to the specified value.
                  &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.                
                <param>
                    index   the index of the cell.                    
                </param>
                <param>
                    value the value to be filled into the specified cell.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="201">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="Object"/>
                </params>
                <comment line="203">
                    if (debug) if (index&lt;0 || index&gt;=size) checkIndex(index);
                    int i =	index(index);
                     manually inlined:                    
                </comment>
                <declaration name="i" type="int" line="205"/>
            </method>
            <javadoc line="211">
                Releases any superfluous memory created by explicitly putting zero values into cells formerly having non-zero values; 
                  An application can use this operation to minimize the
                  storage of the receiver.
                  &lt;p&gt;
                  &lt;b&gt;Background:&lt;/b&gt;
                  &lt;p&gt;
                  Cells that &lt;ul&gt;
                  &lt;li&gt;are never set to non-zero values do not use any memory.
                  &lt;li&gt;switch from zero to non-zero state do use memory.
                  &lt;li&gt;switch back from non-zero to zero state also do use memory. However, their memory can be reclaimed by calling &lt;tt&gt;trimToSize()&lt;/tt&gt;.
                  &lt;/ul&gt;
                  A sequence like &lt;tt&gt;set(i,5); set(i,0);&lt;/tt&gt;
                  sets a cell to non-zero state and later back to zero state.
                  Such as sequence generates obsolete memory that is automatically reclaimed from time to time or can manually be reclaimed by calling &lt;tt&gt;trimToSize()&lt;/tt&gt;.
                  Putting zeros into cells already containing zeros does not generate obsolete memory since no memory was allocated to them in the first place.                
            </javadoc>
            <method name="trimToSize" type="void" line="228"/>
            <javadoc line="231">
                Construct and returns a new selection view.                
                <param>
                    offsets the offsets of the visible elements.                    
                </param>
                <return>
                    a new view.                    
                </return>
            </javadoc>
            <method name="viewSelectionLike" type="ObjectMatrix1D" line="237">
                <params>
                    <param name="offsets" type="int[]"/>
                </params>
            </method>
        </class>
    </source>