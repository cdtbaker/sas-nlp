<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt">
        <class name="PersistentObject" line="11">
            <extends class="Object"/>
            <implements interface="java.io.Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="11">
                This empty class is the common root for all persistent capable classes.
                  If this class inherits from &lt;tt&gt;java.lang.Object&lt;/tt&gt; then all subclasses are serializable with the standard Java serialization mechanism.
                  If this class inherits from &lt;tt&gt;com.objy.db.app.ooObj&lt;/tt&gt; then all subclasses are &lt;i&gt;additionally&lt;/i&gt; serializable with the Objectivity ODBMS persistance mechanism.
                  Thus, by modifying the inheritance of this class the entire tree of subclasses can be switched to Objectivity compatibility (and back) with minimum effort.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="18"/>
            <javadoc line="19">
                Not yet commented.                
            </javadoc>
            <method name="PersistentObject" type="constructor" line="22"/>
            <javadoc line="24">
                Returns a copy of the receiver.
                  This default implementation does not nothing except making the otherwise &lt;tt&gt;protected&lt;/tt&gt; clone method &lt;tt&gt;public&lt;/tt&gt;.                
                <return>
                    a copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="30">
                <comment line="35">
                    should never happen since we are cloneable                    
                </comment>
                <scope line="31"/>
                <scope line="33"/>
            </method>
        </class>
    </source>