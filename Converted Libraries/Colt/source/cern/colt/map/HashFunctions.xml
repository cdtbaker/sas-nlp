<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.map">
        <class name="HashFunctions" line="11">
            <extends class="Object"/>
            <javadoc line="11">
                Provides various hash functions.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <javadoc line="18">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="HashFunctions" type="constructor" line="21"/>
            <javadoc line="22">
                Returns a hashcode for the specified value.                
                <return>
                    a hash code value for the specified value.                    
                </return>
            </javadoc>
            <method name="hash" type="int" line="27">
                <params>
                    <param name="value" type="char"/>
                </params>
            </method>
            <javadoc line="30">
                Returns a hashcode for the specified value.                
                <return>
                    a hash code value for the specified value.                    
                </return>
            </javadoc>
            <method name="hash" type="int" line="35">
                <params>
                    <param name="value" type="double"/>
                </params>
                <comment line="40">
                    return (int) Double.doubleToLongBits(value*663608941.737);
                     this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)                    
                </comment>
                <declaration name="bits" type="long" line="36"/>
            </method>
            <javadoc line="42">
                Returns a hashcode for the specified value.                
                <return>
                    a hash code value for the specified value.                    
                </return>
            </javadoc>
            <method name="hash" type="int" line="47">
                <params>
                    <param name="value" type="float"/>
                </params>
                <comment line="50">
                    this avoids excessive hashCollisions in the case values are of the form (1.0, 2.0, 3.0, ...)                    
                </comment>
            </method>
            <javadoc line="51">
                Returns a hashcode for the specified value.                
                <return>
                    a hash code value for the specified value.                    
                </return>
            </javadoc>
            <method name="hash" type="int" line="56">
                <params>
                    <param name="value" type="int"/>
                </params>
                <comment line="60">
                    return value * 0x278DDE6D; // see cern.jet.random.engine.DRand                    
                </comment>
                <comment line="62">
                    value &amp;= 0x7FFFFFFF;  make it &gt;=0
                    int hashCode = 0;
                    do hashCode = 31hashCode + value%10;
                    while ((value = 10) &gt; 0);
                    
                    return 28629151hashCode;  spread even further; h31^5                    
                </comment>
            </method>
            <javadoc line="70">
                Returns a hashcode for the specified value.                
                <return>
                    a hash code value for the specified value.                    
                </return>
            </javadoc>
            <method name="hash" type="int" line="75">
                <params>
                    <param name="value" type="long"/>
                </params>
                <comment line="78">
                    value &amp;= 0x7FFFFFFFFFFFFFFFL;  make it &gt;=0 (0x7FFFFFFFFFFFFFFFL==Long.MAX_VALUE)
                    int hashCode = 0;
                    do hashCode = 31hashCode + (int) (value%10);
                    while ((value = 10) &gt; 0);
                    
                    return 28629151hashCode;  spread even further; h31^5                    
                </comment>
            </method>
            <javadoc line="86">
                Returns a hashcode for the specified object.                
                <return>
                    a hash code value for the specified object.                    
                </return>
            </javadoc>
            <method name="hash" type="int" line="91">
                <params>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <javadoc line="94">
                Returns a hashcode for the specified value.                
                <return>
                    a hash code value for the specified value.                    
                </return>
            </javadoc>
            <method name="hash" type="int" line="99">
                <params>
                    <param name="value" type="short"/>
                </params>
            </method>
            <javadoc line="102">
                Returns a hashcode for the specified value.                
                <return>
                    a hash code value for the specified value.                    
                </return>
            </javadoc>
            <method name="hash" type="int" line="107">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
        </class>
    </source>