Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/activities/PActivity.xml
126	**************************************************************** Basics ****************************************************************
221	**************************************************************** Stepping ****************************************************************
300	**************************************************************** Controlling ****************************************************************
385	if before start time
390	if past stop time
405	else should be stepping

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/activities/PActivityScheduler.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/activities/PColorActivity.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/activities/PInterpolatingActivity.xml
147	**************************************************************** Basics. ****************************************************************
237	**************************************************************** Stepping - Instead of overriding the step methods subclasses of this activity will normally override setRelativeTargetValue(). This method will be called for every step of the activity with a value ranging from 0,0 (for the first step) to 1.0 (for the final step). See PTransformActivity for an example. ****************************************************************
301	set to zero so that we don't reschedule self.
353	Just treat the zeroToOne as how far along the interpolation we are.

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/activities/PTransformActivity.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/event/PBasicInputEventHandler.xml
134	**************************************************************** Event Filter - All this event listener can be associated with a event filter. The filter accepts and rejects events based on their modifier flags and type. If the filter is null (the default case) then it accepts all events. ****************************************************************

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/event/PDragEventHandler.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/event/PDragSequenceEventHandler.xml
116	**************************************************************** Dragging - Methods to indicate the stages of the drag sequence. ****************************************************************
174	**************************************************************** Drag Activity - Used for scheduling an activity during a drag sequence. For example zooming and auto panning are implemented using this. ****************************************************************

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/event/PInputEvent.xml
108	**************************************************************** Accessing Picked Objects - Methods to access the objects associated with this event. <p> Cameras can view layers that have other cameras on them, so events may be arriving through a stack of many cameras. The getCamera() method returns the bottommost camera on that stack. The getTopCamera method returns the topmost camera on that stack, this is also the camera through which the event originated. ****************************************************************
193	**************************************************************** Basics ****************************************************************
440	**************************************************************** Classification - Methods to distinguish between mouse and key events. ****************************************************************
513	**************************************************************** Coordinate Systems - Methods for getting mouse location data These methods are only designed for use with PInputEvents that return true to the isMouseEvent method. ****************************************************************

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/event/PInputEventFilter.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/event/PInputEventListener.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/event/PPanEventHandler.xml
93	**************************************************************** Auto Pan ****************************************************************

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/event/PZoomEventHandler.xml
80	**************************************************************** Zooming ****************************************************************

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/nodes/PHtmlView.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/nodes/PImage.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/nodes/PPath.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/nodes/PText.xml
531	empty

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/PCamera.xml
526	**************************************************************** View Transform - Methods for accessing the view transform. The view transform is applied before painting and picking the cameras layers. But not before painting or picking its direct children.  Changing the view transform is how zooming and panning are accomplished. ****************************************************************
616	Offset the view transform applied to the list of layers viewed by this camera by <code>[dx, dy]<code>. This is NOT effected by the view transform's current scale or rotation. This is implemented by directly adding dx to the m02 position and dy to the m12 position in the affine transform.  @param dx offset delta x @param dy offset delta y
624	public void offsetView(final double dx, final double dy) { setViewOffset(viewTransform.getTranslateX() + dx, viewTransform.getTranslateY() + dy); }
808	**************************************************************** View Transform Constraints - Methods for setting and applying constraints to the view transform. ****************************************************************
858	**************************************************************** Camera View Coord System Conversions - Methods to translate from the camera's local coord system (above the camera's view transform) to the camera view coord system (below the camera's view transform). When converting geometry from one of the canvas's layers you must go through the view transform. ****************************************************************
944	**************************************************************** Serialization - Cameras conditionally serialize their layers. This means that only the layer references that were unconditionally (using writeObject) serialized by someone else will be restored when the camera is unserialized. ****************************************************************/
471	make sure this camera is pushed.

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/PCanvas.xml
203	**************************************************************** Basic - Methods for accessing common piccolo nodes. ****************************************************************
330	**************************************************************** Painting ****************************************************************
458	**************************************************************** Code to manage connection to Swing. There appears to be a bug in swing where it will occasionally send too many mouse pressed or mouse released events. Below we attempt to filter out those cases before they get delivered to the Piccolo framework. ****************************************************************
374	determine next render quality and repaint if
375	it's greater then the old interacting render quality.
582	support for non-opaque canvases see http:groups.google.com/group/piccolo2d-dev/browse_thread/thread/134e2792d3a54cf
594	create new paint context and set render quality to lowest common denominator render quality.
611	if switched state from animating to not animating invalidate the repaint bounds so that it will be drawn with the default instead of animating render quality.

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/PComponent.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/PInputManager.xml
186	**************************************************************** Event Handling - Methods for handling events  The dispatch manager updates the focus nodes based on the incoming events, and dispatches those events to the appropriate focus nodes. ****************************************************************
305	**************************************************************** Event Dispatch. ****************************************************************
356	queue input
361	tell root to process queued inputs
375	clear the handled bit since the same event object is used to send multiple events such as mouseEntered/mouseExited and mouseMove.

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/PLayer.xml
95	**************************************************************** Cameras - Maintain the list of cameras that are viewing this layer. ****************************************************************
183	**************************************************************** Camera Repaint Notifications - Layer nodes must forward their repaints to each camera that is viewing them so that the camera views will also get repainted. ****************************************************************
221	**************************************************************** Serialization - Layers conditionally serialize their cameras. This means that only the camera references that were unconditionally (using writeObject) serialized by someone else will be restored when the layer is unserialized. ****************************************************************

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/PNode.xml
416	**************************************************************** Animation - Methods to animate this node.  Note that animation is implemented by activities (PActivity), so if you need more control over your animation look at the activities package. Each animate method creates an animation that will animate the node from its current state to the new state specified over the given duration. These methods will try to automatically schedule the new activity, but if the node does not descend from the root node when the method is called then the activity will not be scheduled and you must schedule it manually. ****************************************************************
667	**************************************************************** Client Properties - Methods for managing client properties for this node.  Client properties provide a way for programmers to attach extra information to a node without having to subclass it and add new instance variables. ****************************************************************
761	convenience methods for attributes
866	**************************************************************** Copying - Methods for copying this node and its descendants. Copying is implemented in terms of serialization. ****************************************************************
891	**************************************************************** Coordinate System Conversions - Methods for converting geometry between this nodes local coordinates and the other major coordinate systems.  Each nodes has an affine transform that it uses to define its own coordinate system. For example if you create a new node and add it to the canvas it will appear in the upper right corner. Its coordinate system matches the coordinate system of its parent (the root node) at this point. But if you move this node by calling node.translate() the nodes affine transform will be modified and the node will appear at a different location on the screen. The node coordinate system no longer matches the coordinate system of its parent.  This is useful because it means that the node's methods for rendering and picking don't need to worry about the fact that the node has been moved to another position on the screen, they keep working just like they did when it was in the upper right hand corner of the screen.  The problem is now that each node defines its own coordinate system it is difficult to compare the positions of two node with each other. These methods are all meant to help solve that problem.  The terms used in the methods are as follows:  local - The local or base coordinate system of a node. parent - The coordinate system of a node's parent global - The topmost coordinate system, above the root node.  Normally when comparing the positions of two nodes you will convert the local position of each node to the global coordinate system, and then compare the positions in that common coordinate system. ***************************************************************
1178	**************************************************************** Event Listeners - Methods for adding and removing event listeners from a node.  Here methods are provided to add property change listeners and input event listeners. The property change listeners are notified when certain properties of this node change, and the input event listeners are notified when the nodes receives new key and mouse events. ****************************************************************
1358	**************************************************************** Bounds Geometry - Methods for setting and querying the bounds of this node.  The bounds of a node store the node's position and size in the nodes local coordinate system. Many node subclasses will need to override the setBounds method so that they can update their internal state appropriately. See PPath for an example.  Since the bounds are stored in the local coordinate system they WILL NOT change if the node is scaled, translated, or rotated.  The bounds may be accessed with either getBounds, or getBoundsReference. The former returns a copy of the bounds the latter returns a reference to the nodes bounds that should normally not be modified. If a node is marked as volatile then it may modify its bounds before returning them from getBoundsReference, otherwise it may not. ****************************************************************
1627	**************************************************************** Full Bounds - Methods for computing and querying the full bounds of this node.  The full bounds of a node store the nodes bounds together with the union of the bounds of all the node's descendants. The full bounds are stored in the parent coordinate system of this node, the full bounds DOES change when you translate, scale, or rotate this node.  The full bounds may be accessed with either getFullBounds, or getFullBoundsReference. The former returns a copy of the full bounds the latter returns a reference to the node's full bounds that should not be modified. ****************************************************************
1738	**************************************************************** Bounds Damage Management - Methods used to invalidate and validate the bounds of nodes. ****************************************************************
1992	**************************************************************** Node Transform - Methods to manipulate the node's transform.  Each node has a transform that is used to define the nodes local coordinate system. IE it is applied before picking and rendering the node.  The usual way to move nodes about on the canvas is to manipulate this transform, as opposed to changing the bounds of the node.  Since this transform defines the local coordinate system of this node the following methods with affect the global position both this node and all of its descendants. ****************************************************************
2533	**************************************************************** Paint Damage Management - Methods used to invalidate the areas of the screen that this node appears in so that they will later get painted.  Generally you will not need to call these invalidate methods when starting out with Piccolo2d because methods such as setPaint already automatically call them for you. You will need to call them when you start creating your own nodes.  When you do create you own nodes the only method that you will normally need to call is invalidatePaint. This method marks the nodes as having invalid paint, the root node's UI cycle will then later discover this damage and report it to the Java repaint manager.  Repainting is normally done with PNode.invalidatePaint() instead of directly calling PNode.repaint() because PNode.repaint() requires the nodes bounds to be computed right away. But with invalidatePaint the bounds computation can be delayed until the end of the root's UI cycle, and this can add up to a bit savings when modifying a large number of nodes all at once.  The other methods here will rarely be called except internally from the framework. ****************************************************************
2663	**************************************************************** Occluding - Methods to support occluding optimisation. Not yet complete. ****************************************************************
2697	**************************************************************** Painting - Methods for painting this node and its children  Painting is how a node defines its visual representation on the screen, and is done in the local coordinate system of the node.  The default painting behavior is to first paint the node, and then paint the node's children on top of the node. If a node needs wants specialised painting behavior it can override:  paint() - Painting here will happen before the children are painted, so the children will be painted on top of painting done here. paintAfterChildren() - Painting here will happen after the children are painted, so it will paint on top of them.  Note that you should not normally need to override fullPaint().  The visible flag can be used to make a node invisible so that it will never get painted. ****************************************************************
3049	**************************************************************** Picking - Methods for picking this node and its children.  Picking is used to determine the node that intersects a point or rectangle on the screen. It is most frequently used by the PInputManager to determine the node that the cursor is over.  The intersects() method is used to determine if a node has been picked or not. The default implementation just test to see if the pick bounds intersects the bounds of the node. Subclasses whose geometry (a circle for example) does not match up exactly with the bounds should override the intersects() method.  The default picking behavior is to first try to pick the nodes children, and then try to pick the nodes own bounds. If a node wants specialized picking behavior it can override:  pick() - Pick nodes here that should be picked before the nodes children are picked. pickAfterChildren() - Pick nodes here that should be picked after the node's children are picked.  Note that fullPick should not normally be overridden.  The pickable and childrenPickable flags can be used to make a node or it children not pickable even if their geometry does intersect the pick bounds. ****************************************************************
3215	**************************************************************** Structure - Methods for manipulating and traversing the parent child relationship  Most of these methods won't need to be overridden by subclasses but you will use them frequently to build up your node structures. ****************************************************************
3655	**************************************************************** Serialization - Nodes conditionally serialize their parent. This means that only the parents that were unconditionally (using writeObject) serialized by someone else will be restored when the node is unserialized. ****************************************************************
1503	Don't put any invalidating code here or else nodes with volatile bounds will create a soft infinite loop (calling Swing.invokeLater()) when they validate their bounds.
1895	1. Only compute new bounds if invalid flags are set.
1898	2. If my bounds are volatile and they have not been changed then signal a change.  For most cases this will do nothing, but if a nodes bounds depend on its model, then validate bounds has the responsibility of making the bounds match the models value. For example PPaths validateBounds method makes sure that the bounds are equal to the bounds of the GeneralPath model.
1912	3. If the bounds of on of my decendents are invalidate then validate the bounds of all of my children.
1923	4. Now that my children's bounds are valid and my own bounds are valid run any layout algorithm here. Note that if you try to layout volatile children piccolo will most likely start a "soft" infinite loop. It won't freeze your program, but it will make an infinite number of calls to SwingUtilities invoke later. You don't want to do that.
1933	5. If the full bounds cache is invalid then recompute the full bounds cache here after our own bounds and the children's bounds have been computed above.
1943	6. This will call getFullBoundsReference on all of the children. So if the above layoutChildren method changed the bounds of any of the children they will be validated again here.
1954	7. If the new full bounds cache differs from the previous cache then tell our parent to invalidate their full bounds. This is how bounds changes deep in the tree percolate up.
1965	8. If our paint was invalid make sure to repaint our old full bounds. The new bounds will be computed later in the validatePaint pass.
1976	9. Clear the invalid bounds flags.
2400	First compute translation amount in global coordinates
2407	Convert vector to local coordinates
2415	Finally, animate change
2943	scale the graphics so node's full bounds fit in the imageable bounds but aspect ration is retained
2956	scale the graphics so node completely covers the imageable area, but retains its aspect ratio.
2967	scale the node so that it covers then entire image, distorting it if necessary.
3033	scale the graphics so node's full bounds fit in the imageable bounds.

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/POffscreenCanvas.xml
146	empty
151	empty
156	empty
161	empty
166	empty

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/PRoot.xml
138	**************************************************************** Activities ****************************************************************
299	**************************************************************** UI Loop - Methods for running the main UI loop of Piccolo2D. ****************************************************************
244	force all the child cameras to repaint
369	The reason for the special case here (when not in the event dispatch thread) is that the SwingUtilitiles.invokeLater code below only invokes later with respect to the event dispatch thread, it will invoke concurrently with other threads.
376	Piccolo2D is not thread safe and should almost always be called from the Swing event dispatch thread. It should only reach this point when a new canvas is being created.

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/util/PAffineTransform.xml
164	x1
165	y1
166	x2
167	y2
203	x1
204	y1
205	x2
206	y2
214	correct for quadrant

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/util/PAffineTransformException.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/util/PBounds.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/util/PDebug.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/util/PDimension.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/util/PNodeFilter.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/util/PObjectOutputStream.xml
111	record pass
112	write pass

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/util/PPaintContext.xml
148	x1, y1, x2, y2

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/util/PPickPath.xml
120	**************************************************************** Picked Nodes ****************************************************************
153	**************************************************************** Iterating over picked nodes. ****************************************************************
242	**************************************************************** Path Transform ****************************************************************
352	**************************************************************** Transforming Geometry - Methods to transform geometry through this path. <p> Note that this is different that just using the PNode.localToGlobal (an other coord system transform methods). The PNode coord system transform methods always go directly up through their parents. The PPickPath coord system transform methods go up through the list of picked nodes instead. And since cameras can pick their layers in addition to their children these two paths may be different. ****************************************************************
175	exclude current picked node
180	reset path state
188	pick again
191	make sure top camera is pushed.
254	x1, y1, x2, y3

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/util/PStack.xml

Piccolo2d/xml/core/main/java/edu/umd/cs/piccolo/util/PUtil.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/activities/PInterpolatingActivityTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/activities/PTransformActivityTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/event/MockPBasicInputEventHandler.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/event/PBasicInputEventListenerTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/event/PDragEventHandlerTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/event/PInputEventFilterTest.xml
50	http://code.google.com/p/piccolo2d/issues/detail?id=116

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/event/PInputEventTest.xml
74	expected
81	expected
88	expected
95	expected

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/event/PPanEventHandlerTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/event/PZoomEventHandlerTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/MockPCamera.xml
52	this should really be PLayer

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/MockPInputEventListener.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/MockPropertyChangeListener.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/nodes/PHtmlViewTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/nodes/PImageTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/nodes/PPathTest.xml
73	assertEquals(p.getPathReference()., cloned.getPathReference());
111	Seems like rounding is affecting the bounds greatly
119	Seems like rounding is affecting the bounds greatly
127	Seems like rounding is affecting the bounds greatly
135	Seems like rounding is affecting the bounds greatly
144	Seems like rounding is affecting the bounds greatly
152	Seems like rounding is affecting the bounds greatly

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/nodes/PTextTest.xml
126	expected
132	expected
138	expected
144	expected
150	expected
156	expected

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/PCameraTest.xml
639	public void testAnimateViewToTransformIdentity() { PRoot root = new PRoot(); PLayer layer = new PLayer(); root.addChild(camera); root.addChild(layer); camera.addChild(layer);  AffineTransform identity = new AffineTransform(); camera.animateViewToTransform(identity, System.currentTimeMillis()); todo:  throws NPE at PActivityScheduler.processActivities(PActivityScheduler.java:176) root.waitForActivities();  assertSame(identity, camera.getViewTransformReference()); }
81	TODO: assertEquals(2, cameraCopy.getLayerCount());
309	First Square's Bounds
315	Second Square's Bounds
321	Ensure point between the squares on the full bounds is not drawn
355	expected
372	pickCameraView
378	paintCameraView
386	getUnionOfLayerFullBounds
391	paintDebugInfo
414	pickCameraView
420	paintCameraView
428	getUnionOfLayerFullBounds
433	paintDebugInfo
471	todo:  layer is not contained in list of layers viewed by camera, should complain
481	expected
503	expected
634	todo:  don't understand why this should be the case

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/PCanvasTest.xml
136	zoom + pan + mockListener
137	by default
145	zoom + pan + mockListener

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/PerformanceLog.xml
44	heh, something tells me this was copied from Jazz  :)

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/PerformanceTests.xml
66	three times to warm up JVM
74	removeNodes();
77	renderSpeed();
154	for (int i = NUMBER_NODES - 1; i >= 0; i--) { parent.removeChild(nodes[i]); }
189	nodes[i].translateBy(100.01, 100.2); nodes[i].scaleBy(0.9);
195	parent.validateFullBounds(); now protected.
196	calls validateFullBounds as a side
197	effect.
219	parent.validateFullBounds(); // now protected
220	calls validateFullBounds as a side
221	effect.
325	transorm1.scale(0.5, 0.5);

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/PiccoloAsserts.xml
47	Nothing to do

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/PInputManagerTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/PLayerTest.xml
62	expected;
70	expected;

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/PNodeTest.xml
273	bounds
291	dimensions
472	assertEquals(Color.BLACK, activity.getDestinationColor());
838	It's top center point
844	It's top center point
855	It's top
856	center point
954	expected
1039	Really don't like casting here, but... without changing the interface, I don't see a choice
1069	This line fails if PNode.toImage uses getWidth() rather than getFullBounds().getWidth()
1247	And now for the case when there once was a child

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/POffscreenCanvasTest.xml
62	expected
69	expected
76	expected
120	red pixel, RGBA is 255, 0, 0, 255
133	expected
149	expected

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/PRootTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/SerializationTest.xml
57	copy uses serialization internally

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/util/PAffineTransformTest.xml
104	expected
136	expected
147	expected
158	expected

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/util/PBoundsTest.xml
58	public void testBoundsCreatedFromPointAndWidthIsCorrect() { PBounds b = new PBounds(new Point2D.Double(), 10, 10); PiccoloAsserts.assertEquals(new PBounds(-10, -10, 20, 20), b, 0.000001); }
85	TODO: This test should pass, but making it do so would break binary compatability
86	public void testWhenBoundsHas0HeightFullBoundsIsCorrectlyReturned() { final PNode node = new PNode(); final PBounds testBounds = new PBounds(10, 10, 10, 0); node.setBounds(testBounds); assertEquals(testBounds, node.getFullBounds()); }

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/util/PDebugTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/util/PDimensionTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/util/PObjectOutputStreamTest.xml
54	expected

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/util/PPickPathTest.xml

Piccolo2d/xml/core/test/java/edu/umd/cs/piccolo/util/PUtilTest.xml
42	see http://code.google.com/p/piccolo2d/issues/detail?id=116

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/ActivityExample.xml
58	Create a new node that we will apply different activities to, and place that node at location 200, 200.
65	Create a new custom "flash" activity. This activity will start running in five seconds, and while it runs it will flash aNode's paint between red and green every half second.
85	An activity will not run unless it is scheduled with the root. Once it has been scheduled it will be given a chance to run during the next PRoot.processInputs() call.
90	Use the PNode animate methods to create three activities that animate the node's position. Since our node already descends from the root node the animate methods will automatically schedule these activities for us.
99	the animate activities will start immediately (in the next call to PRoot.processInputs) by default. Here we set their start times (in PRoot global time) so that they start when the previous one has finished.
109	or the previous three lines could be replaced with these lines for the same effect. a2.setStartTime(currentTime + 5000); a3.setStartTime(currentTime + 10000); a4.setStartTime(currentTime + 15000);

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/ActivityMemoryLeakBugExample.xml
59	Create the node that we expect to get garbage collected.
62	Create a WeakReference to the node so we can detect if it is gc'd.
64	Create and execute an activity.
66	Create a Timer that will start after the activity and repeat.
69	Remove our reference to the node.
71	Force garbage collection.
73	This should print null if the node was successfully gc'd. (IT never does.)
75	This prints 0 as expected.
79	This will cause any previous activity references to clear.
69	Remove our reference to the node.
71	Force garbage collection.
73	This should print null if the node was successfully gc'd. (IT never does.)
75	This prints 0 as expected.
87	Wait 6 seconds before doing the cleanup so the bug can be witnessed.
92	empty
87	Wait 6 seconds before doing the cleanup so the bug can be witnessed.
92	empty

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/AngleNodeExample.xml
80	the angle node class
100	point one
131	point two
185	bounds can be set externally

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/BirdsEyeViewExample.xml
104	This method demonstrates the kinds of things that can be done with any node.
154	So far we have just been using PNode, but of course PNode has many subclasses that you can try out to.
168	Another way to create nodes is to customize other nodes that already exist. Here we create an ellipse, except when you press the mouse on this ellipse it turns into a square, when you release the mouse it goes back to being an ellipse.
214	Here a new "face" node is created. But instead of drawing the face directly using Graphics2D we compose the face from other nodes.
248	Here a completely new kind of node, a grid node" is created. We do all the drawing ourselves here instead of passing the work off to other parts of the framework.
478	class BirdsEyeView
87	Last of all lets remove the default pan event handler, and add a drag event handler instead. This way you will be able to drag the nodes around with the mouse.
93	this will create the actual BirdsEyeView and put it in a JDialog
110	A node needs to be a descendent of the root to be displayed on the screen.
114	The default color for a node is blue, but you can change that with the setPaint method.
118	A node can have children nodes added to it.
121	The base bounds of a node is easy to change. Note that changing the base bounds of a node will not change it's children.
125	Each node has a transform that can be used to transform the node, and all its children on the screen.
131	The transparency of any node can be set, this transparency will be applied to any of the nodes children as well.
135	Its easy to copy nodes.
138	Make is so that the copies children are not pickable. For this example that means you will not be able to grab the child and remove it from its parent.
143	Change the look of the copy
147	Let's add the copy to the root, and translate it so that it does not cover the original node.
162	Here we create an image node that displays a thumbnail image of the root node. Note that you can easily get a thumbnail of any node by using PNode.toImage().
182	if mouse is pressed draw self as a square.
188	if mouse is not pressed draw self normally.
198	this tells the framework that the node
199	needs to be redisplayed.
205	this tells the framework that the node
206	needs to be redisplayed.
182	if mouse is pressed draw self as a square.
188	if mouse is not pressed draw self normally.
198	this tells the framework that the node
199	needs to be redisplayed.
205	this tells the framework that the node
206	needs to be redisplayed.
219	create parts for the face.
226	add the face parts
231	don't want anyone grabbing out our eye's.
234	position the face parts.
238	set the face bounds so that it neatly contains the face parts.
242	opps it to small, so scale it up.
270	draw vertical lines
270	draw vertical lines
323	create the PropertyChangeListener for listening to the viewed canvas
331	create the coverage node
338	add the drag event handler
353	remove Pan and Zoom
433	find the upper left corner
435	set to the lesser value
443	same for y
451	find the lower right corner
453	set to the greater value
461	same for height
473	keep the birds eye view centered

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/CameraExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/CenterExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/ChartLabelExample.xml
57	Row Bar
60	Colume Bar
72	create bar layers
76	create bar nodes
78	create row bar with node row1, row2,...row10
85	create col bar with node col1, col2,...col10
93	add bar layers to camera
97	create matrix nodes
106	catch drag event and move bars corresponding

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/ClipExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/CompositeExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/DynamicExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/EventHandlerExample.xml
67	Create a new event handler the creates new rectangles on mouse pressed, dragged, release.
71	Make the event handler only work with BUTTON1 events, so that it does not conflict with the zoom event handler that is installed by default.
76	Remove the pan event handler that is installed by default so that it does not conflict with our new rectangle creation event handler.
80	Register our new event handler.
86	Create a new subclass of PBasicEventHandler that creates new PPath nodes on mouse pressed, dragged, and released sequences. Not that subclassing PDragSequenceEventHandler would make this class easier to implement, but here you can see how to do it from scratch.
92	The rectangle that is currently getting created.
95	The mouse press location for the current pressed, drag, release sequence.
99	The current drag location.
107	Initialize the locations.
111	create a new rectangle and add it to the canvas layer so that we can see it.
117	update the rectangle shape.
123	update the drag point location.
126	update the rectangle shape.
132	update the rectangle shape.
138	create a new bounds that contains both the press and current drag point.
144	Set the rectangles bounds.
107	Initialize the locations.
111	create a new rectangle and add it to the canvas layer so that we can see it.
117	update the rectangle shape.
123	update the drag point location.
126	update the rectangle shape.
132	update the rectangle shape.
138	create a new bounds that contains both the press and current drag point.
144	Set the rectangles bounds.

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/ExampleRunner.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/fisheye/CalendarNode.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/fisheye/DayNode.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/fisheye/TabularFisheye.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/fisheye/TabularFisheyeApplet.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/fisheye/TabularFisheyeFrame.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/FrameCanvasSizeBugExample.xml
64	setSize(410, 410); getCanvas().setSize(410, 410);  does not help
77	getCanvas().setSize(410, 410);  does not help

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/FullBoundsEventExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/FullScreenNodeExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/GraphEditorExample.xml
122	TODO eclipse formatter made this ugly / <summary> / Simple event handler which applies the following actions to every node it is called on: / * Turn node red when the mouse goes over the node / * Turn node white when the mouse exits the node / * Drag the node, and associated edges on mousedrag / It assumes that the node's Tag references an ArrayList with a list of associated / edges where each edge is a PPath which each have a Tag that references an ArrayList / with a list of associated nodes. / </summary>
70	Initialize, and create a layer for the edges (always underneath the nodes)
86	Create some random edges Each edge's Tag has an ArrayList used to store associated nodes
114	Create event handler to move nodes and update edges
166	Note that the node's "FullBounds" must be used (instead of just the "Bound") because the nodes have non-identity transforms which must be included when determining their position.

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/GridExample.xml
84	make sure grid gets drawn on snap to grid boundaries. And expand a little to make sure that entire view is filled.
113	replace standar layer with grid layer.
119	add constrains so that grid layers bounds always match cameras view bounds. This makes it look like an infinite grid.
142	add a drag event handler that supports snap to grid.
84	make sure grid gets drawn on snap to grid boundaries. And expand a little to make sure that entire view is filled.

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/GroupExample.xml
80	Create a decorator group that is NOT volatile
84	Put some nodes under the group for it to decorate
90	Add everything to the Piccolo hierarchy
95	Create a decorator group that IS volatile
99	Put some nodes under the group for it to decorate
105	Add everything to the Piccolo hierarchy
110	Create a selection handler so we can see that the decorator actually works

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/HandleExample.xml
67	add another node the the root as a reference point so that we can tell that our node is getting dragged, as opposed the the canvas view being panned.
74	tell the node to show its default handles.
77	The default PBoundsHandle implementation doesn't work well with PPaths that have strokes. The reason for this is that the default PBoundsHandle modifies the bounds of an PNode, but when adding handles to a PPath we really want it to be modifying the underlying geometry of the PPath, the shape without the stroke. The solution is that we need to create handles specific to PPaths that locate themselves on the paths internal geometry, not the external bounds geometry...
89	Here we create our own custom handle. This handle is located in the center of its parent node and you can use it to drag the parent around. This handle also updates its color when the is pressed/released in it.
99	the default locator locates the center of a node.
116	make this handle appear a bit different then the default handle appearance.
121	also add our new custom handle to the node.

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/HelloWorldExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/HierarchyZoomExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/HtmlViewExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/KeyEventFocusExample.xml
60	Create a green and red node and add them to canvas layer.
70	Add an event handler to the green node the prints "green mousepressed" when the mouse is pressed on the green node, and "green keypressed" when the key is pressed and the event listener has keyboard focus.
80	Key board focus is managed by the PInputManager, accessible from the root object, or from an incoming PInputEvent. In this case when the mouse is pressed in the green node, then the event handler associated with it will set the keyfocus to itself. Now it will receive key events until someone else gets the focus.
102	do the same thing with the red node.

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/LayoutExample.xml
61	Create a new node and override its validateLayoutAfterChildren method so that it lays out its children in a row from left to right.
85	add some children to the layout node.
87	create child to add to the layout node.
90	add the child to the layout node.
96	add layoutNode to the root so it will be displayed.

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/LensExample.xml
71	viewed by the PCanvas camera, the lens is added to this layer.
73	viewed by both the lens camera and the PCanvas camera
75	viewed by only the lens camera
89	Create an event handler that draws squiggles on the first layer of the bottom most camera.
100	add squiggles to the first layer of the bottom camera. In the case of the lens these squiggles will be added to the layer that is only visible by the lens, In the case of the canvas camera the squiggles will be added to the shared layer viewed by both the canvas camera and the lens.
126	add the squiggle event handler to both the lens and the canvas camera.
131	make sure that the event handler consumes events so that it doesn't conflic with other event handlers or with itself (since its added to two event sources).
136	remove default event handlers, not really nessessary since the squiggleEventHandler consumes everything anyway, but still good to do.
142	create a node that is viewed both by the main camera and by the lens. Note that in its paint method it checks to see which camera is painting it, and if its the lens uses a different color.
100	add squiggles to the first layer of the bottom camera. In the case of the lens these squiggles will be added to the layer that is only visible by the lens, In the case of the canvas camera the squiggles will be added to the shared layer viewed by both the canvas camera and the lens.

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/NavigationExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/NodeCacheExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/NodeEventExample.xml
64	create a new node and override some of the event handling methods so that the node changes to orange when the mouse (Button 1) is pressed on the node, and changes back to green when the mouse is released. Also when the mouse is dragged the node updates its position so that the node is "dragged". Note that this only serves as a simple example, most of the time dragging nodes is best done with the PDragEventHandler, but this shows another way to do it.  Note that each of these methods marks the event as handled. This is so that when the node is being dragged the zoom and pan event handles (that are installed by default) do not also operate, but they will still respond to events that are not handled by the node. (try to uncomment the aEvent.setHandled() calls and see what happens.
98	Note this slows things down a lot, comment it out to see how the normal speed of things is.  For fun the coords of each event that the node handles are printed out. This can help to understand how coordinate systems work. Notice that when the example first starts all the values for (canvas, global, and local) are equal. But once you drag the node then the local coordinates become different then the screen and global coordinates. When you pan or zoom then the screen coordinates become different from the global coordinates.
110	System.out.println("Global Location: " + aEvent.getGlobalLocation());
114	System.out.println("Global Delta: " + aEvent.getGlobalDelta());
122	By default the filter accepts all events, but here we constrain the kinds of events that aNode receives to button 1 events. Comment this line out and then you will be able to drag the node with any mouse button. aNode.setEventFilter(new PInputEventFilter(InputEvent.BUTTON1_MASK));
128	add another node to the canvas that does not handle events as a reference point, so that we can make sure that our green node is getting dragged.
110	System.out.println("Global Location: " + aEvent.getGlobalLocation());
114	System.out.println("Global Delta: " + aEvent.getGlobalDelta());

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/NodeExample.xml
84	This method demonstrates the kinds of things that can be done with any node.
136	So far we have just been using PNode, but of course PNode has many subclasses that you can try out to.
151	Another way to create nodes is to customize other nodes that already exist. Here we create an ellipse, except when you press the mouse on this ellipse it turns into a square, when you release the mouse it goes back to being an ellipse.
197	Here a new "face" node is created. But instead of drawing the face directly using Graphics2D we compose the face from other nodes.
232	Here a completely new kind of node, a grid node" is created. We do all the drawing ourselves here instead of passing the work off to other parts of the framework.
77	Last of all lets remove the default pan event handler, and add a drag event handler instead. This way you will be able to drag the nodes around with the mouse.
90	A node needs to be a descendent of the root to be displayed on the screen.
94	The default color for a node is blue, but you can change that with the setPaint method.
98	A node can have children nodes added to it.
101	The base bounds of a node is easy to change. Note that changing the base bounds of a node will not change it's children.
106	Each node has a transform that can be used to transform the node, and all its children on the screen.
112	The transparency of any node can be set, this transparency will be applied to any of the nodes children as well.
116	Its easy to copy nodes.
119	Make is so that the copies children are not pickable. For this example that means you will not be able to grab the child and remove it from its parent.
125	Change the look of the copy
129	Let's add the copy to the root, and translate it so that it does not cover the original node.
144	Here we create an image node that displays a thumbnail image of the root node. Note that you can easily get a thumbnail of any node by using PNode.toImage().
165	if mouse is pressed draw self as a square.
171	if mouse is not pressed draw self normally.
181	this tells the framework that the node
182	needs to be redisplayed.
188	this tells the framework that the node
189	needs to be redisplayed.
165	if mouse is pressed draw self as a square.
171	if mouse is not pressed draw self normally.
181	this tells the framework that the node
182	needs to be redisplayed.
188	this tells the framework that the node
189	needs to be redisplayed.
203	create parts for the face.
210	add the face parts
215	don't want anyone grabbing out our eye's.
218	position the face parts.
222	set the face bounds so that it neatly contains the face parts.
226	opps it to small, so scale it up.
254	draw vertical lines
254	draw vertical lines

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/NodeLinkExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/OffscreenCanvasExample.xml
109	canvas is not opaque, so fill with background color
112	then let canvas render into graphics

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/OffsetVsTranslateExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/P3DRectExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/PanToExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/PathExample.xml
72	n3.setStroke(null);
78	create a set of bounds handles for reshaping n3, and make them sticky relative to the getCanvas().getCamera().

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/PositionExample.xml
63	n2.setScale(2.0); n2.setScale(1.0);

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/PositionPathActivityExample.xml
61	create animation path
69	create node to display animation path
73	create activity to run animation.
80	positionPathActivity.setSlowInSlowOut(false);
84	add the activity.

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/PrintExample.xml
93	Now, create the toolbar
186	First we compute the union of all the layers
194	Then we put the bounds into camera coordinates and union the camera bounds
199	Rather than finding the distance from the upper left corner of the window to the upper left corner of the document - we instead find the distance from the lower right corner of the window to the upper left corner of the document THEN we measure the offset from the lower right corner of the document
226	If a scroll is in progress - we ignore new scrolls - if we didn't, since the scrollbars depend on the camera location we can end up with an infinite loop
234	Get the union of all the layers' bounds
245	Union the camera view bounds
249	Now find the new view position in view coordinates - This is basically the distance from the lower right corner of the window to the upper left corner of the document We then measure the offset from the lower right corner of the document
259	Now transform the new view position into global coords
262	Compute the new matrix values to put the camera at the correct location
269	Now actually set the camera's transform

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/pswing/MultiplePSwingCanvasesExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/pswing/PSwingDynamicComponentExample.xml
165	applies the text field values to the components in the panels
179	A panel with a few different types of JComponent.
73	canvas
79	panel that we'll display using Piccolo
85	panel that we're display using pure Swing
91	text fields, for specifying dynamic text
96	Update button, for applying dynamic text
115	control panel
120	JLabel
128	JCheckBox
136	JRadioButton
144	Update button
149	Add component buttons
157	main panel
168	Piccolo (PSwing) panel
173	Swing panel
182	allow public access to keep our example code short
192	components
197	layout
182	allow public access to keep our example code short
245	This thread serves to make the problem more noticeable.
246	new SleepThread( 1000 ).start();

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/pswing/PSwingExample1.xml
124	Growable JTextArea
131	A Slider
137	A Scrollable JTree
146	A JColorChooser - also demonstrates JTabbedPane
159	A Slider
170	A Combo Box
179	has to be done manually at present
181	Revalidate and repaint

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/pswing/PSwingExample2.xml
94	Set up basic frame
110	JButton
120	JButton
130	2nd Copy of JButton
139	Growable JTextArea
149	Growable JTextField
158	A Slider
167	A Scrollable JTree
179	A Scrollable JTextArea
190	A non-scrollable JTextField A panel MUST be created with double buffering off
203	// A JComboBox String[] listItems = {"Summer Teeth", "Mermaid Avenue", "Being There", "A.M."}; ZComboBox box = new ZComboBox( listItems ); swing = new PSwing( canvas, box ); leaf = new ZVisualLeaf( swing ); transform = new PNode(); transform.translate( 0, -150 ); transform.addChild( leaf ); canvas.getLayer().addChild( transform );
214	A panel with TitledBorder and JList
237	A JLabel
269	Rotated copy of the Scrollable JTextArea
277	A panel with layout A panel MUST be created with double buffering off
300	JTable Example
370	JEditorPane - HTML example
403	A JInternalFrame with a JSplitPane - a JOptionPane - and a JToolBar
472	JMenuBar menuBar = new JMenuBar(); ZMenu menu = new ZMenu( "File" ); ZMenu sub = new ZMenu( "Export" ); JMenuItem gif = new JMenuItem( "Funds" ); sub.add( gif ); menu.add( sub ); menuBar.add( menu ); iframe.setJMenuBar( menuBar );
483	A JColorChooser - also demonstrates JTabbedPane JColorChooser chooser = new JColorChooser();
493	Revalidate and repaint

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/pswing/PSwingExample3.xml
60	Set up basic frame
232	example.setScale(getHeight() / example.getHeight());

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/pswing/PSwingExample4.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/pswing/PSwingMemoryLeakExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/PSwingExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/PulseExample.xml
78	animate from source to destination color in one second,
90	animate from source to destination color in one second, loop 5 times
102	animate from source to destination to source color in one second, loop 10 times

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/ScrollingExample.xml
94	Now, create the toolbar
156	First we compute the union of all the layers
164	Then we put the bounds into camera coordinates and union the camera bounds
169	Rather than finding the distance from the upper left corner of the window to the upper left corner of the document - we instead find the distance from the lower right corner of the window to the upper left corner of the document THEN we measure the offset from the lower right corner of the document
195	If a scroll is in progress - we ignore new scrolls - if we didn't, since the scrollbars depend on the camera location we can end up with an infinite loop
203	Get the union of all the layers' bounds
214	Union the camera view bounds
218	Now find the new view position in view coordinates - This is basically the distance from the lower right corner of the window to the upper left corner of the document. We then measure the offset from the lower right corner of the document
227	Now transform the new view position into global coords
230	Compute the new matrix values to put the camera at the correct location
237	Now actually set the camera's transform

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/SelectionExample.xml
70	Turn off default navigation event handlers
74	Create a selection event handler

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/ShadowExample.xml
89	offset the shadow to account for blur radius offset and light direction
92	add shadow node before node, or set Z explicitly (e.g. sendToBack())

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/SliderExample.xml
70	Create main panel
72	Create a tabbed pane
75	Add tabbed pane to main panel
77	Set the frame contents
80	Create a canvas
83	Create a scroll pane for the canvas
85	Create a new tab for the tabbed pane
88	Create the contents for "Tab 1"
92	Populate the tab panel with four instances of nested panel.
110	Add the default zoom button
121	Create a pswing object for the tab panel
124	Add the pswing object to the canvas
126	Turn off default pan event handling
129	Set up basic frame
139	A panel MUST be created with double buffering off

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/SquiggleExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/StickyExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/StickyHandleLayerExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/StrokeExample.xml
87	fixedWidthRect1.setStroke(new PFixedWidthStroke(1.5f, PFixedWidthStroke.CAP_ROUND, PFixedWidthStroke.JOIN_MITER, 10.0f));
94	fixedWidthRect2.setStroke(new PFixedWidthStroke(1.0f, PFixedWidthStroke.CAP_ROUND, PFixedWidthStroke.JOIN_MITER, 10.0f, new float[] { 2.0f, 3.0f, 4.0f }, 1.0f));

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/SwingLayoutExample.xml
86	Shift+Drag up/down will scale the node up/down
132	nested
133	layout
154	3x2 grid of values, shapes and labels (similar to a layout in acid-base-solutions)
160	row
161	column
163	will be controlled by
164	dynamicSlider
169	row
170	column
180	row
181	column
192	controls
193	dynamicNode

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/TextExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/TextOffsetBoundsExample.xml
80	ignore

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/ToImageExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/TooltipExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/TwoCanvasExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/examples/WaitForActivitiesExample.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/tutorial/InterfaceFrame.xml
55	Remove the Default pan event handler and add a drag event handler so that we can drag the nodes around individually.
60	Add Some Default Nodes
62	Create a node.
65	A node will not be visible until its bounds and paint are set.
69	A node needs to be a descendant of the root to be displayed.
73	A node can have child nodes added to it.
79	The base bounds of a node are easy to change. Changing the bounds of a node will not affect its children.
83	Each node has a transform that can be used to modify the position, scale or rotation of a node. Changing a node's transform, will transform all of its children as well.
90	Add a couple of PPath nodes and a PText node.
95	Here we create a PImage node that displays a thumbnail image of the root node. Then we add the new PImage to the main layer.
100	Create a New Node using Composition
104	Create parts for the face.
111	Add the face parts.
116	Don't want anyone grabbing out our eyes.
119	Position the face parts.
123	Set the face bounds so that it neatly contains the face parts.
128	Opps it's too small, so scale it up.
133	Create a New Node using Inheritance.

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/tutorial/PiccoloPresentation.xml

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/tutorial/SpecialEffects.xml
47	Create the Target for our Activities.
49	Create a new node that we will apply different activities to, and place that node at location 200, 200.
56	Extend PActivity.
58	Store the current time in milliseconds for use below.
61	Create a new custom "flash" activity. This activity will start running in five seconds, and while it runs it will flash aNode's paint between red and green every half second.
70	Toggle the target node's brush color between red and green each time the activity steps.
83	Schedule the activity.
86	Create three activities that animate the node's position. Since our node already descends from the root node the animate methods will automatically schedule these activities for us.
93	The animate activities will start immediately (in the next call to PRoot.processInputs) by default. Here we set their start times (in PRoot global time) so that they start when the previous one has finished.
70	Toggle the target node's brush color between red and green each time the activity steps.

Piccolo2d/xml/examples/main/java/edu/umd/cs/piccolo/tutorial/UserInteraction.xml
60	Create a Camera Event Listener.
62	Remove the pan event handler that is installed by default so that it does not conflict with our new squiggle handler.
66	Create a squiggle handler and register it with the Canvas.
70	Create a Node Event Listener.
72	Create a green rectangle node.
77	Attach event handler directly to the node.
120	The squiggle that is currently getting created.
133	Create a new squiggle and add it to the canvas.
139	Reset the keydboard focus.
145	Update the squiggle while dragging.
151	Update the squiggle one last time.
157	Add a new segment to the squiggle from the last mouse position to the current mouse position.

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/activities/PPathActivity.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/activities/PPositionPathActivity.xml
200	ok to do nothing it'll just be skipped

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/event/PNavigationEventHandler.xml
94	**************************************************************** Focus Change Events. ****************************************************************
157	**************************************************************** Focus Movement - Moves the focus the specified direction. Left, right, up, down mean move the focus to the closest sibling of the current focus node that exists in that direction. Move in means move the focus to a child of the current focus, move out means move the focus to the parent of the current focus. ****************************************************************
384	**************************************************************** Canvas Movement - The canvas view is updated so that the current focus remains visible on the screen at 100 percent scale. ****************************************************************
135	Pressed key is not a navigation key.
404	first stop any old animations.
448	Pan the canvas to include the view bounds with minimal canvas movement.
452	Get rid of any white space. The canvas may be panned and zoomed in to do this. But make sure not stay constrained by max magnification. fillViewWhiteSpace(aCamera);
460	Animate the canvas so that it ends up with the given view transform.
481	center content.
488	then center along x axis.
493	then center along y axis.

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/event/PNotification.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/event/PNotificationCenter.xml
174	**************************************************************** Remove Listener Methods ****************************************************************
220	**************************************************************** Post PNotification Methods ****************************************************************

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/event/PSelectionEventHandler.xml
402	////////////////////////////////////////////////////// The overridden methods from PDragSequenceEventHandler
476	////////////////////////// Additional methods
286	Because unselect() removes from selection, we need to take a copy of it first so it isn't changed while we're iterating
555	Option indicator not down - clear selection, and start fresh
638	Make just the items in the list selected Do this efficiently by first unselecting things not in the list
649	Then select the rest
681	Then select the rest
726	There was a press node, so drag selection
747	Remove marquee
772	Increment by
773	partial steps to slow down animation

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/event/PStyledTextEventHandler.xml
226	Get the node's top right hand corner
232	Update the editor to edit the specified node
285	We have to nest the mouse press in two invoke laters so that it is fired so that the component has been completely validated at the new size and the mouse event has the correct offset

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/event/PZoomToEventHandler.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/handles/PBoundsHandle.xml
362	reset locator to update layout

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/handles/PHandle.xml
125	no need for moved events for handle interaction,
127	so reject them so we don't consume them

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/handles/PStickyHandleManager.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/nodes/P3DRect.xml
120	lazy init:

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/nodes/PCacheCamera.xml
98	Initialize the image to the union of the current and destination bounds
107	Now create the actual cache image that we will use to animate fast
116	Do this after the painting above!
119	Return the bounds to the previous viewbounds
122	The code below is just copied from animateViewToCenterBounds to create the correct transform to center the specified bounds

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/nodes/PClip.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/nodes/PComposite.xml
46	public boolean setBounds(double x, double y, double width, double height) { PBounds childBounds = getUnionOfChildrenBounds(null);  double dx = x - childBounds.x; double dy = y - childBounds.y; double sx = width  childBounds.width; double sy = height  childBounds.height; double scale = sx > sy ? sx : sy;  Iterator i = getChildrenIterator(); while (i.hasNext()) { PNode each = (PNode) i.next(); each.offset(dx, dy); each.scaleAboutPoint(scale, each.getBoundsReference().x, each.getBoundsReference().y); }  return super.setBounds(x, y, width, height); }  protected void layoutChildren() { getBoundsReference().setRect(getUnionOfChildrenBounds(null)); }
82	this code won't work with internal cameras, because it doesn't pop the cameras view transform.

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/nodes/PLens.xml
85	Drag bar gets resized to fit the available space, so any rectangle will do here
89	This forces drag events to percolate up to PLens object
97	create an event handler to drag the lens around. Note that this event handler consumes events in case another conflicting event handler has been installed higher up in the heirarchy.
104	When this PLens is dragged around adjust the cameras view transform.

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/nodes/PLine.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/nodes/PNodeCache.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/nodes/PShadow.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/nodes/PStyledText.xml
542	Because swing doesn't use fractional font metrics by default, we use LineBreakMeasurer to find out where Swing is going to break them
165	Save the document
176	First get the actual text and stick it in an Attributed String
184	Since this the location we're providing comes from directly querying the document, this is impossible in a single threaded model
190	The paragraph start and end indices
193	The default style context - which will be reused
208	The current element will be used as a temp variable while searching for the leaf element at the current position
212	Small assumption here that there is one root element - can fix for more general support later
216	If the string is length 0 then we just need to add the attributes once
221	These are the mandatory attributes
237	OK, now we loop until we find all the leaf elements in the range
242	These are the mandatory attributes
257	And set the position to the end of the given attribute
277	Before each pass, start at the root
280	Now we descend the hierarchy until we get to a leaf
360	The paragraph start and end indices
363	The current position in the specified range
368	lastNewLine is used to detect the case when two newlines follow in direct succession & lastNewLine should be true to start in case the first character is a newline
377	If the token
388	If the token is empty - create an attributed string with a single space since LineBreakMeasurers don't work with an empty string - note that this case should only arise if the document is empty
398	This is the normal case - where we have some text
403	Increment the position
410	Add one more newline if the last character was a newline
449	Need to change the lineinfo data structure to know about multiple text layouts per line
466	Now create a new line
567	Small assumption here that there is one root element - can fix for more general support later
619	Manually set the paint - this is specified in the AttributedString but seems to be ignored by the TextLayout. To handle multiple colors we should be breaking up the lines but that functionality can be added later as needed
627	Draw the underline and the strikethrough after the text

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/PApplet.xml
63	Manipulation of Piccolo's scene graph should be done from Swings event dispatch thread since Piccolo is not thread safe. This code calls initialize() from that thread once the PFrame is initialized, so you are safe to start working with Piccolo in the initialize() method.

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/PFrame.xml
312	**************************************************************** Initialize ****************************************************************
119	expected from Applets
136	Manipulation of Piccolo's scene graph should be done from Swings event dispatch thread since Piccolo2D is not thread safe. This code calls initialize() from that thread once the PFrame is initialized, so you are safe to start working with Piccolo2D in the initialize() method.
273	result.add(new DisplayMode(640, 480, 32, 0)); result.add(new DisplayMode(640, 480, 16, 0)); result.add(new DisplayMode(640, 480, 8, 0));

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/pswing/PComboBox.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/pswing/PSwing.xml
366	Need to explicitly set the component's bounds because the component's parent (PSwingCanvas.ChildWrapper) has no layout manager.
414	Save Stroke and Font for restoring.
428	Restore the stroke and font on the Graphics2D
451	Save original color for restoring painting as greek.
464	Restore original color on the Graphics2D
498	The component has not been initialized yet.
524	Get the graphics context associated with a new buffered image. Use TYPE_INT_ARGB_PRE so that transparent components look good on Windows.
530	Use the graphics context associated with the existing buffered image
532	Clear the buffered image to prevent artifacts on Macintosh
636	need to get the full tree for this node
642	System.out.println( "parent = " + parent.getClass() );
645	System.out.println( "Found player: with " + player.getCameraCount() + " cameras" );

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/pswing/PSwingCanvas.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/pswing/PSwingEvent.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/pswing/PSwingEventHandler.xml
216	This is only partially fixed to find the deepest component at pt. It needs to do something like package private method: Container.getMouseEventTarget(int,int,boolean)
222	We found the right component - but we need to get the offset to put the event in the component's coordinates
229	Mouse Pressed gives focus - effects Mouse Drags and Mouse Releases
244	This first case we don't want to give events to just any Swing component - but to the one that got the original mousePressed
280	Now we need to check if an exit or enter event needs to be dispatched - this code is independent of the mouseButtons. I tested in normal Swing to see the correct behavior.
284	This means mouseExited
286	This shouldn't happen - since we're only getting node events
296	This means mouseExited prevComponent and mouseEntered comp
307	This means mouseEntered
376	TODO: this probably won't handle viewing through multiple cameras.
391	buttonData.getPSwing().repaint(); //Experiment with SliderExample (from Martin) suggests this line is unnecessary, and a serious problem in performance.

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/pswing/PSwingMouseEvent.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/pswing/PSwingMouseMotionEvent.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/pswing/PSwingMouseWheelEvent.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/pswing/PSwingRepaintManager.xml
77	The components that are currently painting This needs to be a vector for thread safety
129	We have to check to see if the PCanvas (ie. the SwingWrapper) is in the components ancestry. If so, we will want to capture that repaint. However, we also will need to translate the repaint request since the component may be offset inside another component.
139	Adds to the offset since the component is nested
145	Now we check to see if we should capture the repaint and act accordingly
151	Schedule a repaint for the dirty part of the PSwing

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/swing/PCacheCanvas.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/swing/PDefaultScrollDirector.xml
140	First we compute the union of all the layers
148	Then we put the bounds into camera coordinates and union the camera bounds
170	First we compute the union of all the layers
178	Then we put the bounds into camera coordinates and union the camera bounds
198	Bail out if scrollInProgress because we can end up with an infinite loop since the scrollbars depend on the camera location
206	Get the union of all the layers' bounds
217	Union the camera bounds
221	Now find the new view position in view coordinates
224	Now transform the new view position into global coords
227	Compute the new matrix values to put the camera at the correct location
234	Now actually set the camera's transform
278	Get the union of all the layers' bounds
286	Put into camera coordinates
289	And union with the camera bounds
293	Truncate these to ints before comparing since that's what the ScrollPane uses

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/swing/PScrollDirector.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/swing/PScrollPane.xml
107	Set the layout and sync it with the scroll pane
314	LEG: Modification to query the viewport for the view size rather than going directly to the view
383	LEG: Modification to only perform these actions if one of the scrollbars is actually showing
420	LEG: Modification to only perform these actions if one of the scrollbars is actually showing
428	LEG: Modification to query the viewport for the view size rather than going directly to the view

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/swing/PScrollPaneLayout.xml
63	Sync the (now obsolete) policy fields with the JScrollPane.
80	Get the scrollPane's orientation.
83	If there's a visible column header remove the space it needs from the top of availR. The column header is treated as if it were fixed height, arbitrary width.
97	If there's a visible row header remove the space it needs from the left or right of availR. The row header is treated as if it were fixed width, arbitrary height.
117	If there's a JScrollPane.viewportBorder, remove the space it occupies for availR.
134	At this point availR is the space available for the viewport and scrollbars. rowHeadR is correct except for its height and y and colHeadR is correct except for its width and x. Once we're through computing the dimensions of these three parts we can go back and set the dimensions of rowHeadR.height, rowHeadR.y, colHeadR.width, colHeadR.x and the bounds for the corners.  We'll decide about putting up scrollbars by comparing the viewport views preferred size with the viewports extent size (generally just its size). Using the preferredSize is reasonable because layout proceeds top down - so we expect the viewport to be layed out next. And we assume that the viewports layout manager will give the view it's preferred size.
153	LEG: Modification to ask the viewport for the view size rather than asking the view directly
157	If there's a vertical scrollbar and we need one, allocate space for it (we'll make it visible later). A vertical scrollbar is considered to be fixed width, arbitrary height.
171	vsbPolicy == VERTICAL_SCROLLBAR_AS_NEEDED
180	LEG: Modification because the view's preferred size needs to be recomputed because the extent may have changed
186	If there's a horizontal scrollbar and we need one, allocate space for it (we'll make it visible later). A horizontal scrollbar is considered to be fixed height, arbitrary width.
199	hsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED
206	If we added the horizontal scrollbar then we've implicitly reduced the vertical space available to the viewport. As a consequence we may have to add the vertical scrollbar, if that hasn't been done so already. Ofcourse we don't bother with any of this if the vsbPolicy is NEVER.
217	LEG: Modification because the view's preferred size needs to be recomputed because the extent may have changed
230	Set the size of the viewport first, and then recheck the Scrollable methods. Some components base their return values for the Scrollable methods on the size of the Viewport, so that if we don't ask after resetting the bounds we may have gotten the wrong answer.
240	We now have the final size of the viewport: availR. Now fixup the header and scrollbar widthsheights.
251	Set the bounds of the remaining components. The scrollbars are made invisible if they're not needed.

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/swing/PViewport.xml
156	Send the scroll director the exact view position and let it interpret it as needed

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/swing/SwingLayoutNode.xml
55	How the space allocated by the Swing layout manager is used differs depending on Swing component type. The behavior of a default JLabel (Anchors.WEST) seems to make the most sense for PNodes.
309	NOTE We don't need to override removeChild(PNode) or removeChildren, because they call removeChild(int index). If their implementation ever changes, then we'll need to override them.
158	NOTE: This must be the only super.addChild call that we make in our entire implementation, because all PNode.addChild methods are implemented in terms of this one. Calling other variants of super.addChild will incorrectly invoke our overrides, resulting in StackOverflowException.
207	NOTE: since PNode.addChild(PNode) is implemented in terms of PNode.addChild(int index), we must do the same.
210	workaround a flaw in PNode.addChild(PNode), they should have handled this in PNode.addChild(int index).
297	NOTE: This must be the only super.removeChild call that we make in our entire implementation, because all PNode.removeChild methods are implemented in terms of this one. Calling other variants of super.removeChild will incorrectly invoke our overrides, resulting in StackOverflowException.
395	necessary for layouts like BoxLayout that
396	would otherwise use stale state
481	Base class that provides utilities for computing common anchor points.
428	Round up fractional part instead of rounding down; better to include the whole node than to chop off part.
454	important to check that the bounds have really changed, or we'll cause StackOverflowException
481	Base class that provides utilities for computing common anchor points.

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/util/LineShape.xml
222	If line is a point then bail out
230	distance along segment as a ratio or the (x1,y1)->(x2,y2) vector
239	Point is not "beside" the segment and it's been disallowed, bail.

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/util/MutablePoints.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/util/PBoundsLocator.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/util/PFixedWidthStroke.xml
70	avoid repeated cloning:
73	avoid repeated instantiations:

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/util/PLocator.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/util/PNodeLocator.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/util/POcclusionDetection.xml
76	if n has been occluded by a previous descendant then this child must also be occluded
81	see if child each occludes n

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/util/Points.xml

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/util/PSemanticStroke.xml
106	FIXME Honestly I don't understand this distinction - shouldn't it always be PPaintContext.CURRENT_PAINT_CONTEXT regardless of the debugging flag?

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/util/ShadowUtils.xml
54	empty
83	paint src image into mask
88	composite mask with shadow paint
94	apply convolve op for blur

Piccolo2d/xml/extras/main/java/edu/umd/cs/piccolox/util/XYArray.xml
369	wow, this is terrible.

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/event/PNotificationCenterTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/handles/PHandleTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/nodes/P3DRectTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/nodes/PCacheCameraTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/nodes/PClipTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/nodes/PCompositeTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/nodes/PLensTest.xml
44	assertTrue(cloned.getInputEventListeners().length > 0); assertNotNull(cloned.getPropertyChangeListeners()); assertFalse(cloned.getPropertyChangeListeners().length == 0); assertNotSame(cloned.getPropertyChangeListeners()[0], lens.getPropertyChangeListeners()[0]);

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/nodes/PLineTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/nodes/PNodeCacheTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/nodes/PShadowTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/nodes/PStyledTextTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/PAppletTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/PFrameTest.xml
47	why oh why is PFrame visible by default
47	why oh why is PFrame visible by default
60	why oh why is PFrame visible by default
60	why oh why is PFrame visible by default

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/pswing/PComboBoxTest.xml
81	Need a way of dispatching mock events to canvas before this can be tested

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/pswing/PSwingCanvasTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/pswing/PSwingEventHandlerTest.xml

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/pswing/PSwingMouseEventTest.xml
23	expected exception
34	expected exception

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/pswing/PSwingRepaintManagerTest.xml
54	TODO: this assertion is true when running this test case in isolation but since PSwingCanvas may have been instantiated elsewhere in the test suite may not be true when running this test case as part of a test suite assertFalse(currentManager instanceof PSwingRepaintManager);
63	assertFalse(currentManager instanceof PSwingRepaintManager);
68	assertFalse(currentManager instanceof PSwingRepaintManager);
75	once a PSwingCanvas has been instantiated, PSwingRepaintManager replaces RepaintManager everwhere
94	TODO: should lockRepaint allow null?
112	TODO: catch this array index out of bounds exception?
118	expected
151	TODO: will need some additional work here for full test coverage
161	TODO: should check for null and throw IAE, or keep NPE?
166	expected
177	TODO: will need some additional work here for full test coverage

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/pswing/PSwingTest.xml
56	expected
143	do nothing
228	While paint, it uses the graphics element to determine the font's display size and hence determine minimum size of JLabel.
248	While paint, it uses the graphics element to determine the font's display size and hence determine minimum size of JLabel.

Piccolo2d/xml/extras/test/java/edu/umd/cs/piccolox/util/ShadowUtilsTest.xml
78	expected
86	expected
96	expected

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/PSWTBoundsHandle.xml
245	Leave bounds untouched
386	Do nothing
389	reset locator to update layout

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/PSWTCanvas.xml
148	**************************************************************** Basic - Methods for accessing common Piccolo2D nodes. ****************************************************************
267	**************************************************************** Painting ****************************************************************
452	**************************************************************** Code to manage connection to Swing. There appears to be a bug in swing where it will occasionally send to many mouse pressed or mouse released events. Below we attempt to filter out those cases before they get delivered to the Piccolo2D framework. ****************************************************************
437	We must manually dispose of cursors under SWT
448	This sets the cursor back to default
569	This fixes a problem with standard debugging of region management in SWT
578	create new paint context and set render quality
592	paint Piccolo2D
595	if switched state from animating to not animating invalidate the entire screen so that it will be drawn with the default instead of animating render quality.
611	Dispose of the allocated image gc
730	This doesn't work with click event types for some reason - it has to do with how the click and release events are ordered, I think

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/PSWTHandle.xml
136	**************************************************************** Handle Dragging - These are the methods the subclasses should normally override to give a handle unique behavior. ****************************************************************
173	**************************************************************** Layout - When a handle's parent's layout changes the handle invalidates its own layout and then repositions itself on its parents bounds using its locator to determine that new position. ****************************************************************
220	**************************************************************** Serialization ****************************************************************
100	so reject them so we don't consume them

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/PSWTImage.xml

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/PSWTKeyEvent.xml

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/PSWTMouseEvent.xml

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/PSWTPath.xml
186	**************************************************************** Stroke ****************************************************************
307	**************************************************************** Painting ****************************************************************
295	Note that this pen width code does not really work for SWT since it assumes that the pen width scales - in actuality it does not. However, the fix would be to have volatile bounds for all shapes which isn't a nice alternative

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/PSWTRoot.xml

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/PSWTSelectionEventHandler.xml

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/PSWTStickyHandleManager.xml

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/PSWTText.xml
390	If font is too small then render it as "greek"
469	If no text, then we want to have the bounds of a space character, so get those bounds here

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/SWTGraphics2D.xml
138	////////////////// GET CLIP
233	////////////// COLOR METHODS
301	////////////// FONT METHODS
420	///////////////////////// AFFINE TRANSFORM METHODS /
477	SUPPORT METHODS /
683	************************************************************************** * FOR NOW - ASSUME NO ROTATION ON THE TRANSFORM FOR THE FOLLOWING CALLS! ************************************************************************** *
1292	/////////////////////////////// CURRENTLY UNSUPPORTED METHODS /
1530	/////////////////////////////// CLEAN-UP METHODS /
349	TODO:  prevent NPE
525	log this?

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/SWTShapeManager.xml
60	First, transform all 4 corners of the rectangle
61	top left corner
63	top right corner
65	bottom right corner
67	bottom left corner
71	Then, find the bounds of those 4 transformed points.

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/SWTTimer.xml
56	These fields are maintained by TimerQueue. eventQueued can also be reset by the TimerQueue, but will only ever happen in applet case when TimerQueues thread is destroyed.
107	Guaranteed to return a non-null array
110	Process the listeners last to first, notifying those that are interested in this event
223	We must do this as otherwise if the Timer once notified in !coalese mode notify will be stuck to true and never become false.

Piccolo2d/xml/swt/main/java/edu/umd/cs/piccolox/swt/SWTTimerQueue.xml
57	Now start the TimerQueue thread.
85	Ensures that the Thread will be started from the display thread.
114	If the Timer is already in the queue, then do nothing
223	TODO: making this use isRunning without causing an infinite loop
240	The timeToWait we return should never be negative and only be zero when we have no Timers to wait for.
254	have timer post an event
260	Remove the timer from the queue
263	This tries to keep the interval uniform at the cost of drift.
269	Allow other threads to call addTimer() and removeTimer() even when we are posting Timers like mad. Since the wait() releases the lock, be sure not to maintain any state between iterations of the loop.
278	Nothing to do
299	Nothing to do
305	Mark all the timers we contain as not being queued.

Piccolo2d/xml/swt/test/java/edu/umd/cs/piccolox/swt/PSWTBoundsHandleTest.xml

Piccolo2d/xml/swt/test/java/edu/umd/cs/piccolox/swt/PSWTCanvasTest.xml
98	This is terrible

Piccolo2d/xml/swt/test/java/edu/umd/cs/piccolox/swt/PSWTHandleTest.xml

Piccolo2d/xml/swt/test/java/edu/umd/cs/piccolox/swt/PSWTImageTest.xml
67	if it tries to use the graphics context, it would throw a NPE

Piccolo2d/xml/swt/test/java/edu/umd/cs/piccolox/swt/PSWTPathTest.xml
61	hard to believe the tolerance in SWT is this poor
77	hard to believe the tolerance in SWT is this poor
83	center is calculated in terms of local bounds, not full bounds
94	hard to believe the tolerance in SWT is this poor
100	center is calculated in terms of local bounds, not full bounds

Piccolo2d/xml/swt/test/java/edu/umd/cs/piccolox/swt/PSWTTextTest.xml

Piccolo2d/xml/swt/test/java/edu/umd/cs/piccolox/swt/SWTGraphics2DTest.xml
57	If caches return disposed object this will fail

