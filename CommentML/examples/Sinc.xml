<class name="Sinc">

	<javadoc>
		Value below which the computations are done using Taylor series.
		<p>
			The Taylor serios for sinc even order derivatives are:
			<pre>
				d^(2n)sinc/dx^(2n)     = Sum_(k>=0) (-1)^(n+k) / ((2k)!(2n+2k+1)) x^(2k)
                                       = (-1)^n     [ 1/(2n+1) - x^2/(4n+6) + x^4/(48n+120) - x^6/(1440n+5040) + O(x^8) ]
            </pre>
        </p>
        <p>
        	The Taylor series for sinc odd order derivatives are:
     		<pre>
     			d^(2n+1)sinc/dx^(2n+1) = Sum_(k>=0) (-1)^(n+k+1) / ((2k+1)!(2n+2k+3)) x^(2k+1)
                                       = (-1)^(n+1) [ x/(2n+3) - x^3/(12n+30) + x^5/(240n+840) - x^7/(10080n+45360) + O(x^9) ]
            </pre>
		</p>
    	<p>
    		So the ratio of the fourth term with respect to the first term is always smaller than x^6/720, for all derivative orders. This implies that neglecting this term and using only the first three terms induces a relative error bounded by x^6/720. The SHORTCUT value is chosen such that this relative error is below double precision accuracy when |x| &lt;= SHORTCUT.
    	</p>
    </javadoc>

	<declaration type="double" name="SHORTCUT" />
	<declaration type="boolean" name="normalized">
		<javadoc>For normalized sinc function.</javadoc>
	</declaration>

	<constructor>
		<javadoc>The sinc function, <code>sin(x) / x</code>.</javadoc>
	</constructor>

	<constructor>
		<javadoc>Instantiates the sinc function.</javadoc>
		<declaration type="boolean" name="normalized">
			<javadoc>
				if <code>true</code>, the function is <code>sin(&pi;x) / &pi;x</code>, otherwise <code>sin(x) / x</code>.
			</javadoc>
		</declaration>
	</constructor>

	<method return="double" name="value">
		<javadoc>
			<inheritDoc/>
		</javadoc>
		<declaration type="double" name="x"/>
		<declaration type="double" name="scaledX"/>
		<comment>use Taylor series</comment>
		<comment>use definite expression</comment>
	</method>

	<method return="DerivativeStructure" name="value">
		<javadoc>
			<inheritDoc/>
			<since>3.1</since>
		</javadoc>
		<declaration type="double" name="scaledX"/>
		<declaration type="double" name="scaledX2"/>
		<declaration type="double[]" name="f"/>
		<scope>
			<declaration type="int" name="i"/>
			<declaration type="int" name="k"/>
			<scope>
				<comment>even derivation order</comment>
			</scope>
			<scope>
				<comment>odd derivation order</comment>
			</scope>
		</scope>
		<scope>
			<declaration type="double" name="inv"/>
			<declaration type="double" name="cos"/>
			<declaration type="double" name="sin"/>
			<comment>
				the nth order derivative of sinc has the form:
	            dn(sinc(x)/dxn = [S_n(x) sin(x) + C_n(x) cos(x)] / x^(n+1)
	            where S_n(x) is an even polynomial with degree n-1 or n (depending on parity)
	            and C_n(x) is an odd polynomial with degree n-1 or n (depending on parity)
	            S_0(x) = 1, S_1(x) = -1, S_2(x) = -x^2 + 2, S_3(x) = 3x^2 - 6...
	            C_0(x) = 0, C_1(x) = x, C_2(x) = -2x, C_3(x) = -x^3 + 6x...
	            the general recurrence relations for S_n and C_n are:
	            S_n(x) = x S_(n-1)'(x) - n S_(n-1)(x) - x C_(n-1)(x)
	            C_n(x) = x C_(n-1)'(x) - n C_(n-1)(x) + x S_(n-1)(x)
	            as per polynomials parity, we can store both S_n and C_n in the same array
	        </comment>
            <declaration type="double[]" name="sc"/>
            <declaration type="double" name="coeff"/>
            <scope>
                <declaration type="int" name="i"/>
                <declaration type="double" name="s"/>
                <declaration type="double" name="c"/>
                <comment>update and evaluate polynomials S_n(x) and C_n(x)</comment>
                <declaration type="int" name="kStart"/>
                <scope>
                    <comment>even derivation order, S_n is degree n and C_n is degree n-1</comment>
                </scope>
                <scope>
                    <comment>odd derivation order, S_n is degree n-1 and C-n is dgree n</comment>
                </scope>
                <comment>in this loop, k is always even</comment>
                <scope>
                    <declaration type="int" name="k"/>
                </scope>
            </scope>
        </scope>
        <scope>
            <declaration type="double" name="scale"/>
        </scope>
    </method>

</class>